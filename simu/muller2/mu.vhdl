--
-- Automatically generated by
-- CONPRO: Concurrent Processing High Level Synthesis Compiler
--         (C) 2006,2007 * BSSLAB, Dr. Stefan Bosse * Version 0.99R
-- Implementation of Module <Mu>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity MOD_mu is
port(
  -- Connections to the outside world
  signal top_D_qe_0: out std_logic_vector(1 downto 0);
  signal top_D_qd_0: out std_logic_vector(1 downto 0);
  signal top_D_qe_1: out std_logic_vector(1 downto 0);
  signal top_D_qd_1: out std_logic_vector(1 downto 0);
  signal top_D_qe_2: out std_logic_vector(1 downto 0);
  signal top_D_qd_2: out std_logic_vector(1 downto 0);
  signal top_D_qe_3: out std_logic_vector(1 downto 0);
  signal top_D_qd_3: out std_logic_vector(1 downto 0);
  signal top_D_qe_4: out std_logic_vector(1 downto 0);
  signal top_D_qd_4: out std_logic_vector(1 downto 0);
  signal top_D_qe_5: out std_logic_vector(1 downto 0);
  signal top_D_qd_5: out std_logic_vector(1 downto 0);
  signal top_D_qe_6: out std_logic_vector(1 downto 0);
  signal top_D_qd_6: out std_logic_vector(1 downto 0);
  signal top_D_qe_7: out std_logic_vector(1 downto 0);
  signal top_D_qd_7: out std_logic_vector(1 downto 0);
  signal top_D_load: out std_logic;
  signal top_D_shift: out std_logic;
  signal CLK: in std_logic;
  signal RESET: in std_logic
);
end MOD_mu;
architecture main of MOD_mu is
  -- Process instances
  component mu_p1
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_WR: out std_logic_vector(3 downto 0);
    signal REG_d_WE: out std_logic;
    signal S_shift_WR: out std_logic;
    signal S_load_WR: out std_logic;
    signal PRO_p1_ENABLE: in std_logic;
    signal PRO_p1_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component mu_main
  port(
    -- Connections to external objects, components and the outside world
    signal PRO_p1_START: out std_logic;
    signal PRO_p1_GD: in std_logic;
    signal PRO_main_ENABLE: in std_logic;
    signal PRO_main_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  -- Local and temporary data objects
  signal REG_d: std_logic_vector(3 downto 0);
  signal REG_d_RD: std_logic_vector(3 downto 0);
  signal REG_d_p1_WR: std_logic_vector(3 downto 0);
  signal REG_d_p1_WE: std_logic;
  signal mu_test_M_qd_0_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qd_1_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qd_2_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qd_3_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qd_4_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qd_5_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qd_6_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qd_7_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_RST_WR: std_logic;
  signal top_D_qe_0_WR: std_logic_vector(1 downto 0);
  signal PRO_main_ENABLE: std_logic;
  signal PRO_main_END: std_logic;
  signal top_D_qe_1_WR: std_logic_vector(1 downto 0);
  signal top_D_qe_2_WR: std_logic_vector(1 downto 0);
  signal top_D_qe_3_WR: std_logic_vector(1 downto 0);
  signal top_D_qe_4_WR: std_logic_vector(1 downto 0);
  signal top_D_load_WR: std_logic;
  signal top_D_qe_5_WR: std_logic_vector(1 downto 0);
  signal top_D_qe_6_WR: std_logic_vector(1 downto 0);
  signal top_D_qe_7_WR: std_logic_vector(1 downto 0);
  signal mu_test_M_qe_0_RD: std_logic_vector(1 downto 0);
  signal S_shift_RD: std_logic;
  signal S_shift_WR: std_logic;
  signal mu_test_M_qe_1_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_shift_WR: std_logic;
  signal mu_test_M_qe_2_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qe_3_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qe_4_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qe_5_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_load_WR: std_logic;
  signal mu_test_M_qe_6_RD: std_logic_vector(1 downto 0);
  signal mu_test_M_qe_7_RD: std_logic_vector(1 downto 0);
  signal PRO_p1_ENABLE: std_logic;
  signal PRO_p1_END: std_logic;
  signal PRO_p1_main_START: std_logic;
  signal PRO_p1_main_GD: std_logic;
  signal top_D_shift_WR: std_logic;
  signal mu_test_M_din_WR: std_logic_vector(3 downto 0);
  signal RESET_res: std_logic;
  signal top_D_qd_0_WR: std_logic_vector(1 downto 0);
  signal top_D_qd_1_WR: std_logic_vector(1 downto 0);
  signal top_D_qd_2_WR: std_logic_vector(1 downto 0);
  signal top_D_qd_3_WR: std_logic_vector(1 downto 0);
  signal top_D_qd_4_WR: std_logic_vector(1 downto 0);
  component muller_test_shift_2
  port(
    M_load : in std_logic;
    M_shift : in std_logic;
    M_din : in std_logic_vector(3 downto 0);
    M_qe_0 : out std_logic_vector(1 downto 0);
    M_qd_0 : out std_logic_vector(1 downto 0);
    M_qe_1 : out std_logic_vector(1 downto 0);
    M_qd_1 : out std_logic_vector(1 downto 0);
    M_qe_2 : out std_logic_vector(1 downto 0);
    M_qd_2 : out std_logic_vector(1 downto 0);
    M_qe_3 : out std_logic_vector(1 downto 0);
    M_qd_3 : out std_logic_vector(1 downto 0);
    M_qe_4 : out std_logic_vector(1 downto 0);
    M_qd_4 : out std_logic_vector(1 downto 0);
    M_qe_5 : out std_logic_vector(1 downto 0);
    M_qd_5 : out std_logic_vector(1 downto 0);
    M_qe_6 : out std_logic_vector(1 downto 0);
    M_qd_6 : out std_logic_vector(1 downto 0);
    M_qe_7 : out std_logic_vector(1 downto 0);
    M_qd_7 : out std_logic_vector(1 downto 0);
    M_RST : in std_logic
  );
  end component;
  signal top_D_qd_5_WR: std_logic_vector(1 downto 0);
  signal top_D_qd_6_WR: std_logic_vector(1 downto 0);
  signal top_D_qd_7_WR: std_logic_vector(1 downto 0);
  signal S_load_RD: std_logic;
  signal S_load_WR: std_logic;
  -- State Processing
  -- Aux. signals
  signal conpro_system_clk: std_logic;
  signal conpro_system_reset: std_logic;
begin
  -- Module implementation
  -- Register
  IMPL_REG_d: process(
          REG_d_p1_WR,
          REG_d_p1_WE,
          REG_d,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_d_RD <= REG_d;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d <= "0000";
     elsif REG_d_p1_WE='1' then
      REG_d <= REG_d_p1_WR;
     end if;
    end if;
  end process IMPL_REG_d;
  
  -- Process control
  PRO_CONTROL_main: process(
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_main_ENABLE <= '1'; -- main process activated on reset
      end if;
    end if;
  end process PRO_CONTROL_main;
  
  -- Process control
  PRO_CONTROL_p1: process(
          PRO_p1_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p1_ENABLE <= '0';
        PRO_p1_main_GD <= '1';
      elsif PRO_p1_main_START = '1' then
        PRO_p1_ENABLE <= '1';
        PRO_p1_main_GD <= '0';
      else
        PRO_p1_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p1;
  
  COMP_mu_test: muller_test_shift_2 port map(
    M_load => mu_test_M_load_WR,
    M_shift => mu_test_M_shift_WR,
    M_din => mu_test_M_din_WR,
    M_qe_0 => mu_test_M_qe_0_RD,
    M_qd_0 => mu_test_M_qd_0_RD,
    M_qe_1 => mu_test_M_qe_1_RD,
    M_qd_1 => mu_test_M_qd_1_RD,
    M_qe_2 => mu_test_M_qe_2_RD,
    M_qd_2 => mu_test_M_qd_2_RD,
    M_qe_3 => mu_test_M_qe_3_RD,
    M_qd_3 => mu_test_M_qd_3_RD,
    M_qe_4 => mu_test_M_qe_4_RD,
    M_qd_4 => mu_test_M_qd_4_RD,
    M_qe_5 => mu_test_M_qe_5_RD,
    M_qd_5 => mu_test_M_qd_5_RD,
    M_qe_6 => mu_test_M_qe_6_RD,
    M_qd_6 => mu_test_M_qd_6_RD,
    M_qe_7 => mu_test_M_qe_7_RD,
    M_qd_7 => mu_test_M_qd_7_RD,
    M_RST => mu_test_M_RST_WR
  );
  
  -- Process instantiations
  PRO_MAP_p1: mu_p1 port map(
    REG_d_WR => REG_d_p1_WR,
    REG_d_WE => REG_d_p1_WE,
    S_shift_WR => S_shift_WR,
    S_load_WR => S_load_WR,
    PRO_p1_ENABLE => PRO_p1_ENABLE,
    PRO_p1_END => PRO_p1_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_main: mu_main port map(
    PRO_p1_START => PRO_p1_main_START,
    PRO_p1_GD => PRO_p1_main_GD,
    PRO_main_ENABLE => PRO_main_ENABLE,
    PRO_main_END => PRO_main_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  
  -- Toplevel assignments
  -- Monitors
  RESET_res <= RESET;
  mu_test_M_RST_WR <= RESET_res;
  top_D_qe_0_WR <= mu_test_M_qe_0_RD;
  top_D_qd_0_WR <= mu_test_M_qd_0_RD;
  top_D_qe_1_WR <= mu_test_M_qe_1_RD;
  top_D_qd_1_WR <= mu_test_M_qd_1_RD;
  top_D_qe_2_WR <= mu_test_M_qe_2_RD;
  top_D_qd_2_WR <= mu_test_M_qd_2_RD;
  top_D_qe_3_WR <= mu_test_M_qe_3_RD;
  top_D_qd_3_WR <= mu_test_M_qd_3_RD;
  top_D_qe_4_WR <= mu_test_M_qe_4_RD;
  top_D_qd_4_WR <= mu_test_M_qd_4_RD;
  top_D_qe_5_WR <= mu_test_M_qe_5_RD;
  top_D_qd_5_WR <= mu_test_M_qd_5_RD;
  top_D_qe_6_WR <= mu_test_M_qe_6_RD;
  top_D_qd_6_WR <= mu_test_M_qd_6_RD;
  top_D_qe_7_WR <= mu_test_M_qe_7_RD;
  top_D_qd_7_WR <= mu_test_M_qd_7_RD;
  mu_test_M_shift_WR <= S_shift_RD;
  mu_test_M_load_WR <= S_load_RD;
  top_D_load_WR <= S_load_RD;
  top_D_shift_WR <= S_shift_RD;
  mu_test_M_din_WR <= REG_d_RD;
  top_D_qe_0 <= top_D_qe_0_WR;
  top_D_qd_0 <= top_D_qd_0_WR;
  top_D_qe_1 <= top_D_qe_1_WR;
  top_D_qd_1 <= top_D_qd_1_WR;
  top_D_qe_2 <= top_D_qe_2_WR;
  top_D_qd_2 <= top_D_qd_2_WR;
  top_D_qe_3 <= top_D_qe_3_WR;
  top_D_qd_3 <= top_D_qd_3_WR;
  top_D_qe_4 <= top_D_qe_4_WR;
  top_D_qd_4 <= top_D_qd_4_WR;
  top_D_qe_5 <= top_D_qe_5_WR;
  top_D_qd_5 <= top_D_qd_5_WR;
  top_D_qe_6 <= top_D_qe_6_WR;
  top_D_qd_6 <= top_D_qd_6_WR;
  top_D_qe_7 <= top_D_qe_7_WR;
  top_D_qd_7 <= top_D_qd_7_WR;
  top_D_load <= top_D_load_WR;
  top_D_shift <= top_D_shift_WR;
  S_shift_RD <= S_shift_WR;
  S_load_RD <= S_load_WR;
  conpro_system_clk <= CLK;
  conpro_system_reset <= RESET;
end main;
