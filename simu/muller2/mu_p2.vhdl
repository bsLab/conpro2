--
-- Automatically generated by
-- CONPRO: Concurrent Processing High Level Synthesis Compiler
--         (C) 2006,2007 * BSSLAB, Dr. Stefan Bosse * Version 0.99R
-- Process implementation of process <p2> from module <Mu>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity mu_p2 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_s_RD: in std_logic_vector(7 downto 0);
  signal REG_s_WR: out std_logic_vector(7 downto 0);
  signal REG_s_WE: out std_logic;
  signal REG_s_GD: in std_logic;
  signal PRO_p2_ENABLE: in std_logic;
  signal PRO_p2_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end mu_p2;
architecture main of mu_p2 is
  -- Local and temporary data objects
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p2_start, 
    S_i1_assign, -- mu.cp[15]
    S_i2_assign, -- mu.cp[15]
    S_i3_assign, -- mu.cp[15]
    S_i4_assign, -- mu.cp[15]
    S_p2_end 
    );
  signal pro_state: pro_states := S_p2_start;
  signal pro_state_next: pro_states := S_p2_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_p2_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p2_ENABLE='0' then
        pro_state <= S_p2_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          REG_s_GD,
          pro_state
          )
  begin
    PRO_p2_END <= '0';
    case pro_state is
      when S_p2_start => 
        pro_state_next <= S_i1_assign;
      when S_i1_assign => -- mu.cp[15]
        if REG_s_GD = '1' then
          pro_state_next <= S_i1_assign;
        else
          pro_state_next <= S_i2_assign;
        end if;
      when S_i2_assign => -- mu.cp[15]
        if REG_s_GD = '1' then
          pro_state_next <= S_i2_assign;
        else
          pro_state_next <= S_i3_assign;
        end if;
      when S_i3_assign => -- mu.cp[15]
        if REG_s_GD = '1' then
          pro_state_next <= S_i3_assign;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- mu.cp[15]
        if REG_s_GD = '1' then
         pro_state_next <= S_i4_assign;
        else
          pro_state_next <= S_p2_end;
        end if;
      when S_p2_end => 
        pro_state_next <= S_p2_end;
        PRO_p2_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          REG_s_RD,
          pro_state
          )
  begin
    -- Default values
    REG_s_WR <= "00000000";
    REG_s_WE <= '0';
    case pro_state is
      when S_p2_start => 
        null;
      when S_i1_assign => -- mu.cp[15]
        REG_s_WR <= REG_s_RD + "00000010";
        REG_s_WE <= '1';
      when S_i2_assign => -- mu.cp[15]
        REG_s_WR <= REG_s_RD - "00000001";
        REG_s_WE <= '1';
      when S_i3_assign => -- mu.cp[15]
        REG_s_WR <= REG_s_RD - "00000001";
        REG_s_WE <= '1';
      when S_i4_assign => -- mu.cp[15]
        REG_s_WR <= REG_s_RD - "00000001";
        REG_s_WE <= '1';
      when S_p2_end => 
        null;
    end case;
  end process data_path;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
