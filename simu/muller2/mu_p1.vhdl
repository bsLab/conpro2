--
-- Automatically generated by
-- CONPRO: Concurrent Processing High Level Synthesis Compiler
--         (C) 2006,2007 * BSSLAB, Dr. Stefan Bosse * Version 0.99R
-- Process implementation of process <p1> from module <Mu>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity mu_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_d_WR: out std_logic_vector(3 downto 0);
  signal REG_d_WE: out std_logic;
  signal S_shift_WR: out std_logic;
  signal S_load_WR: out std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end mu_p1;
architecture main of mu_p1 is
  -- Local and temporary data objects
  signal i: std_logic_vector(4 downto 0);
  signal TEMP_0: std_logic_vector(1 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, 
    S_i1_for_loop, -- mu.cp[91]
    S_i1_for_loop_cond, -- mu.cp[91]
    S_i2_assign, -- mu.cp[92]
    S_i1_for_loop_incr, -- mu.cp[91]
    S_i3_assign, -- mu.cp[94]
    S_i4_assign, -- mu.cp[96]
    S_i5_delay, -- mu.cp[97]
    S_i6_apply, -- mu.cp[98]
    S_i6_apply_1, -- mu.cp[98]
    S_p1_end 
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          i,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => 
        pro_state_next <= S_i1_for_loop;
      when S_i1_for_loop => -- mu.cp[91]
        pro_state_next <= S_i1_for_loop_cond;
      when S_i1_for_loop_cond => -- mu.cp[91]
        if "01111" >= i then
          pro_state_next <= S_i2_assign;
        else
          pro_state_next <= S_i3_assign;
        end if;
      when S_i2_assign => -- mu.cp[92]
        pro_state_next <= S_i1_for_loop_incr;
      when S_i1_for_loop_incr => -- mu.cp[91]
        pro_state_next <= S_i1_for_loop_cond;
      when S_i3_assign => -- mu.cp[94]
        pro_state_next <= S_i4_assign;
      when S_i4_assign => -- mu.cp[96]
        pro_state_next <= S_i5_delay;
      when S_i5_delay => -- mu.cp[97]
        pro_state_next <= S_i6_apply;
      when S_i6_apply => -- mu.cp[98]
        pro_state_next <= S_i6_apply_1;
      when S_i6_apply_1 => -- mu.cp[98]
        pro_state_next <= S_p1_end;
      when S_p1_end => 
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          i,
          pro_state
          )
  begin
    -- Default values
    REG_d_WR <= "0000";
    REG_d_WE <= '0';
    S_load_WR <= '0';
    S_shift_WR <= '0';
    case pro_state is
      when S_p1_start => 
        null;
      when S_i1_for_loop => -- mu.cp[91]
        null;
      when S_i1_for_loop_cond => -- mu.cp[91]
        null;
      when S_i2_assign => -- mu.cp[92]
        REG_d_WR <= i(3 downto 0);
        REG_d_WE <= '1';
      when S_i1_for_loop_incr => -- mu.cp[91]
        null;
      when S_i3_assign => -- mu.cp[94]
        REG_d_WR <= "1001";
        REG_d_WE <= '1';
      when S_i4_assign => -- mu.cp[96]
        S_load_WR <= '1';
      when S_i5_delay => -- mu.cp[97]
        null;
      when S_i6_apply => -- mu.cp[98]
        S_shift_WR <= '1';
      when S_i6_apply_1 => -- mu.cp[98]
        S_shift_WR <= '1';
      when S_p1_end => 
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          i,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        i <= "00000";
        TEMP_0 <= "00";
      else
        case pro_state is
          when S_p1_start => 
            null;
          when S_i1_for_loop => -- mu.cp[91]
            i <= "00000";
          when S_i1_for_loop_cond => -- mu.cp[91]
            null;
          when S_i2_assign => -- mu.cp[92]
            null;
          when S_i1_for_loop_incr => -- mu.cp[91]
            i <= i + "00001";
          when S_i3_assign => -- mu.cp[94]
            null;
          when S_i4_assign => -- mu.cp[96]
            null;
          when S_i5_delay => -- mu.cp[97]
            TEMP_0 <= "01";
          when S_i6_apply => -- mu.cp[98]
            null;
          when S_i6_apply_1 => -- mu.cp[98]
            null;
          when S_p1_end => 
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
