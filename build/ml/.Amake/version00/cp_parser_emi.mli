type token =
    STRING of (Cp_syntax.file_pos*string)
  | IDENT of (Cp_syntax.file_pos*string)
  | VALUE of (char*Cp_syntax.file_pos*string)
  | PARAM of (Cp_syntax.file_pos*string)
  | S_VERSION
  | S_PARAMETER
  | S_METHODS
  | S_SIGNALS
  | S_INTERFACE
  | S_MAPPING
  | S_ACCESS
  | S_PROCESS
  | S_DATA
  | S_CONTROL
  | S_IMPORT
  | S_SET
  | S_TOP
  | S_CHECK
  | LHS
  | RHS
  | LRHS
  | VAR
  | SIGNAL
  | CONSTANT
  | LOGIC
  | NATURAL
  | VARIABLE
  | BOOL
  | SHARED
  | FOREACH
  | FOR
  | DO
  | IN
  | IF
  | THEN
  | ELSE
  | ELSIF
  | BEGIN
  | END
  | WHEN
  | WAIT
  | UNTIL
  | SEQUENCE
  | TYPE
  | CASE
  | IS
  | ARRAY
  | EOI
  | SEP1
  | SEP2
  | LPAREN
  | RPAREN
  | LBRAK
  | RBRAK
  | LCURL
  | RCURL
  | ACC
  | NULL
  | OTHERS
  | FOLLOW
  | EQ
  | NEQ
  | LT
  | GT
  | ASSIGN
  | ASSIGN2
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVI
  | EXP2
  | INT
  | CHAR
  | STRINGS
  | SIGNED
  | CONC
  | AND
  | OR
  | XOR
  | NOT
  | COMMENT
  | TO
  | DOWNTO
  | OUT
  | WITH
  | OF
  | NSEC
  | USEC
  | MSEC
  | SEC
  | HZ
  | KHZ
  | MHZ
  | GHZ

val main :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Cp_syntax.emi_syntax
