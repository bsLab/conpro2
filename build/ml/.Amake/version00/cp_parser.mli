type token =
    STRING of (Cp_syntax.file_pos*string)
  | CHAR of (Cp_syntax.file_pos*char)
  | IDENT of (Cp_syntax.file_pos*string)
  | VAR
  | REG
  | CONST
  | SIGNAL
  | ARRAY
  | OBJECT
  | COMP
  | CHAN
  | QUEUE
  | PROCESS
  | MODULE
  | FUNCTION
  | RETURN
  | IMPORT
  | EXPORT
  | INCLUDE
  | CONNECT
  | MAP
  | MAPS
  | MAPSREV
  | BLOCK_START
  | BLOCK_END
  | ENDFILE
  | WAIT
  | FOR
  | WHILE
  | LOOP
  | DO
  | ALWAYS
  | IF
  | THEN
  | ELSE
  | MATCH
  | WHEN
  | OTHERS
  | TRY
  | RAISE
  | EXCEPTION
  | SEP
  | ARGSEP
  | DOT
  | IS
  | TYPE
  | PORT
  | WITH
  | OF
  | IN
  | TO
  | DOWNTO
  | CONCAT
  | ID
  | Z
  | MON
  | DEBUG
  | DOMAIN
  | LLIST
  | RLIST
  | LBRAK
  | RBRAK
  | LPAREN
  | RPAREN
  | ASSIGN
  | INIT
  | OPEN
  | DBLOCK
  | UNIT
  | TO_INT
  | TO_BOOL
  | TO_LOG
  | TO_CHR
  | SIZEOF
  | EOI
  | EQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | MAX
  | MIN
  | PLUS
  | MINUS
  | TIMES
  | DIVI
  | EXP
  | LOG
  | LNOT
  | LOR
  | LXOR
  | LAND
  | BNOT
  | BOR
  | BXOR
  | BAND
  | LSL
  | LSR
  | ASL
  | ASR
  | COMMENT
  | NSEC
  | USEC
  | MSEC
  | SEC
  | HZ
  | KHZ
  | MHZ
  | GHZ

val main :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Cp_syntax.syntax
