type token =
    STRING of (Cp_syntax.file_pos*string)
  | CHAR of (Cp_syntax.file_pos*char)
  | PARAM of (Cp_syntax.file_pos*string)
  | TYPE_SPEC of (Cp_syntax.file_pos*string)
  | IDENT of (Cp_syntax.file_pos*string)
  | VALUE of (char*Cp_syntax.file_pos*string)
  | S_PARAMETER
  | S_MODULES
  | S_EXPORT
  | S_IMPORT
  | S_TYPES
  | S_DATA
  | S_CODE
  | S_TEMP
  | VAR
  | REG
  | SIG
  | OBJ
  | QUE
  | CHA
  | BLK
  | FUNC
  | CON
  | VAL
  | CELLS
  | ARR
  | MODULE
  | METHOD
  | TYPE
  | T_LOGIC
  | T_INT
  | T_CHAR
  | T_BOOL
  | T_NAT
  | EQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVI
  | AND
  | OR
  | XOR
  | NOT
  | LBRAK
  | RBRAK
  | LPAREN
  | RPAREN
  | LCURL
  | RCURL
  | SEP1
  | SEP2
  | COMMENT
  | TO
  | DOWNTO
  | IN
  | WITH
  | OF
  | ASS
  | DOT
  | PARENT
  | BEGIN
  | END
  | IMMED
  | ALU
  | TEMP
  | LABEL
  | MOVE
  | EXPR
  | FUN
  | BIND
  | JUMP
  | FALSEJUMP
  | NOP

let grammar = [|
     0,"$accept","%entry% $end";
     1,"main","section";
     2,"section","S_PARAMETER SEP1 BEGIN env_params END";
     3,"section","S_MODULES SEP1 BEGIN uc_objects END";
     4,"section","S_EXPORT SEP1 BEGIN uc_objects END";
     5,"section","S_IMPORT SEP1 BEGIN uc_objects END";
     6,"section","S_TYPES SEP1 BEGIN uc_objects END";
     7,"section","S_DATA SEP1 BEGIN uc_objects END";
     8,"section","S_TEMP SEP1 BEGIN uc_objects END";
     9,"section","S_CODE SEP1 BEGIN instructions END";
    10,"uc_objects","uc_object";
    11,"uc_objects","uc_object uc_objects";
    12,"env_params","env_param";
    13,"env_params","env_param env_params";
    14,"env_param","env_param_name EQ env_param_value";
    15,"env_param_name","VAR IDENT";
    16,"env_param_value","VALUE";
    17,"uc_object","REG name SEP1 data_type";
    18,"uc_object","REG name SEP1 data_type WITH params";
    19,"uc_object","SIG name SEP1 data_type";
    20,"uc_object","VAR name SEP1 data_type";
    21,"uc_object","VAR name SEP1 data_type IN name";
    22,"uc_object","VAR name SEP1 data_type IN name DOT LBRAK VALUE RBRAK";
    23,"uc_object","VAR name SEP1 data_type IN name WITH params";
    24,"uc_object","VAR name SEP1 data_type IN name DOT LBRAK VALUE RBRAK WITH params";
    25,"uc_object","OBJ name SEP1 data_type";
    26,"uc_object","OBJ name SEP1 data_type WITH params";
    27,"uc_object","QUE name SEP1 data_type";
    28,"uc_object","QUE name SEP1 data_type WITH params";
    29,"uc_object","CHA name SEP1 data_type";
    30,"uc_object","CHA name SEP1 data_type WITH params";
    31,"uc_object","FUNC name LPAREN data_type_list RPAREN";
    32,"uc_object","BLK name SEP1 data_type OF data_type";
    33,"uc_object","ARR name SEP1 data_type OF data_type";
    34,"uc_object","CON name SEP1 data_type ASS operand";
    35,"uc_object","VAL name SEP1 operand";
    36,"uc_object","MODULE name SEP1 data_type";
    37,"uc_object","TYPE name SEP1 LCURL symbol_list RCURL";
    38,"uc_object","TYPE name SEP1 LCURL struct_list RCURL";
    39,"uc_object","TYPE selector SEP1 LCURL method_list RCURL";
    40,"symbol_list","symbol_el";
    41,"symbol_list","symbol_el symbol_list";
    42,"struct_list","struct_el";
    43,"struct_list","struct_el struct_list";
    44,"method_list","method_el";
    45,"method_list","method_el method_list";
    46,"symbol_el","name";
    47,"struct_el","name SEP1 data_type";
    48,"method_el","METHOD name LPAREN data_type_list RPAREN";
    49,"method_el","METHOD name LPAREN RPAREN";
    50,"data_type_list","data_type";
    51,"data_type_list","data_type SEP2 data_type_list";
    52,"data_type","TYPE_SPEC";
    53,"data_type","TYPE_SPEC LBRAK VALUE RBRAK";
    54,"data_type","REG LBRAK diml RBRAK";
    55,"data_type","VAR LBRAK diml RBRAK";
    56,"data_type","SIG LBRAK diml RBRAK";
    57,"data_type","CELLS LBRAK VALUE RBRAK";
    58,"data_type","QUE LBRAK VALUE RBRAK";
    59,"data_type","CHA LBRAK VALUE RBRAK";
    60,"data_type","PARAM";
    61,"data_type","IDENT";
    62,"data_type","IDENT DOT IDENT";
    63,"data_type","data_type SEP1 PARAM";
    64,"diml","dim";
    65,"diml","dim SEP2 diml";
    66,"dim","VALUE";
    67,"params","param";
    68,"params","param AND params";
    69,"param","param_name EQ param_value";
    70,"param_name","PARAM";
    71,"param_name","VAR IDENT";
    72,"param_value","IDENT";
    73,"param_value","VALUE";
    74,"param_value","STRING";
    75,"param_value","CHAR";
    76,"param_value","TYPE_SPEC";
    77,"param_value","TYPE_SPEC LBRAK VALUE RBRAK";
    78,"param_value","data_type";
    79,"operand_list","operand";
    80,"operand_list","operand SEP2 operand_list";
    81,"operand","VALUE";
    82,"operand","VALUE SEP1 params";
    83,"operand","IDENT";
    84,"operand","IDENT SEP1 params";
    85,"operand","VAR IMMED DOT LBRAK VALUE RBRAK";
    86,"operand","VAR TEMP DOT LBRAK name RBRAK";
    87,"operand","VAR TEMP DOT LBRAK selector RBRAK";
    88,"operand","VAR IMMED DOT LBRAK VALUE RBRAK SEP1 params";
    89,"operand","VAR TEMP DOT LBRAK name RBRAK SEP1 params";
    90,"operand","VAR TEMP DOT LBRAK selector RBRAK SEP1 params";
    91,"operand","VAR ALU DOT LBRAK VALUE RBRAK";
    92,"operand","VAR ALU DOT LBRAK VALUE RBRAK SEP1 params";
    93,"operand","selector";
    94,"operand","selector SEP1 params";
    95,"range","VALUE TO VALUE";
    96,"range","VALUE DOWNTO VALUE";
    97,"value_list","range";
    98,"value_list","operand";
    99,"value_list","VALUE";
   100,"value_list","VALUE SEP2 value_list";
   101,"value_list","operand SEP2 value_list";
   102,"selector","selector_list";
   103,"selector_type","name";
   104,"selector_type","LBRAK value_list RBRAK";
   105,"selector_list","selector_type";
   106,"selector_list","selector_type DOT selector_list";
   107,"instructions","instruction";
   108,"instructions","instruction instructions";
   109,"instruction","NOP";
   110,"instruction","label SEP1";
   111,"instruction","BIND LPAREN VALUE RPAREN";
   112,"instruction","JUMP LPAREN label RPAREN";
   113,"instruction","FALSEJUMP LPAREN operand SEP2 label RPAREN";
   114,"instruction","MOVE LPAREN operand SEP2 operand RPAREN";
   115,"instruction","MOVE LPAREN operand SEP2 operand RPAREN WITH params";
   116,"instruction","EXPR LPAREN operand SEP2 operand SEP2 operation SEP2 operand RPAREN";
   117,"instruction","EXPR LPAREN operand SEP2 operand SEP2 operation SEP2 operand RPAREN WITH params";
   118,"instruction","FUN selector LPAREN operand_list RPAREN";
   119,"name","IDENT";
   120,"label","IDENT";
   121,"operation","PLUS";
   122,"operation","MINUS";
   123,"operation","TIMES";
   124,"operation","DIVI";
   125,"operation","AND";
   126,"operation","OR";
   127,"operation","XOR";
   128,"operation","NOT";
   129,"operation","EQ";
   130,"operation","NEQ";
   131,"operation","LT";
   132,"operation","GT";
   133,"operation","LEQ";
   134,"operation","GEQ";
   135,"%entry%","'\001' main";
|]
let print s = print_string s; print_newline ()
let print_grammar state =
  let glen = Array.length grammar in
  if state > 0 && state < glen then (
    let i,rname,rule = grammar.(state) in
    print (Printf.sprintf "%4d %s: %s" i rname rule)
    )
open Parsing
let parse_error s = 
  let print s = print_string s; print_newline () in
  if (Parsing.parser_trace ()) then (
  print "====== RULE STACK TRACE =======";
  let mutable r = pop_rule_stack () in
  while r <> (-1) do
    print_grammar r;
    r <- pop_rule_stack ();
  done;
  print "====== TOKEN STACK TRACE =======";
  let mutable t = pop_token_stack () in
  while t <> "" do
    print_string t; print_string " ";
    t <- pop_token_stack ();
  done;
  print_newline ()
  )
let yytransl_const = [|
  263 (* S_PARAMETER *);
  264 (* S_MODULES *);
  265 (* S_EXPORT *);
  266 (* S_IMPORT *);
  267 (* S_TYPES *);
  268 (* S_DATA *);
  269 (* S_CODE *);
  270 (* S_TEMP *);
  271 (* VAR *);
  272 (* REG *);
  273 (* SIG *);
  274 (* OBJ *);
  275 (* QUE *);
  276 (* CHA *);
  277 (* BLK *);
  278 (* FUNC *);
  279 (* CON *);
  280 (* VAL *);
  281 (* CELLS *);
  282 (* ARR *);
  283 (* MODULE *);
  284 (* METHOD *);
  285 (* TYPE *);
  286 (* T_LOGIC *);
  287 (* T_INT *);
  288 (* T_CHAR *);
  289 (* T_BOOL *);
  290 (* T_NAT *);
  291 (* EQ *);
  292 (* NEQ *);
  293 (* LT *);
  294 (* GT *);
  295 (* LEQ *);
  296 (* GEQ *);
  297 (* PLUS *);
  298 (* MINUS *);
  299 (* TIMES *);
  300 (* DIVI *);
  301 (* AND *);
  302 (* OR *);
  303 (* XOR *);
  304 (* NOT *);
  305 (* LBRAK *);
  306 (* RBRAK *);
  307 (* LPAREN *);
  308 (* RPAREN *);
  309 (* LCURL *);
  310 (* RCURL *);
  311 (* SEP1 *);
  312 (* SEP2 *);
  313 (* COMMENT *);
  314 (* TO *);
  315 (* DOWNTO *);
  316 (* IN *);
  317 (* WITH *);
  318 (* OF *);
  319 (* ASS *);
  320 (* DOT *);
  321 (* PARENT *);
  322 (* BEGIN *);
  323 (* END *);
  324 (* IMMED *);
  325 (* ALU *);
  326 (* TEMP *);
  327 (* LABEL *);
  328 (* MOVE *);
  329 (* EXPR *);
  330 (* FUN *);
  331 (* BIND *);
  332 (* JUMP *);
  333 (* FALSEJUMP *);
  334 (* NOP *);
    0|]

let yytransl_block = [|
  257 (* STRING *);
  258 (* CHAR *);
  259 (* PARAM *);
  260 (* TYPE_SPEC *);
  261 (* IDENT *);
  262 (* VALUE *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\004\000\004\000\003\000\003\000\007\000\008\000\009\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\015\000\
\015\000\016\000\016\000\018\000\018\000\019\000\020\000\021\000\
\021\000\013\000\013\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\022\000\
\022\000\023\000\012\000\012\000\024\000\025\000\025\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\027\000\027\000\
\014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\014\000\028\000\028\000\
\029\000\029\000\029\000\029\000\029\000\017\000\031\000\031\000\
\030\000\030\000\005\000\005\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\010\000\033\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000"

let yylen = "\002\000\
\001\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\001\000\002\000\001\000\002\000\003\000\002\000\001\000\
\004\000\006\000\004\000\004\000\006\000\010\000\008\000\012\000\
\004\000\006\000\004\000\006\000\004\000\006\000\005\000\006\000\
\006\000\006\000\004\000\004\000\006\000\006\000\006\000\001\000\
\002\000\001\000\002\000\001\000\002\000\001\000\003\000\005\000\
\004\000\001\000\003\000\001\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\001\000\001\000\003\000\003\000\001\000\
\003\000\001\000\001\000\003\000\003\000\001\000\002\000\001\000\
\001\000\001\000\001\000\001\000\004\000\001\000\001\000\003\000\
\001\000\003\000\001\000\003\000\006\000\006\000\006\000\008\000\
\008\000\008\000\006\000\008\000\001\000\003\000\003\000\003\000\
\001\000\001\000\001\000\003\000\003\000\001\000\001\000\003\000\
\001\000\003\000\001\000\002\000\001\000\002\000\004\000\004\000\
\006\000\006\000\008\000\010\000\012\000\005\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\135\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\120\000\000\000\000\000\000\000\000\000\
\000\000\000\000\109\000\000\000\000\000\000\000\000\000\015\000\
\002\000\013\000\000\000\119\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\102\000\000\000\003\000\011\000\004\000\
\005\000\006\000\007\000\000\000\000\000\103\000\000\000\000\000\
\000\000\000\000\009\000\108\000\110\000\008\000\016\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\097\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\104\000\000\000\000\000\
\106\000\000\000\000\000\000\000\000\000\111\000\112\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\070\000\000\000\084\000\000\000\000\000\
\082\000\100\000\095\000\096\000\000\000\000\000\000\000\101\000\
\094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\118\000\000\000\000\000\062\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\018\000\026\000\028\000\030\000\000\000\051\000\
\034\000\000\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\038\000\046\000\041\000\000\000\043\000\000\000\
\039\000\045\000\000\000\000\000\080\000\113\000\053\000\055\000\
\000\000\054\000\056\000\058\000\059\000\057\000\000\000\000\000\
\068\000\074\000\075\000\000\000\000\000\073\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000\
\130\000\131\000\132\000\133\000\134\000\121\000\122\000\123\000\
\124\000\125\000\126\000\127\000\128\000\000\000\065\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\049\000\000\000\
\115\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\053\000\088\000\092\000\089\000\090\000\
\000\000\000\000\000\000\024\000\117\000"

let yydgoto = "\002\000\
\011\000\012\000\030\000\046\000\060\000\047\000\031\000\032\000\
\104\000\094\000\150\000\198\000\151\000\120\000\211\000\212\000\
\121\000\216\000\213\000\214\000\217\000\226\000\227\000\199\000\
\200\000\024\001\173\000\122\000\123\000\084\000\085\000\061\000\
\062\000\046\001"

let yysindex = "\004\000\
\002\000\000\000\028\255\029\255\037\255\057\255\058\255\059\255\
\067\255\085\255\000\000\000\000\061\255\064\255\087\255\090\255\
\105\255\106\255\107\255\108\255\137\255\078\000\078\000\078\000\
\078\000\078\000\092\255\078\000\153\255\109\255\137\255\140\255\
\172\255\172\255\172\255\172\255\172\255\172\255\172\255\172\255\
\172\255\172\255\172\255\172\255\024\255\111\255\078\000\113\255\
\114\255\115\255\125\255\000\000\142\255\143\255\024\255\144\255\
\145\255\148\255\000\000\133\255\092\255\156\255\147\255\000\000\
\000\000\000\000\210\255\000\000\162\255\163\255\165\255\170\255\
\171\255\173\255\174\255\168\255\175\255\177\255\179\255\180\255\
\022\255\182\255\184\255\000\000\157\255\000\000\000\000\000\000\
\000\000\000\000\000\000\075\255\075\255\000\000\176\255\234\255\
\251\255\075\255\000\000\000\000\000\000\000\000\000\000\000\000\
\015\001\015\001\015\001\015\001\015\001\015\001\015\001\015\001\
\015\001\075\255\015\001\015\001\219\255\104\255\221\254\220\255\
\222\255\000\000\229\255\245\255\254\255\024\255\226\255\252\255\
\253\255\075\255\230\255\003\000\001\000\000\000\005\000\248\255\
\009\000\011\000\013\000\016\000\018\000\019\000\027\255\030\255\
\008\000\039\255\080\255\082\255\224\254\252\254\017\000\013\255\
\000\000\247\254\008\000\086\255\086\255\022\255\097\000\100\000\
\020\000\045\000\049\000\022\255\086\255\000\000\172\255\087\000\
\000\000\075\255\075\255\064\000\069\000\000\000\000\000\251\255\
\116\000\129\000\131\000\131\000\131\000\133\000\134\000\135\000\
\149\000\172\255\086\255\086\255\086\255\086\255\015\001\015\001\
\000\000\075\255\015\001\000\000\150\000\000\000\112\000\123\000\
\000\000\000\000\000\000\000\000\110\000\111\000\113\000\000\000\
\000\000\118\000\114\000\120\000\172\255\172\255\172\255\121\000\
\087\000\115\000\124\000\075\255\000\000\145\000\160\000\000\000\
\000\000\163\000\125\000\165\000\166\000\167\000\168\000\170\000\
\000\000\062\255\000\000\000\000\000\000\000\000\008\000\000\000\
\000\000\008\000\000\000\086\255\071\002\193\000\216\000\024\255\
\015\001\000\000\000\000\000\000\000\000\118\000\000\000\172\000\
\000\000\000\000\105\000\082\002\000\000\000\000\000\000\000\000\
\131\000\000\000\000\000\000\000\000\000\000\000\086\255\175\000\
\000\000\000\000\000\000\177\000\248\255\000\000\008\000\000\000\
\178\000\179\000\180\000\181\000\008\000\064\002\086\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\171\000\000\000\000\000\
\226\000\228\000\183\000\184\000\200\000\202\000\000\000\188\000\
\000\000\075\255\218\000\221\000\086\255\086\255\086\255\086\255\
\000\000\229\000\212\000\000\000\000\000\000\000\000\000\000\000\
\217\000\086\255\086\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\213\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\215\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\222\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\220\000\000\000\000\000\127\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\169\000\235\000\000\000\242\000\
\185\000\000\000\000\000\000\000\000\000\000\000\087\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\109\000\
\000\000\000\000\000\000\000\000\000\000\000\000\102\001\129\001\
\144\001\159\001\183\001\198\001\000\000\245\000\000\000\000\000\
\000\000\000\000\213\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\255\000\000\000\000\003\001\005\001\000\000\000\000\
\016\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\001\000\000\000\000\000\000\000\000\000\000\
\000\000\237\001\000\000\000\000\000\000\000\000\252\001\000\000\
\000\000\011\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\031\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\186\255\228\255\000\000\014\000\000\000\
\000\000\000\000\220\000\000\000\021\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\227\000\243\000\029\001\045\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\002\000\000\000\000\000\000\000\000\000\000\
\072\255\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\044\002\108\000\015\002\000\000\000\000\000\000\
\000\000\231\255\190\255\123\255\066\255\164\255\120\001\122\001\
\232\255\117\001\000\000\000\000\000\000\079\255\000\000\000\000\
\000\000\000\000\118\001\000\000\249\255\214\001\000\000\000\000\
\166\255\000\000"

let yytablesize = 898
let yytable = "\128\000\
\129\000\240\000\228\000\229\000\001\000\133\000\132\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\082\000\083\000\153\000\185\000\201\000\
\046\000\047\000\117\000\118\000\068\000\191\000\095\000\209\000\
\161\000\162\000\163\000\114\000\119\000\172\000\143\000\144\000\
\145\000\146\000\147\000\148\000\149\000\185\000\152\000\067\000\
\154\000\155\000\185\000\192\000\195\000\235\000\236\000\237\000\
\238\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\185\000\067\000\067\000\081\000\067\000\
\081\000\046\000\047\000\194\000\116\000\218\000\219\000\117\000\
\127\000\185\000\013\000\014\000\185\000\222\000\186\000\047\001\
\196\000\119\000\187\000\015\000\067\000\185\000\067\000\056\001\
\052\000\114\000\067\000\188\000\197\000\241\000\114\000\114\000\
\114\000\114\000\114\000\114\000\114\000\067\000\017\001\016\000\
\017\000\018\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\019\000\015\001\081\000\239\000\016\001\021\000\172\000\
\242\000\022\000\048\000\049\000\050\000\051\000\185\000\063\000\
\185\000\048\001\116\000\020\000\189\000\210\000\190\000\116\000\
\116\000\116\000\116\000\116\000\116\000\116\000\202\000\029\000\
\023\000\057\001\087\000\024\000\208\000\064\000\157\000\158\000\
\234\000\159\000\160\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\025\000\026\000\027\000\028\000\067\000\065\000\
\068\000\086\000\023\001\088\000\089\000\090\000\029\001\069\001\
\070\001\071\001\072\001\252\000\254\000\000\001\052\000\091\000\
\092\000\093\000\096\000\097\000\076\001\077\001\098\000\099\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\101\000\052\000\052\000\102\000\052\000\103\000\
\105\000\106\000\112\000\107\000\126\000\066\001\027\001\028\001\
\108\000\109\000\130\000\110\000\111\000\113\000\052\000\114\000\
\061\000\115\000\116\000\052\000\124\000\052\000\125\000\131\000\
\052\000\052\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\052\000\061\000\061\000\052\000\
\061\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\003\000\004\000\005\000\006\000\007\000\008\000\009\000\010\000\
\061\000\156\000\078\000\164\000\165\000\061\000\166\000\061\000\
\157\000\174\000\061\000\061\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\061\000\078\000\
\078\000\167\000\078\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\168\000\170\000\171\000\177\000\175\000\178\000\
\176\000\179\000\078\000\180\000\052\000\181\000\185\000\078\000\
\182\000\078\000\183\000\184\000\193\000\078\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\078\000\052\000\052\000\205\000\052\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\203\000\043\000\
\044\000\204\000\045\000\052\000\206\000\052\000\052\000\052\000\
\207\000\061\000\215\000\052\000\052\000\052\000\052\000\220\000\
\221\000\223\000\052\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\224\000\061\000\061\000\
\225\000\061\000\230\000\231\000\232\000\105\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\233\000\
\105\000\105\000\243\000\105\000\244\000\245\000\246\000\247\000\
\061\000\248\000\061\000\061\000\061\000\031\001\003\001\250\000\
\061\000\061\000\061\000\061\000\249\000\251\000\001\001\061\000\
\105\000\105\000\105\000\004\001\009\001\105\000\105\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
\083\000\105\000\083\000\083\000\006\001\083\000\025\001\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\007\001\093\000\093\000\008\001\093\000\010\001\011\001\
\012\001\013\001\083\000\014\001\083\000\026\001\030\001\049\001\
\083\000\050\001\058\001\051\001\052\001\053\001\054\001\059\001\
\119\000\060\001\093\000\083\000\093\000\061\001\062\001\065\001\
\093\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
\085\000\085\000\085\000\093\000\085\000\085\000\063\001\085\000\
\064\001\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\091\000\091\000\091\000\067\001\091\000\091\000\068\001\091\000\
\074\001\134\000\135\000\136\000\085\000\075\001\085\000\012\000\
\073\001\010\000\085\000\103\000\081\000\137\000\138\000\139\000\
\107\000\140\000\141\000\098\000\091\000\085\000\091\000\142\000\
\050\000\079\000\091\000\086\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\091\000\086\000\086\000\
\040\000\086\000\042\000\087\000\087\000\087\000\087\000\087\000\
\087\000\087\000\087\000\087\000\087\000\044\000\087\000\087\000\
\064\000\087\000\066\000\100\000\253\000\002\001\086\000\255\000\
\086\000\005\001\000\000\169\000\086\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\086\000\
\087\000\000\000\000\000\000\000\087\000\081\000\081\000\081\000\
\081\000\081\000\081\000\081\000\081\000\081\000\081\000\087\000\
\081\000\081\000\000\000\081\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\
\020\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\081\000\000\000\000\000\000\000\081\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\081\000\017\000\017\000\000\000\017\000\019\000\019\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\020\000\019\000\019\000\000\000\019\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\000\000\
\025\000\025\000\000\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\000\000\
\027\000\027\000\019\000\027\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\000\000\029\000\
\029\000\025\000\029\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\000\000\036\000\036\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\021\000\
\029\000\021\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\036\000\
\032\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\000\000\033\000\033\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\000\000\022\000\022\000\032\000\022\000\
\000\000\000\000\134\000\135\000\136\000\000\000\000\000\018\001\
\019\001\134\000\020\001\021\001\022\001\033\000\137\000\138\000\
\139\000\000\000\140\000\141\000\000\000\137\000\138\000\139\000\
\142\000\140\000\141\000\000\000\000\000\000\000\000\000\142\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001"

let yycheck = "\092\000\
\093\000\192\000\180\000\181\000\001\000\098\000\097\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\045\000\114\000\055\001\157\000\
\005\001\005\001\005\001\006\001\005\001\062\001\055\000\165\000\
\068\001\069\001\070\001\005\001\015\001\130\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\055\001\113\000\005\001\
\115\000\116\000\055\001\056\001\062\001\187\000\188\000\189\000\
\190\000\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\055\001\026\001\027\001\049\001\029\001\
\049\001\054\001\054\001\063\001\005\001\170\000\171\000\005\001\
\006\001\055\001\055\001\055\001\055\001\176\000\060\001\009\001\
\003\001\015\001\061\001\055\001\050\001\055\001\052\001\030\001\
\005\001\067\001\056\001\061\001\015\001\194\000\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\067\001\244\000\055\001\
\055\001\055\001\072\001\073\001\074\001\075\001\076\001\077\001\
\078\001\055\001\061\001\049\001\191\000\064\001\066\001\220\000\
\195\000\066\001\023\000\024\000\025\000\026\000\055\001\028\000\
\055\001\015\001\067\001\055\001\061\001\167\000\061\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\158\000\015\001\
\066\001\031\001\047\000\066\001\164\000\005\001\055\001\056\001\
\186\000\058\001\059\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\066\001\066\001\066\001\066\001\035\001\067\001\
\005\001\067\001\245\000\067\001\067\001\067\001\249\000\061\001\
\062\001\063\001\064\001\213\000\214\000\215\000\005\001\067\001\
\051\001\051\001\051\001\051\001\074\001\075\001\051\001\067\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\055\001\026\001\027\001\067\001\029\001\006\001\
\055\001\055\001\051\001\055\001\064\001\058\001\248\000\248\000\
\055\001\055\001\051\001\055\001\055\001\055\001\045\001\055\001\
\005\001\055\001\055\001\050\001\055\001\052\001\055\001\006\001\
\055\001\056\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\067\001\026\001\027\001\005\001\
\029\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\045\001\055\001\005\001\056\001\055\001\050\001\050\001\052\001\
\055\001\052\001\055\001\056\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\067\001\026\001\
\027\001\053\001\029\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\053\001\056\001\056\001\049\001\052\001\064\001\
\056\001\049\001\045\001\049\001\005\001\049\001\055\001\050\001\
\049\001\052\001\049\001\049\001\052\001\056\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\067\001\026\001\027\001\064\001\029\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\006\001\026\001\
\027\001\006\001\029\001\052\001\064\001\054\001\055\001\056\001\
\064\001\005\001\028\001\060\001\061\001\062\001\063\001\056\001\
\052\001\006\001\067\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\005\001\026\001\027\001\
\006\001\029\001\006\001\006\001\006\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\003\001\
\026\001\027\001\005\001\029\001\045\001\035\001\049\001\049\001\
\052\001\049\001\054\001\055\001\056\001\061\001\052\001\054\001\
\060\001\061\001\062\001\063\001\055\001\054\001\054\001\067\001\
\050\001\051\001\052\001\056\001\056\001\055\001\056\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\067\001\026\001\027\001\052\001\029\001\006\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\050\001\026\001\027\001\050\001\029\001\050\001\050\001\
\050\001\050\001\050\001\050\001\052\001\006\001\051\001\049\001\
\056\001\049\001\056\001\050\001\050\001\050\001\050\001\006\001\
\064\001\006\001\050\001\067\001\052\001\055\001\055\001\052\001\
\056\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\067\001\026\001\027\001\055\001\029\001\
\055\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\050\001\026\001\027\001\050\001\029\001\
\061\001\003\001\004\001\005\001\050\001\061\001\052\001\067\001\
\052\001\067\001\056\001\064\001\050\001\015\001\016\001\017\001\
\067\001\019\001\020\001\050\001\050\001\067\001\052\001\025\001\
\052\001\052\001\056\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\067\001\026\001\027\001\
\054\001\029\001\054\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\054\001\026\001\027\001\
\050\001\029\001\031\000\061\000\213\000\217\000\050\001\214\000\
\052\001\220\000\255\255\126\000\056\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\050\001\067\001\
\052\001\255\255\255\255\255\255\056\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\067\001\
\026\001\027\001\255\255\029\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\255\255\029\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\255\255\255\255\255\255\056\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\067\001\026\001\027\001\255\255\029\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\067\001\026\001\027\001\255\255\029\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\027\001\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\067\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\026\001\027\001\067\001\029\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\067\001\029\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\067\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001\
\067\001\029\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\026\001\027\001\067\001\
\029\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\067\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\255\255\026\001\027\001\067\001\029\001\
\255\255\255\255\003\001\004\001\005\001\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\067\001\015\001\016\001\
\017\001\255\255\019\001\020\001\255\255\015\001\016\001\017\001\
\025\001\019\001\020\001\255\255\255\255\255\255\255\255\025\001\
\255\255\255\255\255\255\255\255\255\255\067\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001"

let yynames_const = "\
  S_PARAMETER\000\
  S_MODULES\000\
  S_EXPORT\000\
  S_IMPORT\000\
  S_TYPES\000\
  S_DATA\000\
  S_CODE\000\
  S_TEMP\000\
  VAR\000\
  REG\000\
  SIG\000\
  OBJ\000\
  QUE\000\
  CHA\000\
  BLK\000\
  FUNC\000\
  CON\000\
  VAL\000\
  CELLS\000\
  ARR\000\
  MODULE\000\
  METHOD\000\
  TYPE\000\
  T_LOGIC\000\
  T_INT\000\
  T_CHAR\000\
  T_BOOL\000\
  T_NAT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVI\000\
  AND\000\
  OR\000\
  XOR\000\
  NOT\000\
  LBRAK\000\
  RBRAK\000\
  LPAREN\000\
  RPAREN\000\
  LCURL\000\
  RCURL\000\
  SEP1\000\
  SEP2\000\
  COMMENT\000\
  TO\000\
  DOWNTO\000\
  IN\000\
  WITH\000\
  OF\000\
  ASS\000\
  DOT\000\
  PARENT\000\
  BEGIN\000\
  END\000\
  IMMED\000\
  ALU\000\
  TEMP\000\
  LABEL\000\
  MOVE\000\
  EXPR\000\
  FUN\000\
  BIND\000\
  JUMP\000\
  FALSEJUMP\000\
  NOP\000\
  "

let yynames_block = "\
  STRING\000\
  CHAR\000\
  PARAM\000\
  TYPE_SPEC\000\
  IDENT\000\
  VALUE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'section) in
    Obj.repr((
# 55 "../../src/ml/cp_parser_uci.mly"
                _1 ) : Cp_syntax.uci_syntax))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'env_params) in
    Obj.repr((
# 59 "../../src/ml/cp_parser_uci.mly"
                                              Cp_syntax.UT_s_parameter _4 ) : 'section))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'uc_objects) in
    Obj.repr((
# 60 "../../src/ml/cp_parser_uci.mly"
                                            Cp_syntax.UT_s_modules _4 ) : 'section))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'uc_objects) in
    Obj.repr((
# 61 "../../src/ml/cp_parser_uci.mly"
                                           Cp_syntax.UT_s_export _4 ) : 'section))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'uc_objects) in
    Obj.repr((
# 62 "../../src/ml/cp_parser_uci.mly"
                                           Cp_syntax.UT_s_import _4 ) : 'section))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'uc_objects) in
    Obj.repr((
# 63 "../../src/ml/cp_parser_uci.mly"
                                          Cp_syntax.UT_s_types _4 ) : 'section))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'uc_objects) in
    Obj.repr((
# 64 "../../src/ml/cp_parser_uci.mly"
                                         Cp_syntax.UT_s_data _4 ) : 'section))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'uc_objects) in
    Obj.repr((
# 65 "../../src/ml/cp_parser_uci.mly"
                                         Cp_syntax.UT_s_temp _4 ) : 'section))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 66 "../../src/ml/cp_parser_uci.mly"
                                           Cp_syntax.UT_s_code _4 ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'uc_object) in
    Obj.repr((
# 70 "../../src/ml/cp_parser_uci.mly"
                [_1] ) : 'uc_objects))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'uc_object) in
    let _2 = (peek_val parser_env 0 : 'uc_objects) in
    Obj.repr((
# 71 "../../src/ml/cp_parser_uci.mly"
                           _1 :: _2 ) : 'uc_objects))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'env_param) in
    Obj.repr((
# 75 "../../src/ml/cp_parser_uci.mly"
                 [_1] ) : 'env_params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'env_param) in
    let _2 = (peek_val parser_env 0 : 'env_params) in
    Obj.repr((
# 76 "../../src/ml/cp_parser_uci.mly"
                           _1 :: _2 ) : 'env_params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'env_param_name) in
    let _3 = (peek_val parser_env 0 : 'env_param_value) in
    Obj.repr((
# 80 "../../src/ml/cp_parser_uci.mly"
                                        Cp_syntax.UT_param_def (_1,_3) ) : 'env_param))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 84 "../../src/ml/cp_parser_uci.mly"
                Cp_syntax.UT_ident _2 ) : 'env_param_name))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 88 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_value _1 ) : 'env_param_value))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 93 "../../src/ml/cp_parser_uci.mly"
                              Cp_syntax.UT_obj ('r',_2,_4,[],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 94 "../../src/ml/cp_parser_uci.mly"
                                          Cp_syntax.UT_obj ('r',_2,_4,_6,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 95 "../../src/ml/cp_parser_uci.mly"
                              Cp_syntax.UT_obj ('s',_2,_4,[],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 96 "../../src/ml/cp_parser_uci.mly"
                              Cp_syntax.UT_obj ('v',_2,_4,[],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 97 "../../src/ml/cp_parser_uci.mly"
                                      Cp_syntax.UT_obj ('v',_2,_4,[_6],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 8 : 'name) in
    let _4 = (peek_val parser_env 6 : 'data_type) in
    let _6 = (peek_val parser_env 4 : 'name) in
    let _9 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 98 "../../src/ml/cp_parser_uci.mly"
                                                            Cp_syntax.UT_obj ('v',_2,_4,[_6],Cp_syntax.UT_value _9) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 6 : 'name) in
    let _4 = (peek_val parser_env 4 : 'data_type) in
    let _6 = (peek_val parser_env 2 : 'name) in
    let _8 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 99 "../../src/ml/cp_parser_uci.mly"
                                                  Cp_syntax.UT_obj ('v',_2,_4,[_6]@_8,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 10 : 'name) in
    let _4 = (peek_val parser_env 8 : 'data_type) in
    let _6 = (peek_val parser_env 6 : 'name) in
    let _9 = (peek_val parser_env 3 : char*Cp_syntax.file_pos*string) in
    let _12 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 100 "../../src/ml/cp_parser_uci.mly"
                                                                         Cp_syntax.UT_obj ('v',_2,_4,[_6]@_12,Cp_syntax.UT_value _9) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 101 "../../src/ml/cp_parser_uci.mly"
                              Cp_syntax.UT_obj ('o',_2,_4,[],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 102 "../../src/ml/cp_parser_uci.mly"
                                          Cp_syntax.UT_obj ('o',_2,_4,_6,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 103 "../../src/ml/cp_parser_uci.mly"
                              Cp_syntax.UT_obj ('q',_2,_4,[],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 104 "../../src/ml/cp_parser_uci.mly"
                                          Cp_syntax.UT_obj ('q',_2,_4,_6,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 105 "../../src/ml/cp_parser_uci.mly"
                              Cp_syntax.UT_obj ('c',_2,_4,[],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 106 "../../src/ml/cp_parser_uci.mly"
                                          Cp_syntax.UT_obj ('c',_2,_4,_6,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'name) in
    let _4 = (peek_val parser_env 1 : 'data_type_list) in
    Obj.repr((
# 107 "../../src/ml/cp_parser_uci.mly"
                                             Cp_syntax.UT_fundef (_2,_4) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 108 "../../src/ml/cp_parser_uci.mly"
                                           Cp_syntax.UT_obj ('b',_2,_4,[_6],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 109 "../../src/ml/cp_parser_uci.mly"
                                           Cp_syntax.UT_obj ('b',_2,_4,[_6],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'data_type) in
    let _6 = (peek_val parser_env 0 : 'operand) in
    Obj.repr((
# 110 "../../src/ml/cp_parser_uci.mly"
                                          Cp_syntax.UT_obj ('1',_2,_4,[],_6) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'operand) in
    Obj.repr((
# 111 "../../src/ml/cp_parser_uci.mly"
                            Cp_syntax.UT_obj ('2',_2,Cp_syntax.UT_empty,[],_4) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 112 "../../src/ml/cp_parser_uci.mly"
                                 Cp_syntax.UT_obj ('M',_2,_4,[],Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _5 = (peek_val parser_env 1 : 'symbol_list) in
    Obj.repr((
# 113 "../../src/ml/cp_parser_uci.mly"
                                             Cp_syntax.UT_obj ('Y',_2,Cp_syntax.UT_empty,_5,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _5 = (peek_val parser_env 1 : 'struct_list) in
    Obj.repr((
# 114 "../../src/ml/cp_parser_uci.mly"
                                             Cp_syntax.UT_obj ('S',_2,Cp_syntax.UT_empty,_5,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'selector) in
    let _5 = (peek_val parser_env 1 : 'method_list) in
    Obj.repr((
# 115 "../../src/ml/cp_parser_uci.mly"
                                                 Cp_syntax.UT_obj ('M',_2,Cp_syntax.UT_empty,_5,Cp_syntax.UT_empty) ) : 'uc_object))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'symbol_el) in
    Obj.repr((
# 119 "../../src/ml/cp_parser_uci.mly"
                [_1] ) : 'symbol_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'symbol_el) in
    let _2 = (peek_val parser_env 0 : 'symbol_list) in
    Obj.repr((
# 120 "../../src/ml/cp_parser_uci.mly"
                            _1 :: _2 ) : 'symbol_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'struct_el) in
    Obj.repr((
# 124 "../../src/ml/cp_parser_uci.mly"
                [_1] ) : 'struct_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'struct_el) in
    let _2 = (peek_val parser_env 0 : 'struct_list) in
    Obj.repr((
# 125 "../../src/ml/cp_parser_uci.mly"
                            _1 :: _2 ) : 'struct_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'method_el) in
    Obj.repr((
# 129 "../../src/ml/cp_parser_uci.mly"
                [_1] ) : 'method_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'method_el) in
    let _2 = (peek_val parser_env 0 : 'method_list) in
    Obj.repr((
# 130 "../../src/ml/cp_parser_uci.mly"
                            _1 :: _2 ) : 'method_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 134 "../../src/ml/cp_parser_uci.mly"
           Cp_syntax.UT_obj ('E',_1,Cp_syntax.UT_empty,[],Cp_syntax.UT_empty) ) : 'symbol_el))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    let _3 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 138 "../../src/ml/cp_parser_uci.mly"
                          Cp_syntax.UT_obj ('E',_1,_3,[],Cp_syntax.UT_empty) ) : 'struct_el))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'name) in
    let _4 = (peek_val parser_env 1 : 'data_type_list) in
    Obj.repr((
# 142 "../../src/ml/cp_parser_uci.mly"
                                               Cp_syntax.UT_obj ('E',_2,Cp_syntax.UT_empty,_4,Cp_syntax.UT_empty) ) : 'method_el))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    Obj.repr((
# 143 "../../src/ml/cp_parser_uci.mly"
                                 Cp_syntax.UT_obj ('E',_2,Cp_syntax.UT_empty,[],Cp_syntax.UT_empty) ) : 'method_el))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 147 "../../src/ml/cp_parser_uci.mly"
                [_1] ) : 'data_type_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'data_type) in
    let _3 = (peek_val parser_env 0 : 'data_type_list) in
    Obj.repr((
# 148 "../../src/ml/cp_parser_uci.mly"
                                    _1 :: _3 ) : 'data_type_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 152 "../../src/ml/cp_parser_uci.mly"
                Cp_syntax.UT_type (Cp_syntax.char_of_type _1,Cp_syntax.UT_empty) ) : 'data_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 153 "../../src/ml/cp_parser_uci.mly"
                                  Cp_syntax.UT_type (Cp_syntax.char_of_type _1,Cp_syntax.UT_value _3) ) : 'data_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'diml) in
    Obj.repr((
# 154 "../../src/ml/cp_parser_uci.mly"
                           Cp_syntax.UT_type ('R',Cp_syntax.UT_list _3) ) : 'data_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'diml) in
    Obj.repr((
# 155 "../../src/ml/cp_parser_uci.mly"
                           Cp_syntax.UT_type ('V',Cp_syntax.UT_list _3) ) : 'data_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'diml) in
    Obj.repr((
# 156 "../../src/ml/cp_parser_uci.mly"
                           Cp_syntax.UT_type ('S',Cp_syntax.UT_list _3) ) : 'data_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 157 "../../src/ml/cp_parser_uci.mly"
                              Cp_syntax.UT_type ('C',Cp_syntax.UT_value _3) ) : 'data_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 158 "../../src/ml/cp_parser_uci.mly"
                            Cp_syntax.UT_type ('Q',Cp_syntax.UT_value _3) ) : 'data_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 159 "../../src/ml/cp_parser_uci.mly"
                            Cp_syntax.UT_type ('C',Cp_syntax.UT_value _3) ) : 'data_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 160 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_type ('P',Cp_syntax.UT_param _1) ) : 'data_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 161 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_type ('O',Cp_syntax.UT_ident _1) ) : 'data_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 162 "../../src/ml/cp_parser_uci.mly"
                      Cp_syntax.UT_type ('O',Cp_syntax.UT_list [Cp_syntax.UT_ident _1;Cp_syntax.UT_ident _3]) ) : 'data_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'data_type) in
    let _3 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 163 "../../src/ml/cp_parser_uci.mly"
                           Cp_syntax.UT_param_def (_1,Cp_syntax.UT_param _3) ) : 'data_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'dim) in
    Obj.repr((
# 167 "../../src/ml/cp_parser_uci.mly"
          [_1] ) : 'diml))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'dim) in
    let _3 = (peek_val parser_env 0 : 'diml) in
    Obj.repr((
# 168 "../../src/ml/cp_parser_uci.mly"
                    _1 :: _3 ) : 'diml))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 172 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_value _1 ) : 'dim))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'param) in
    Obj.repr((
# 176 "../../src/ml/cp_parser_uci.mly"
            [_1] ) : 'params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'param) in
    let _3 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 177 "../../src/ml/cp_parser_uci.mly"
                       _1 :: _3 ) : 'params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'param_name) in
    let _3 = (peek_val parser_env 0 : 'param_value) in
    Obj.repr((
# 180 "../../src/ml/cp_parser_uci.mly"
                                Cp_syntax.UT_param_def (_1,_3) ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 183 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_param _1 ) : 'param_name))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 184 "../../src/ml/cp_parser_uci.mly"
                Cp_syntax.UT_param _2 ) : 'param_name))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 188 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_ident _1 ) : 'param_value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 189 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_value _1 ) : 'param_value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 190 "../../src/ml/cp_parser_uci.mly"
             Cp_syntax.UT_string _1 ) : 'param_value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*char) in
    Obj.repr((
# 191 "../../src/ml/cp_parser_uci.mly"
           Cp_syntax.UT_char _1 ) : 'param_value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 192 "../../src/ml/cp_parser_uci.mly"
                Cp_syntax.UT_type (Cp_syntax.char_of_type _1,Cp_syntax.UT_empty) ) : 'param_value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 193 "../../src/ml/cp_parser_uci.mly"
                                  Cp_syntax.UT_type (Cp_syntax.char_of_type _1,Cp_syntax.UT_value _3) ) : 'param_value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'data_type) in
    Obj.repr((
# 194 "../../src/ml/cp_parser_uci.mly"
                _1 ) : 'param_value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'operand) in
    Obj.repr((
# 198 "../../src/ml/cp_parser_uci.mly"
              [_1] ) : 'operand_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'operand) in
    let _3 = (peek_val parser_env 0 : 'operand_list) in
    Obj.repr((
# 199 "../../src/ml/cp_parser_uci.mly"
                                _1 :: _3 ) : 'operand_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 203 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_op (Cp_syntax.UT_value _1,[]) ) : 'operand))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : char*Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 204 "../../src/ml/cp_parser_uci.mly"
                        Cp_syntax.UT_op (Cp_syntax.UT_value _1,_3) ) : 'operand))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 205 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_op (Cp_syntax.UT_ident _1,[]) ) : 'operand))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 206 "../../src/ml/cp_parser_uci.mly"
                        Cp_syntax.UT_op (Cp_syntax.UT_ident _1,_3) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 207 "../../src/ml/cp_parser_uci.mly"
                                      Cp_syntax.UT_immed (Cp_syntax.UT_value _5,[]) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 1 : 'name) in
    Obj.repr((
# 208 "../../src/ml/cp_parser_uci.mly"
                                    Cp_syntax.UT_temp (_5,[]) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 1 : 'selector) in
    Obj.repr((
# 209 "../../src/ml/cp_parser_uci.mly"
                                        Cp_syntax.UT_temp (_5,[]) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 3 : char*Cp_syntax.file_pos*string) in
    let _8 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 210 "../../src/ml/cp_parser_uci.mly"
                                                  Cp_syntax.UT_immed (Cp_syntax.UT_value _5,_8) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 3 : 'name) in
    let _8 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 211 "../../src/ml/cp_parser_uci.mly"
                                                Cp_syntax.UT_temp (_5,_8) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 3 : 'selector) in
    let _8 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 212 "../../src/ml/cp_parser_uci.mly"
                                                    Cp_syntax.UT_temp (_5,_8) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 213 "../../src/ml/cp_parser_uci.mly"
                                    Cp_syntax.UT_alu (Cp_syntax.UT_value _5,[]) ) : 'operand))
; (fun parser_env ->
    let _5 = (peek_val parser_env 3 : char*Cp_syntax.file_pos*string) in
    let _8 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 214 "../../src/ml/cp_parser_uci.mly"
                                                Cp_syntax.UT_alu (Cp_syntax.UT_value _5,_8) ) : 'operand))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'selector) in
    Obj.repr((
# 215 "../../src/ml/cp_parser_uci.mly"
               Cp_syntax.UT_op (_1,[]) ) : 'operand))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'selector) in
    let _3 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 216 "../../src/ml/cp_parser_uci.mly"
                           Cp_syntax.UT_op (_1,_3) ) : 'operand))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : char*Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 220 "../../src/ml/cp_parser_uci.mly"
                     Cp_syntax.UT_range ('+',Cp_syntax.UT_value _1,Cp_syntax.UT_value _3) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : char*Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 221 "../../src/ml/cp_parser_uci.mly"
                         Cp_syntax.UT_range ('-',Cp_syntax.UT_value _1,Cp_syntax.UT_value _3) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'range) in
    Obj.repr((
# 224 "../../src/ml/cp_parser_uci.mly"
            [_1] ) : 'value_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'operand) in
    Obj.repr((
# 225 "../../src/ml/cp_parser_uci.mly"
              [_1] ) : 'value_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 226 "../../src/ml/cp_parser_uci.mly"
            [Cp_syntax.UT_value _1] ) : 'value_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : char*Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : 'value_list) in
    Obj.repr((
# 227 "../../src/ml/cp_parser_uci.mly"
                            (Cp_syntax.UT_value _1) :: _3 ) : 'value_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'operand) in
    let _3 = (peek_val parser_env 0 : 'value_list) in
    Obj.repr((
# 228 "../../src/ml/cp_parser_uci.mly"
                              _1 :: _3 ) : 'value_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'selector_list) in
    Obj.repr((
# 232 "../../src/ml/cp_parser_uci.mly"
                  Cp_syntax.UT_selector _1 ) : 'selector))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 236 "../../src/ml/cp_parser_uci.mly"
           _1 ) : 'selector_type))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'value_list) in
    Obj.repr((
# 237 "../../src/ml/cp_parser_uci.mly"
                             Cp_syntax.UT_list _2 ) : 'selector_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'selector_type) in
    Obj.repr((
# 241 "../../src/ml/cp_parser_uci.mly"
                    [_1] ) : 'selector_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'selector_type) in
    let _3 = (peek_val parser_env 0 : 'selector_list) in
    Obj.repr((
# 242 "../../src/ml/cp_parser_uci.mly"
                                      _1 :: _3 ) : 'selector_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'instruction) in
    Obj.repr((
# 247 "../../src/ml/cp_parser_uci.mly"
                   [_1] ) : 'instructions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'instruction) in
    let _2 = (peek_val parser_env 0 : 'instructions) in
    Obj.repr((
# 248 "../../src/ml/cp_parser_uci.mly"
                               _1 :: _2 ) : 'instructions))
; (fun parser_env ->
    Obj.repr((
# 252 "../../src/ml/cp_parser_uci.mly"
          Cp_syntax.UT_nop ) : 'instruction))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'label) in
    Obj.repr((
# 253 "../../src/ml/cp_parser_uci.mly"
                 Cp_syntax.UT_label _1 ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 254 "../../src/ml/cp_parser_uci.mly"
                                Cp_syntax.UT_bind (Cp_syntax.UT_value _3) ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'label) in
    Obj.repr((
# 255 "../../src/ml/cp_parser_uci.mly"
                               Cp_syntax.UT_jump _3  ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 3 : 'operand) in
    let _5 = (peek_val parser_env 1 : 'label) in
    Obj.repr((
# 256 "../../src/ml/cp_parser_uci.mly"
                                                 Cp_syntax.UT_falsejump (_3,_5) ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 3 : 'operand) in
    let _5 = (peek_val parser_env 1 : 'operand) in
    Obj.repr((
# 257 "../../src/ml/cp_parser_uci.mly"
                                              Cp_syntax.UT_move (_3,_5,[]) ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 5 : 'operand) in
    let _5 = (peek_val parser_env 3 : 'operand) in
    let _8 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 258 "../../src/ml/cp_parser_uci.mly"
                                                          Cp_syntax.UT_move (_3,_5,_8) ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 7 : 'operand) in
    let _5 = (peek_val parser_env 5 : 'operand) in
    let _7 = (peek_val parser_env 3 : 'operation) in
    let _9 = (peek_val parser_env 1 : 'operand) in
    Obj.repr((
# 259 "../../src/ml/cp_parser_uci.mly"
                                                                          Cp_syntax.UT_expr (_3,_5,_7,_9,[]) ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 9 : 'operand) in
    let _5 = (peek_val parser_env 7 : 'operand) in
    let _7 = (peek_val parser_env 5 : 'operation) in
    let _9 = (peek_val parser_env 3 : 'operand) in
    let _12 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 260 "../../src/ml/cp_parser_uci.mly"
                                                                                      Cp_syntax.UT_expr (_3,_5,_7,_9,_12) ) : 'instruction))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'selector) in
    let _4 = (peek_val parser_env 1 : 'operand_list) in
    Obj.repr((
# 261 "../../src/ml/cp_parser_uci.mly"
                                              Cp_syntax.UT_fun (_2,_4) ) : 'instruction))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 265 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_ident _1 ) : 'name))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 269 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.UT_ident _1 ) : 'label))
; (fun parser_env ->
    Obj.repr((
# 273 "../../src/ml/cp_parser_uci.mly"
           Cp_syntax.OP_add ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 274 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.OP_sub ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 275 "../../src/ml/cp_parser_uci.mly"
            Cp_syntax.OP_mul ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 276 "../../src/ml/cp_parser_uci.mly"
           Cp_syntax.OP_div ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 277 "../../src/ml/cp_parser_uci.mly"
          Cp_syntax.OP_land ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 278 "../../src/ml/cp_parser_uci.mly"
         Cp_syntax.OP_lor ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 279 "../../src/ml/cp_parser_uci.mly"
          Cp_syntax.OP_lxor ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 280 "../../src/ml/cp_parser_uci.mly"
          Cp_syntax.OP_lnot ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 281 "../../src/ml/cp_parser_uci.mly"
         Cp_syntax.OP_eq ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 282 "../../src/ml/cp_parser_uci.mly"
          Cp_syntax.OP_neq ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 283 "../../src/ml/cp_parser_uci.mly"
         Cp_syntax.OP_lt ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 284 "../../src/ml/cp_parser_uci.mly"
         Cp_syntax.OP_gt ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 285 "../../src/ml/cp_parser_uci.mly"
          Cp_syntax.OP_le ) : 'operation))
; (fun parser_env ->
    Obj.repr((
# 286 "../../src/ml/cp_parser_uci.mly"
          Cp_syntax.OP_ge ) : 'operation))
(* Entry main *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Cp_syntax.uci_syntax)
