type token =
    STRING of (Cp_syntax.file_pos*string)
  | IDENT of (Cp_syntax.file_pos*string)
  | VALUE of (char*Cp_syntax.file_pos*string)
  | PARAM of (Cp_syntax.file_pos*string)
  | S_VERSION
  | S_PARAMETER
  | S_FUN
  | S_TARGETS
  | S_TARGET
  | FOREACH
  | FOR
  | DO
  | WHEN
  | IF
  | THEN
  | ELSE
  | BEGIN
  | END
  | MATCH
  | WITH
  | IN
  | EOI
  | VAR
  | SEP1
  | SEP2
  | DOT
  | LPAREN
  | RPAREN
  | LBRAK
  | RBRAK
  | LCURL
  | RCURL
  | FOLLOW
  | EQ
  | NEQ
  | LT
  | GT
  | ASSIGN
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVI
  | AND
  | OR
  | XOR
  | COMMENT
  | TO
  | DOWNTO

let grammar = [|
     0,"$accept","%entry% $end";
     1,"main","section EOI";
     2,"section","S_VERSION STRING";
     3,"section","S_PARAMETER BEGIN params END";
     4,"section","S_TARGETS BEGIN targets END";
     5,"section","name SEP1 S_FUN BEGIN instructions END";
     6,"section","name SEP1 S_FUN LPAREN expr RPAREN BEGIN instructions END";
     7,"section","S_TARGETS BEGIN targets END";
     8,"section","S_TARGETS LPAREN expr RPAREN BEGIN targets END";
     9,"params","instruction EOI";
    10,"params","instruction EOI params";
    11,"targets","target EOI";
    12,"targets","target EOI targets";
    13,"target","name SEP1 S_TARGET BEGIN instructions END";
    14,"target","name SEP1 S_TARGET LPAREN expr RPAREN BEGIN instructions END";
    15,"data_exprs","data_expr EOI";
    16,"data_exprs","data_expr EOI data_exprs";
    17,"control_exprs","control_expr EOI";
    18,"control_exprs","control_expr EOI control_exprs";
    19,"data_expr","element ASSIGN expr";
    20,"control_expr","IF expr THEN block_instr";
    21,"control_expr","IF expr THEN block_instr ELSE block_instr";
    22,"control_expr","MATCH expr WITH BEGIN when_list END";
    23,"control_expr","FOR expr EQ range DO block_instr";
    24,"control_expr","FOREACH VAR IDENT IN VAR IDENT DO block_instr";
    25,"control_expr","FOREACH VAR IDENT IN name LPAREN VAR IDENT RPAREN DO block_instr";
    26,"control_expr","func";
    27,"block_instr","instruction";
    28,"block_instr","BEGIN instructions END";
    29,"when_list","when_expr";
    30,"when_list","when_expr when_list";
    31,"when_expr","WHEN expr SEP1 instructions";
    32,"var_name","VAR IDENT";
    33,"name_list","name";
    34,"name_list","name SEP2 name_list";
    35,"name","IDENT";
    36,"name","VAR IDENT";
    37,"func","name LPAREN arg_list RPAREN";
    38,"func","name LPAREN RPAREN";
    39,"arg_list","arg";
    40,"arg_list","arg SEP2 arg_list";
    41,"arg","expr";
    42,"instructions","instruction EOI";
    43,"instructions","instruction EOI instructions";
    44,"instruction","data_expr";
    45,"instruction","control_expr";
    46,"instruction","FOREACH VAR IDENT IN VAR IDENT DO block_instr";
    47,"expr","expr PLUS expr";
    48,"expr","MINUS expr";
    49,"expr","expr MINUS expr";
    50,"expr","expr TIMES expr";
    51,"expr","expr DIVI expr";
    52,"expr","expr EQ expr";
    53,"expr","expr LT expr";
    54,"expr","expr GT expr";
    55,"expr","expr ASSIGN expr";
    56,"expr","expr GEQ expr";
    57,"expr","expr NEQ expr";
    58,"expr","expr AND expr";
    59,"expr","expr OR expr";
    60,"expr","expr XOR expr";
    61,"expr","LPAREN expr RPAREN";
    62,"expr","element";
    63,"expr","func";
    64,"range","expr DOWNTO expr";
    65,"range","expr TO expr";
    66,"range","expr";
    67,"element","STRING";
    68,"element","VALUE";
    69,"element","name";
    70,"element","name DOT LBRAK range RBRAK";
    71,"element","name DOT name";
    72,"%entry%","'\001' main";
|]
let print s = print_string s; print_newline ()
let print_grammar state =
  let glen = Array.length grammar in
  if state > 0 && state < glen then (
    let i,rname,rule = grammar.(state) in
    print (Printf.sprintf "%4d %s: %s" i rname rule)
    )
open Parsing
let parse_error s = 
  let print s = print_string s; print_newline () in
  if (Parsing.parser_trace ()) then (
  print "====== RULE STACK TRACE =======";
  let mutable r = pop_rule_stack () in
  while r <> (-1) do
    print_grammar r;
    r <- pop_rule_stack ();
  done;
  print "====== TOKEN STACK TRACE =======";
  let mutable t = pop_token_stack () in
  while t <> "" do
    print_string t; print_string " ";
    t <- pop_token_stack ();
  done;
  print_newline ()
  )
let yytransl_const = [|
  261 (* S_VERSION *);
  262 (* S_PARAMETER *);
  263 (* S_FUN *);
  264 (* S_TARGETS *);
  265 (* S_TARGET *);
  266 (* FOREACH *);
  267 (* FOR *);
  268 (* DO *);
  269 (* WHEN *);
  270 (* IF *);
  271 (* THEN *);
  272 (* ELSE *);
  273 (* BEGIN *);
  274 (* END *);
  275 (* MATCH *);
  276 (* WITH *);
  277 (* IN *);
  278 (* EOI *);
  279 (* VAR *);
  280 (* SEP1 *);
  281 (* SEP2 *);
  282 (* DOT *);
  283 (* LPAREN *);
  284 (* RPAREN *);
  285 (* LBRAK *);
  286 (* RBRAK *);
  287 (* LCURL *);
  288 (* RCURL *);
  289 (* FOLLOW *);
  290 (* EQ *);
  291 (* NEQ *);
  292 (* LT *);
  293 (* GT *);
  294 (* ASSIGN *);
  295 (* GEQ *);
  296 (* PLUS *);
  297 (* MINUS *);
  298 (* TIMES *);
  299 (* DIVI *);
  300 (* AND *);
  301 (* OR *);
  302 (* XOR *);
  304 (* COMMENT *);
  305 (* TO *);
  306 (* DOWNTO *);
    0|]

let yytransl_block = [|
  257 (* STRING *);
  258 (* IDENT *);
  259 (* VALUE *);
  260 (* PARAM *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\004\000\004\000\009\000\009\000\010\000\010\000\
\012\000\012\000\011\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\015\000\015\000\016\000\016\000\019\000\020\000\
\021\000\021\000\005\000\005\000\018\000\018\000\022\000\022\000\
\023\000\006\000\006\000\008\000\008\000\008\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\017\000\
\017\000\017\000\014\000\014\000\014\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\002\000\004\000\004\000\006\000\009\000\004\000\007\000\
\002\000\003\000\002\000\003\000\006\000\009\000\002\000\003\000\
\002\000\003\000\003\000\004\000\006\000\006\000\006\000\008\000\
\011\000\001\000\001\000\003\000\001\000\002\000\004\000\002\000\
\001\000\003\000\001\000\002\000\004\000\003\000\001\000\003\000\
\001\000\002\000\003\000\001\000\001\000\008\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\001\000\001\000\003\000\
\003\000\001\000\001\000\001\000\001\000\005\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\072\000\
\000\000\000\000\002\000\000\000\000\000\000\000\036\000\001\000\
\000\000\067\000\068\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\045\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\038\000\000\000\000\000\000\000\010\000\
\000\000\000\000\012\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\040\000\000\000\000\000\008\000\043\000\000\000\000\000\
\000\000\000\000\000\000\023\000\028\000\021\000\000\000\022\000\
\030\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\024\000\000\000\031\000\000\000\000\000\014\000\000\000\
\025\000"

let yydgoto = "\002\000\
\008\000\009\000\024\000\031\000\025\000\099\000\077\000\100\000\
\033\000\000\000\027\000\000\000\028\000\037\000\107\000\127\000\
\104\000\038\000\128\000\000\000\000\000\078\000\079\000"

let yysindex = "\022\000\
\020\255\000\000\000\000\033\255\071\255\246\254\036\255\000\000\
\051\255\052\255\000\000\202\001\004\255\018\255\000\000\000\000\
\075\255\000\000\000\000\073\255\018\255\018\255\018\255\076\255\
\065\255\080\255\000\000\000\000\057\255\000\000\079\255\083\255\
\082\255\018\255\018\255\192\001\000\000\000\000\041\255\110\255\
\023\002\101\001\114\001\000\000\001\255\009\255\202\001\018\255\
\000\000\105\255\004\255\211\001\120\255\102\255\018\255\018\255\
\018\255\018\255\018\255\018\255\018\255\018\255\018\255\018\255\
\018\255\018\255\018\255\202\001\018\255\099\255\018\255\183\001\
\104\255\018\255\000\000\000\000\036\002\094\255\100\255\000\000\
\036\002\053\255\000\000\000\000\004\255\031\255\031\255\031\255\
\031\255\036\002\031\255\120\255\120\255\049\002\049\002\210\000\
\210\000\036\002\106\255\107\255\230\001\006\255\017\255\115\255\
\202\001\000\000\114\255\118\255\006\002\108\255\000\000\018\255\
\202\001\018\255\125\255\000\000\202\001\119\255\130\255\122\255\
\018\255\018\255\183\001\132\255\183\001\018\255\133\255\118\255\
\000\000\000\000\143\255\249\001\000\000\000\000\202\001\168\255\
\159\255\036\002\036\002\000\000\000\000\000\000\137\001\000\000\
\000\000\000\000\173\255\167\255\183\001\187\255\202\001\202\001\
\000\000\000\000\163\255\000\000\175\255\183\255\000\000\183\001\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\172\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\180\255\000\000\
\000\000\000\000\181\255\000\000\059\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\255\000\000\176\255\000\000\
\056\255\000\000\000\000\000\000\000\000\215\255\251\255\031\000\
\067\000\065\001\103\000\019\001\042\001\211\000\243\000\139\000\
\175\000\082\001\000\000\000\000\000\000\000\000\084\001\000\000\
\000\000\000\000\179\255\000\000\189\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\072\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\185\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\178\255\
\000\000\021\255\032\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\173\000\220\255\001\000\152\255\112\000\248\255\
\000\000\000\000\000\000\000\000\000\000\244\255\149\255\095\000\
\150\000\249\255\000\000\000\000\000\000\113\000\000\000"

let yytablesize = 863
let yytable = "\029\000\
\124\000\010\000\003\000\026\000\030\000\003\000\013\000\003\000\
\131\000\018\000\003\000\019\000\134\000\032\000\083\000\140\000\
\014\000\142\000\018\000\003\000\019\000\003\000\001\000\007\000\
\004\000\005\000\007\000\006\000\119\000\074\000\148\000\007\000\
\065\000\011\000\029\000\034\000\076\000\015\000\026\000\030\000\
\007\000\154\000\007\000\064\000\034\000\075\000\156\000\157\000\
\115\000\035\000\065\000\032\000\161\000\041\000\059\000\029\000\
\041\000\068\000\035\000\029\000\030\000\064\000\067\000\106\000\
\030\000\121\000\122\000\069\000\059\000\113\000\048\000\019\000\
\016\000\048\000\048\000\017\000\067\000\019\000\048\000\114\000\
\048\000\039\000\048\000\048\000\042\000\032\000\048\000\012\000\
\048\000\042\000\045\000\046\000\029\000\044\000\048\000\040\000\
\049\000\030\000\048\000\048\000\029\000\047\000\120\000\051\000\
\029\000\030\000\050\000\048\000\048\000\030\000\029\000\070\000\
\029\000\082\000\106\000\030\000\106\000\030\000\085\000\102\000\
\108\000\111\000\029\000\116\000\112\000\036\000\123\000\030\000\
\117\000\125\000\126\000\136\000\041\000\042\000\043\000\135\000\
\029\000\129\000\029\000\029\000\106\000\030\000\133\000\030\000\
\030\000\052\000\053\000\029\000\137\000\141\000\144\000\106\000\
\030\000\055\000\056\000\057\000\058\000\059\000\060\000\081\000\
\146\000\063\000\064\000\065\000\066\000\067\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\149\000\101\000\150\000\103\000\069\000\
\153\000\109\000\069\000\069\000\155\000\152\000\158\000\069\000\
\159\000\069\000\160\000\069\000\069\000\009\000\011\000\069\000\
\020\000\069\000\029\000\039\000\036\000\069\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\069\000\069\000\066\000\080\000\069\000\069\000\145\000\110\000\
\130\000\132\000\052\000\000\000\000\000\052\000\052\000\000\000\
\138\000\139\000\052\000\000\000\052\000\143\000\052\000\052\000\
\000\000\000\000\052\000\000\000\052\000\000\000\000\000\000\000\
\052\000\052\000\052\000\052\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\000\000\000\000\057\000\052\000\
\052\000\057\000\057\000\000\000\000\000\000\000\057\000\000\000\
\057\000\000\000\057\000\057\000\000\000\000\000\057\000\000\000\
\057\000\000\000\000\000\000\000\057\000\057\000\057\000\057\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\000\000\000\000\053\000\057\000\057\000\053\000\053\000\000\000\
\000\000\000\000\053\000\000\000\053\000\000\000\053\000\053\000\
\000\000\000\000\053\000\000\000\053\000\000\000\000\000\000\000\
\053\000\053\000\053\000\053\000\000\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\054\000\053\000\
\053\000\054\000\054\000\000\000\000\000\000\000\054\000\000\000\
\054\000\000\000\054\000\054\000\000\000\000\000\054\000\000\000\
\054\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\000\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\000\000\056\000\054\000\054\000\056\000\056\000\000\000\
\000\000\000\000\056\000\000\000\056\000\000\000\056\000\056\000\
\000\000\000\000\056\000\000\000\056\000\000\000\000\000\000\000\
\056\000\056\000\056\000\056\000\000\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\000\000\000\000\058\000\056\000\
\056\000\058\000\058\000\000\000\000\000\000\000\058\000\000\000\
\058\000\000\000\058\000\058\000\000\000\000\000\058\000\000\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\059\000\058\000\058\000\059\000\059\000\000\000\
\000\000\000\000\059\000\000\000\059\000\000\000\059\000\059\000\
\000\000\000\000\059\000\000\000\059\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\050\000\059\000\
\059\000\050\000\050\000\000\000\000\000\000\000\050\000\000\000\
\050\000\000\000\050\000\050\000\000\000\000\000\050\000\000\000\
\050\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\050\000\050\000\050\000\050\000\051\000\067\000\
\000\000\051\000\051\000\050\000\050\000\000\000\051\000\000\000\
\051\000\000\000\051\000\051\000\000\000\000\000\051\000\000\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\047\000\000\000\
\000\000\047\000\047\000\051\000\051\000\000\000\047\000\000\000\
\047\000\000\000\047\000\047\000\000\000\000\000\047\000\000\000\
\047\000\000\000\000\000\000\000\000\000\049\000\000\000\000\000\
\049\000\049\000\047\000\047\000\000\000\049\000\000\000\049\000\
\000\000\049\000\049\000\047\000\047\000\049\000\000\000\049\000\
\000\000\000\000\000\000\000\000\055\000\000\000\000\000\055\000\
\055\000\049\000\049\000\000\000\055\000\000\000\055\000\000\000\
\055\000\055\000\049\000\049\000\055\000\060\000\055\000\066\000\
\060\000\060\000\000\000\000\000\000\000\060\000\000\000\060\000\
\000\000\060\000\060\000\000\000\000\000\060\000\000\000\060\000\
\000\000\055\000\055\000\072\000\000\000\052\000\052\000\052\000\
\052\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\060\000\060\000\000\000\073\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\018\000\
\003\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\
\020\000\021\000\000\000\000\000\022\000\000\000\000\000\105\000\
\000\000\023\000\018\000\003\000\019\000\007\000\000\000\000\000\
\000\000\000\000\000\000\020\000\021\000\000\000\000\000\022\000\
\000\000\000\000\000\000\054\000\023\000\000\000\000\000\000\000\
\007\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\084\000\000\000\
\000\000\000\000\000\000\000\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\118\000\000\000\000\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\147\000\000\000\000\000\000\000\
\000\000\000\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\000\000\000\000\121\000\122\000\
\071\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\055\000\056\000\057\000\058\000\059\000\060\000\
\000\000\000\000\000\000\000\000\065\000\066\000\067\000"

let yycheck = "\012\000\
\105\000\001\000\002\001\012\000\012\000\002\001\017\001\002\001\
\113\000\001\001\002\001\003\001\117\000\013\000\051\000\123\000\
\027\001\125\000\001\001\002\001\003\001\002\001\001\000\023\001\
\005\001\006\001\023\001\008\001\023\001\029\001\135\000\023\001\
\012\001\001\001\047\000\027\001\028\001\002\001\047\000\047\000\
\023\001\149\000\023\001\012\001\027\001\045\000\151\000\152\000\
\085\000\041\001\030\001\051\000\160\000\025\001\038\001\068\000\
\028\001\017\001\041\001\072\000\068\000\030\001\046\001\072\000\
\072\000\049\001\050\001\027\001\038\001\017\001\012\001\016\001\
\022\001\015\001\016\001\024\001\046\001\022\001\020\001\027\001\
\022\001\007\001\024\001\025\001\013\001\085\000\028\001\017\001\
\030\001\018\001\026\001\027\001\105\000\018\001\038\001\023\001\
\018\001\105\000\040\001\041\001\113\000\022\001\102\000\022\001\
\117\000\113\000\024\001\049\001\050\001\117\000\123\000\002\001\
\125\000\009\001\123\000\123\000\125\000\125\000\017\001\021\001\
\017\001\028\001\135\000\018\001\025\001\014\000\012\001\135\000\
\022\001\016\001\013\001\002\001\021\000\022\000\023\000\017\001\
\149\000\030\001\151\000\152\000\149\000\149\000\018\001\151\000\
\152\000\034\000\035\000\160\000\027\001\018\001\018\001\160\000\
\160\000\034\001\035\001\036\001\037\001\038\001\039\001\048\000\
\018\001\042\001\043\001\044\001\045\001\046\001\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\012\001\069\000\023\001\071\000\012\001\
\018\001\074\000\015\001\016\001\002\001\017\001\028\001\020\001\
\018\001\022\001\012\001\024\001\025\001\018\001\018\001\028\001\
\022\001\030\001\018\001\028\001\027\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\030\001\047\000\049\001\050\001\128\000\074\000\
\112\000\114\000\012\001\255\255\255\255\015\001\016\001\255\255\
\121\000\122\000\020\001\255\255\022\001\126\000\024\001\025\001\
\255\255\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\012\001\049\001\
\050\001\015\001\016\001\255\255\255\255\255\255\020\001\255\255\
\022\001\255\255\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\012\001\049\001\050\001\015\001\016\001\255\255\
\255\255\255\255\020\001\255\255\022\001\255\255\024\001\025\001\
\255\255\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\012\001\049\001\
\050\001\015\001\016\001\255\255\255\255\255\255\020\001\255\255\
\022\001\255\255\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\012\001\049\001\050\001\015\001\016\001\255\255\
\255\255\255\255\020\001\255\255\022\001\255\255\024\001\025\001\
\255\255\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\012\001\049\001\
\050\001\015\001\016\001\255\255\255\255\255\255\020\001\255\255\
\022\001\255\255\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\012\001\049\001\050\001\015\001\016\001\255\255\
\255\255\255\255\020\001\255\255\022\001\255\255\024\001\025\001\
\255\255\255\255\028\001\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\255\255\255\255\012\001\049\001\
\050\001\015\001\016\001\255\255\255\255\255\255\020\001\255\255\
\022\001\255\255\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\255\255\040\001\041\001\042\001\043\001\012\001\046\001\
\255\255\015\001\016\001\049\001\050\001\255\255\020\001\255\255\
\022\001\255\255\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\012\001\255\255\
\255\255\015\001\016\001\049\001\050\001\255\255\020\001\255\255\
\022\001\255\255\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\255\255\255\255\012\001\255\255\255\255\
\015\001\016\001\040\001\041\001\255\255\020\001\255\255\022\001\
\255\255\024\001\025\001\049\001\050\001\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\012\001\255\255\255\255\015\001\
\016\001\040\001\041\001\255\255\020\001\255\255\022\001\255\255\
\024\001\025\001\049\001\050\001\028\001\012\001\030\001\012\001\
\015\001\016\001\255\255\255\255\255\255\020\001\255\255\022\001\
\255\255\024\001\025\001\255\255\255\255\028\001\255\255\030\001\
\255\255\049\001\050\001\015\001\255\255\034\001\035\001\036\001\
\037\001\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\049\001\050\001\255\255\020\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\024\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\001\001\
\002\001\003\001\255\255\255\255\255\255\255\255\255\255\255\255\
\010\001\011\001\255\255\255\255\014\001\255\255\255\255\017\001\
\255\255\019\001\001\001\002\001\003\001\023\001\255\255\255\255\
\255\255\255\255\255\255\010\001\011\001\255\255\255\255\014\001\
\255\255\255\255\255\255\028\001\019\001\255\255\255\255\255\255\
\023\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\028\001\255\255\
\255\255\255\255\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\028\001\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\255\255\255\255\049\001\050\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\034\001\035\001\036\001\037\001\038\001\039\001\
\255\255\255\255\255\255\255\255\044\001\045\001\046\001"

let yynames_const = "\
  S_VERSION\000\
  S_PARAMETER\000\
  S_FUN\000\
  S_TARGETS\000\
  S_TARGET\000\
  FOREACH\000\
  FOR\000\
  DO\000\
  WHEN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  BEGIN\000\
  END\000\
  MATCH\000\
  WITH\000\
  IN\000\
  EOI\000\
  VAR\000\
  SEP1\000\
  SEP2\000\
  DOT\000\
  LPAREN\000\
  RPAREN\000\
  LBRAK\000\
  RBRAK\000\
  LCURL\000\
  RCURL\000\
  FOLLOW\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  ASSIGN\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVI\000\
  AND\000\
  OR\000\
  XOR\000\
  COMMENT\000\
  TO\000\
  DOWNTO\000\
  "

let yynames_block = "\
  STRING\000\
  IDENT\000\
  VALUE\000\
  PARAM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'section) in
    Obj.repr((
# 50 "../../src/ml/cp_parser_tdi.mly"
                    _1 ) : Cp_syntax.tdi_syntax))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 54 "../../src/ml/cp_parser_tdi.mly"
                         Cp_syntax.TT_version _2 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'params) in
    Obj.repr((
# 55 "../../src/ml/cp_parser_tdi.mly"
                                     Cp_syntax.TT_parameter _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'targets) in
    Obj.repr((
# 56 "../../src/ml/cp_parser_tdi.mly"
                                    Cp_syntax.TT_targets _3 ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _5 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 57 "../../src/ml/cp_parser_tdi.mly"
                                               Cp_syntax.TT_fun (_1,_5) ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 8 : 'name) in
    let _5 = (peek_val parser_env 4 : 'expr) in
    let _8 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 58 "../../src/ml/cp_parser_tdi.mly"
                                                                  Cp_syntax.TT_conditional (_5,Cp_syntax.TT_fun (_1,_8)) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'targets) in
    Obj.repr((
# 59 "../../src/ml/cp_parser_tdi.mly"
                                    Cp_syntax.TT_targets _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _6 = (peek_val parser_env 1 : 'targets) in
    Obj.repr((
# 60 "../../src/ml/cp_parser_tdi.mly"
                                                       Cp_syntax.TT_conditional (_3,Cp_syntax.TT_targets _6) ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'instruction) in
    Obj.repr((
# 64 "../../src/ml/cp_parser_tdi.mly"
                      [_1] ) : 'params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'instruction) in
    let _3 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 65 "../../src/ml/cp_parser_tdi.mly"
                             _1 :: _3 ) : 'params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'target) in
    Obj.repr((
# 68 "../../src/ml/cp_parser_tdi.mly"
                 [_1] ) : 'targets))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'target) in
    let _3 = (peek_val parser_env 0 : 'targets) in
    Obj.repr((
# 69 "../../src/ml/cp_parser_tdi.mly"
                         _1 :: _3 ) : 'targets))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _5 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 73 "../../src/ml/cp_parser_tdi.mly"
                                                  Cp_syntax.TT_target (_1, _5) ) : 'target))
; (fun parser_env ->
    let _1 = (peek_val parser_env 8 : 'name) in
    let _5 = (peek_val parser_env 4 : 'expr) in
    let _8 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 74 "../../src/ml/cp_parser_tdi.mly"
                                                                     Cp_syntax.TT_conditional (_5,Cp_syntax.TT_target (_1,_8)) ) : 'target))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'data_expr) in
    Obj.repr((
# 78 "../../src/ml/cp_parser_tdi.mly"
                    [_1] ) : 'data_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'data_expr) in
    let _3 = (peek_val parser_env 0 : 'data_exprs) in
    Obj.repr((
# 79 "../../src/ml/cp_parser_tdi.mly"
                               _1 :: _3 ) : 'data_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'control_expr) in
    Obj.repr((
# 82 "../../src/ml/cp_parser_tdi.mly"
                       [_1] ) : 'control_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'control_expr) in
    let _3 = (peek_val parser_env 0 : 'control_exprs) in
    Obj.repr((
# 83 "../../src/ml/cp_parser_tdi.mly"
                                     _1 :: _3 ) : 'control_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'element) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 87 "../../src/ml/cp_parser_tdi.mly"
                         Cp_syntax.TT_assign (_1,_3) ) : 'data_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'expr) in
    let _4 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 93 "../../src/ml/cp_parser_tdi.mly"
                               Cp_syntax.TT_if (_2,_4,[])) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'expr) in
    let _4 = (peek_val parser_env 2 : 'block_instr) in
    let _6 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 94 "../../src/ml/cp_parser_tdi.mly"
                                                Cp_syntax.TT_if (_2,_4,_6)) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'expr) in
    let _5 = (peek_val parser_env 1 : 'when_list) in
    Obj.repr((
# 95 "../../src/ml/cp_parser_tdi.mly"
                                          Cp_syntax.TT_case (_2,_5) ) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'expr) in
    let _4 = (peek_val parser_env 2 : 'range) in
    let _6 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 96 "../../src/ml/cp_parser_tdi.mly"
                                       Cp_syntax.TT_for (_2,_4,_6) ) : 'control_expr))
; (fun parser_env ->
    let _3 = (peek_val parser_env 5 : Cp_syntax.file_pos*string) in
    let _6 = (peek_val parser_env 2 : Cp_syntax.file_pos*string) in
    let _8 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 97 "../../src/ml/cp_parser_tdi.mly"
                                                    Cp_syntax.TT_foreach (Cp_syntax.TT_var _3,Cp_syntax.TT_var _6,_8) ) : 'control_expr))
; (fun parser_env ->
    let _3 = (peek_val parser_env 8 : Cp_syntax.file_pos*string) in
    let _5 = (peek_val parser_env 6 : 'name) in
    let _8 = (peek_val parser_env 3 : Cp_syntax.file_pos*string) in
    let _11 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 98 "../../src/ml/cp_parser_tdi.mly"
                                                                       Cp_syntax.TT_foreach (Cp_syntax.TT_var _3,
                                                                                             Cp_syntax.TT_func(_5,[Cp_syntax.TT_var _8]),
                                                                                             _11) ) : 'control_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'func) in
    Obj.repr((
# 101 "../../src/ml/cp_parser_tdi.mly"
           _1 ) : 'control_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'instruction) in
    Obj.repr((
# 105 "../../src/ml/cp_parser_tdi.mly"
                  [_1] ) : 'block_instr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 106 "../../src/ml/cp_parser_tdi.mly"
                             _2 ) : 'block_instr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'when_expr) in
    Obj.repr((
# 110 "../../src/ml/cp_parser_tdi.mly"
                [_1] ) : 'when_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'when_expr) in
    let _2 = (peek_val parser_env 0 : 'when_list) in
    Obj.repr((
# 111 "../../src/ml/cp_parser_tdi.mly"
                          _1 :: _2 ) : 'when_list))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'expr) in
    let _4 = (peek_val parser_env 0 : 'instructions) in
    Obj.repr((
# 114 "../../src/ml/cp_parser_tdi.mly"
                                   Cp_syntax.TT_when (_2,_4) ) : 'when_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 118 "../../src/ml/cp_parser_tdi.mly"
                Cp_syntax.TT_var _2 ) : 'var_name))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 122 "../../src/ml/cp_parser_tdi.mly"
           [_1] ) : 'name_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    let _3 = (peek_val parser_env 0 : 'name_list) in
    Obj.repr((
# 123 "../../src/ml/cp_parser_tdi.mly"
                          _1 :: _3 ) : 'name_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 126 "../../src/ml/cp_parser_tdi.mly"
            Cp_syntax.TT_ident _1 ) : 'name))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 127 "../../src/ml/cp_parser_tdi.mly"
                Cp_syntax.TT_var _2 ) : 'name))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'name) in
    let _3 = (peek_val parser_env 1 : 'arg_list) in
    Obj.repr((
# 132 "../../src/ml/cp_parser_tdi.mly"
                                  Cp_syntax.TT_func (_1,_3) ) : 'func))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    Obj.repr((
# 133 "../../src/ml/cp_parser_tdi.mly"
                         Cp_syntax.TT_func (_1,[]) ) : 'func))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'arg) in
    Obj.repr((
# 139 "../../src/ml/cp_parser_tdi.mly"
          [_1] ) : 'arg_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'arg) in
    let _3 = (peek_val parser_env 0 : 'arg_list) in
    Obj.repr((
# 140 "../../src/ml/cp_parser_tdi.mly"
                        _1 :: _3 ) : 'arg_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 144 "../../src/ml/cp_parser_tdi.mly"
           _1 ) : 'arg))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'instruction) in
    Obj.repr((
# 149 "../../src/ml/cp_parser_tdi.mly"
                      [_1] ) : 'instructions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'instruction) in
    let _3 = (peek_val parser_env 0 : 'instructions) in
    Obj.repr((
# 150 "../../src/ml/cp_parser_tdi.mly"
                                   _1 :: _3 ) : 'instructions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'data_expr) in
    Obj.repr((
# 154 "../../src/ml/cp_parser_tdi.mly"
                _1 ) : 'instruction))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'control_expr) in
    Obj.repr((
# 155 "../../src/ml/cp_parser_tdi.mly"
                   _1 ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 5 : Cp_syntax.file_pos*string) in
    let _6 = (peek_val parser_env 2 : Cp_syntax.file_pos*string) in
    let _8 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 156 "../../src/ml/cp_parser_tdi.mly"
                                                    Cp_syntax.TT_foreach (Cp_syntax.TT_var _3,Cp_syntax.TT_var _6,_8) ) : 'instruction))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 162 "../../src/ml/cp_parser_tdi.mly"
                       Cp_syntax.TT_expr ("+",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 163 "../../src/ml/cp_parser_tdi.mly"
                   Cp_syntax.TT_expr ("-",Cp_syntax.TT_empty,_2) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 164 "../../src/ml/cp_parser_tdi.mly"
                        Cp_syntax.TT_expr ("-",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 165 "../../src/ml/cp_parser_tdi.mly"
                        Cp_syntax.TT_expr ("*",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 166 "../../src/ml/cp_parser_tdi.mly"
                       Cp_syntax.TT_expr ("/",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 167 "../../src/ml/cp_parser_tdi.mly"
                     Cp_syntax.TT_expr ("=",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 168 "../../src/ml/cp_parser_tdi.mly"
                     Cp_syntax.TT_expr ("<",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 169 "../../src/ml/cp_parser_tdi.mly"
                     Cp_syntax.TT_expr (">",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 170 "../../src/ml/cp_parser_tdi.mly"
                         Cp_syntax.TT_expr ("<=",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 171 "../../src/ml/cp_parser_tdi.mly"
                      Cp_syntax.TT_expr (">=",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 172 "../../src/ml/cp_parser_tdi.mly"
                      Cp_syntax.TT_expr ("<>",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 173 "../../src/ml/cp_parser_tdi.mly"
                      Cp_syntax.TT_expr ("and",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 174 "../../src/ml/cp_parser_tdi.mly"
                     Cp_syntax.TT_expr ("or",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 175 "../../src/ml/cp_parser_tdi.mly"
                      Cp_syntax.TT_expr ("xor",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'expr) in
    Obj.repr((
# 176 "../../src/ml/cp_parser_tdi.mly"
                           _2 ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'element) in
    Obj.repr((
# 177 "../../src/ml/cp_parser_tdi.mly"
                _1 ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'func) in
    Obj.repr((
# 178 "../../src/ml/cp_parser_tdi.mly"
             _1 ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 181 "../../src/ml/cp_parser_tdi.mly"
                       Cp_syntax.TT_range ('-',_1,_3) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 182 "../../src/ml/cp_parser_tdi.mly"
                   Cp_syntax.TT_range ('+',_1,_3) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 183 "../../src/ml/cp_parser_tdi.mly"
           Cp_syntax.TT_range ('=',_1,_1) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 188 "../../src/ml/cp_parser_tdi.mly"
             Cp_syntax.TT_value ('s',_1) ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 189 "../../src/ml/cp_parser_tdi.mly"
           let t,f,s = _1 in  Cp_syntax.TT_value (t,(f,s))) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 190 "../../src/ml/cp_parser_tdi.mly"
          _1 ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 1 : 'range) in
    Obj.repr((
# 191 "../../src/ml/cp_parser_tdi.mly"
                                Cp_syntax.TT_sub (_1,_4)  ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    let _3 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 192 "../../src/ml/cp_parser_tdi.mly"
                   Cp_syntax.TT_sel (_1,_3) ) : 'element))
(* Entry main *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Cp_syntax.tdi_syntax)
