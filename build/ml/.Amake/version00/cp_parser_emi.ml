type token =
    STRING of (Cp_syntax.file_pos*string)
  | IDENT of (Cp_syntax.file_pos*string)
  | VALUE of (char*Cp_syntax.file_pos*string)
  | PARAM of (Cp_syntax.file_pos*string)
  | S_VERSION
  | S_PARAMETER
  | S_METHODS
  | S_SIGNALS
  | S_INTERFACE
  | S_MAPPING
  | S_ACCESS
  | S_PROCESS
  | S_DATA
  | S_CONTROL
  | S_IMPORT
  | S_SET
  | S_TOP
  | S_CHECK
  | LHS
  | RHS
  | LRHS
  | VAR
  | SIGNAL
  | CONSTANT
  | LOGIC
  | NATURAL
  | VARIABLE
  | BOOL
  | SHARED
  | FOREACH
  | FOR
  | DO
  | IN
  | IF
  | THEN
  | ELSE
  | ELSIF
  | BEGIN
  | END
  | WHEN
  | WAIT
  | UNTIL
  | SEQUENCE
  | TYPE
  | CASE
  | IS
  | ARRAY
  | EOI
  | SEP1
  | SEP2
  | LPAREN
  | RPAREN
  | LBRAK
  | RBRAK
  | LCURL
  | RCURL
  | ACC
  | NULL
  | OTHERS
  | FOLLOW
  | EQ
  | NEQ
  | LT
  | GT
  | ASSIGN
  | ASSIGN2
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVI
  | EXP2
  | INT
  | CHAR
  | STRINGS
  | SIGNED
  | CONC
  | AND
  | OR
  | XOR
  | NOT
  | COMMENT
  | TO
  | DOWNTO
  | OUT
  | WITH
  | OF
  | NSEC
  | USEC
  | MSEC
  | SEC
  | HZ
  | KHZ
  | MHZ
  | GHZ

let grammar = [|
     0,"$accept","%entry% $end";
     1,"main","section EOI";
     2,"section","S_VERSION STRING";
     3,"section","S_PARAMETER BEGIN params END";
     4,"section","S_METHODS BEGIN methods END";
     5,"section","S_METHODS LPAREN expr RPAREN BEGIN methods END";
     6,"section","S_CHECK BEGIN checks END";
     7,"section","S_CHECK LPAREN expr RPAREN BEGIN checks END";
     8,"section","S_INTERFACE BEGIN interfaces END";
     9,"section","S_INTERFACE LPAREN expr RPAREN BEGIN interfaces END";
    10,"section","S_INTERFACE LPAREN expr RPAREN BEGIN NULL EOI END";
    11,"section","S_SIGNALS BEGIN signals END";
    12,"section","S_SIGNALS LPAREN expr RPAREN BEGIN signals END";
    13,"section","S_MAPPING BEGIN mappings END";
    14,"section","S_MAPPING LPAREN expr RPAREN BEGIN mappings END";
    15,"section","S_MAPPING LPAREN expr RPAREN BEGIN NULL EOI END";
    16,"section","S_TOP BEGIN instructions END";
    17,"section","S_TOP LPAREN expr RPAREN BEGIN instructions END";
    18,"section","name SEP1 S_PROCESS BEGIN instructions END";
    19,"section","name SEP1 S_PROCESS LPAREN expr RPAREN BEGIN instructions END";
    20,"section","name SEP1 S_ACCESS BEGIN access END";
    21,"section","name SEP1 S_ACCESS LPAREN expr RPAREN BEGIN access END";
    22,"params","param_def EOI";
    23,"params","param_def EOI params";
    24,"param_def","param";
    25,"param_def","param WITH attr_list";
    26,"param","name";
    27,"param","name ASSIGN expr";
    28,"param","name LBRAK range RBRAK ASSIGN expr";
    29,"param","name LBRAK arg_list RBRAK ASSIGN expr";
    30,"param","name LBRAK range RBRAK";
    31,"param","name LBRAK arg_list RBRAK";
    32,"param","name LBRAK range SEP1 data_type RBRAK";
    33,"param","name LBRAK range SEP1 data_type RBRAK ASSIGN expr";
    34,"param","name LBRAK arg_list SEP1 data_type RBRAK";
    35,"param","name LBRAK arg_list SEP1 data_type RBRAK ASSIGN expr";
    36,"data_type","LOGIC";
    37,"data_type","SIGNED";
    38,"data_type","INT";
    39,"data_type","BOOL";
    40,"data_type","CHAR";
    41,"data_type","STRINGS";
    42,"data_type","VAR";
    43,"attr_list","IDENT";
    44,"attr_list","IDENT AND attr_list";
    45,"methods","method_decl EOI";
    46,"methods","method_decl EOI methods";
    47,"method_decl","func";
    48,"checks","check EOI";
    49,"checks","check EOI checks";
    50,"check","expr";
    51,"signals","signal_decl EOI";
    52,"signals","signal_decl EOI signals";
    53,"sig_dir","IN";
    54,"sig_dir","OUT";
    55,"signal_decl","VAR IDENT";
    56,"signal_decl","FOREACH VAR IDENT IN foreach DO BEGIN signals END";
    57,"signal_decl","CONSTANT name";
    58,"signal_decl","CONSTANT name SEP1 arg_type ASSIGN2 expr";
    59,"signal_decl","SIGNAL name SEP1 arg_type";
    60,"signal_decl","SIGNAL name SEP1 sig_dir arg_type";
    61,"signal_decl","VARIABLE name SEP1 arg_type";
    62,"signal_decl","SHARED VARIABLE name SEP1 arg_type";
    63,"signal_decl","TYPE name IS LCURL name_list RCURL";
    64,"signal_decl","TYPE name IS ARRAY LBRAK range RBRAK OF arg_type";
    65,"signal_decl","TYPE name";
    66,"interfaces","interface_decl EOI";
    67,"interfaces","interface_decl EOI interfaces";
    68,"interface_decl","FOREACH VAR IDENT IN foreach DO BEGIN interfaces END";
    69,"interface_decl","SIGNAL name SEP1 sig_dir arg_type";
    70,"mappings","mapping_decl EOI";
    71,"mappings","mapping_decl EOI mappings";
    72,"mapping_decl","FOREACH VAR IDENT IN foreach DO BEGIN mappings END";
    73,"mapping_decl","name FOLLOW name";
    74,"access","access_decl EOI";
    75,"access","access_decl EOI access";
    76,"access_decl","S_DATA BEGIN data_exprs END";
    77,"access_decl","S_CONTROL BEGIN control_exprs END";
    78,"access_decl","S_IMPORT BEGIN methods END";
    79,"access_decl","S_SET BEGIN data_exprs END";
    80,"foreach","VAR IDENT";
    81,"foreach","foreach AND foreach";
    82,"foreach","foreach OR foreach";
    83,"foreach","foreach XOR foreach";
    84,"data_exprs","data_expr EOI";
    85,"data_exprs","data_expr EOI data_exprs";
    86,"control_exprs","control_expr EOI";
    87,"control_exprs","control_expr EOI control_exprs";
    88,"data_expr","element ASSIGN expr WHEN expr ELSE expr";
    89,"data_expr","element ASSIGN expr";
    90,"data_expr","element ASSIGN2 expr";
    91,"data_expr","NULL";
    92,"data_expr","func";
    93,"ifothers","IF OTHERS THEN block_instr";
    94,"ifseq","IF expr THEN block_instr ifseq";
    95,"ifseq","ELSIF expr THEN block_instr ifseq";
    96,"ifseq","IF expr THEN block_instr ifothers";
    97,"ifseq","ELSIF expr THEN block_instr ifothers";
    98,"ifseq","ELSIF expr THEN block_instr";
    99,"ifseq","ELSIF expr THEN block_instr ELSE block_instr";
   100,"ifseq","ELSE IF expr THEN block_instr ifseq";
   101,"ifseq","ELSE IF expr THEN block_instr";
   102,"ifseq","ELSE IF expr THEN block_instr ELSE block_instr";
   103,"control_expr","WAIT FOR expr";
   104,"control_expr","WAIT UNTIL expr";
   105,"control_expr","IF expr THEN block_instr";
   106,"control_expr","IF expr THEN block_instr ELSE block_instr";
   107,"control_expr","IF OTHERS THEN block_instr";
   108,"control_expr","ifseq";
   109,"control_expr","CASE expr IS BEGIN when_list END";
   110,"control_expr","FOR expr EQ range DO block_instr";
   111,"control_expr","WITH expr DO block_instr";
   112,"control_expr","NULL";
   113,"block_instr","instruction";
   114,"block_instr","BEGIN instructions END";
   115,"when_list","when_expr";
   116,"when_list","when_expr when_list";
   117,"when_expr","WHEN OTHERS FOLLOW block_instr EOI";
   118,"when_expr","WHEN expr FOLLOW block_instr EOI";
   119,"name","IDENT";
   120,"name","VAR IDENT";
   121,"name","var_expr";
   122,"var_expr","IDENT";
   123,"var_expr","VAR IDENT";
   124,"var_expr","VAR IDENT var_expr";
   125,"var_expr","IDENT var_expr";
   126,"name_list","name";
   127,"name_list","name SEP2 name_list";
   128,"func","name LPAREN arg_list RPAREN";
   129,"func","name LPAREN RPAREN";
   130,"arg_list","arg";
   131,"arg_list","arg SEP2 arg_list";
   132,"arg","expr";
   133,"arg","OR";
   134,"arg","LHS SEP1 arg_type";
   135,"arg","RHS SEP1 arg_type";
   136,"arg","LRHS SEP1 arg_type";
   137,"arg","LHS";
   138,"arg","RHS";
   139,"arg","LRHS";
   140,"arg_type","LOGIC";
   141,"arg_type","BOOL";
   142,"arg_type","INT LBRAK expr RBRAK";
   143,"arg_type","SIGNED LBRAK expr RBRAK";
   144,"arg_type","LOGIC LBRAK expr RBRAK";
   145,"arg_type","LOGIC LBRAK range RBRAK";
   146,"arg_type","NATURAL";
   147,"arg_type","STRINGS";
   148,"arg_type","name";
   149,"instructions","instruction EOI";
   150,"instructions","instruction EOI instructions";
   151,"instruction","VARIABLE name SEP1 arg_type";
   152,"instruction","data_expr";
   153,"instruction","control_expr";
   154,"instruction","SEQUENCE BEGIN instructions END";
   155,"instruction","FOREACH VAR IDENT IN foreach DO BEGIN instructions END";
   156,"instruction","FOREACH VAR IDENT IN foreach DO instruction";
   157,"expr","expr PLUS expr";
   158,"expr","expr EXP2 expr";
   159,"expr","MINUS expr";
   160,"expr","NOT expr";
   161,"expr","expr MINUS expr";
   162,"expr","expr TIMES expr";
   163,"expr","expr DIVI expr";
   164,"expr","expr EQ expr";
   165,"expr","expr LT expr";
   166,"expr","expr GT expr";
   167,"expr","expr ASSIGN expr";
   168,"expr","expr GEQ expr";
   169,"expr","expr NEQ expr";
   170,"expr","expr AND expr";
   171,"expr","expr OR expr";
   172,"expr","expr XOR expr";
   173,"expr","expr CONC expr";
   174,"expr","LPAREN expr RPAREN";
   175,"expr","element";
   176,"expr","func";
   177,"range","expr DOWNTO expr";
   178,"range","expr TO expr";
   179,"range","expr";
   180,"element","STRING";
   181,"element","VALUE";
   182,"element","VALUE timeunit";
   183,"element","VALUE frequnit";
   184,"element","OTHERS FOLLOW VALUE";
   185,"element","name";
   186,"element","name LBRAK range RBRAK";
   187,"element","name ACC name";
   188,"timeunit","NSEC";
   189,"timeunit","USEC";
   190,"timeunit","MSEC";
   191,"timeunit","SEC";
   192,"frequnit","HZ";
   193,"frequnit","KHZ";
   194,"frequnit","MHZ";
   195,"frequnit","GHZ";
   196,"%entry%","'\001' main";
|]
let print s = print_string s; print_newline ()
let print_grammar state =
  let glen = Array.length grammar in
  if state > 0 && state < glen then (
    let i,rname,rule = grammar.(state) in
    print (Printf.sprintf "%4d %s: %s" i rname rule)
    )
open Parsing
let parse_error s = 
  let print s = print_string s; print_newline () in
  if (Parsing.parser_trace ()) then (
  print "====== RULE STACK TRACE =======";
  let mutable r = pop_rule_stack () in
  while r <> (-1) do
    print_grammar r;
    r <- pop_rule_stack ();
  done;
  print "====== TOKEN STACK TRACE =======";
  let mutable t = pop_token_stack () in
  while t <> "" do
    print_string t; print_string " ";
    t <- pop_token_stack ();
  done;
  print_newline ()
  )
let yytransl_const = [|
  261 (* S_VERSION *);
  262 (* S_PARAMETER *);
  263 (* S_METHODS *);
  264 (* S_SIGNALS *);
  265 (* S_INTERFACE *);
  266 (* S_MAPPING *);
  267 (* S_ACCESS *);
  268 (* S_PROCESS *);
  269 (* S_DATA *);
  270 (* S_CONTROL *);
  271 (* S_IMPORT *);
  272 (* S_SET *);
  273 (* S_TOP *);
  274 (* S_CHECK *);
  275 (* LHS *);
  276 (* RHS *);
  277 (* LRHS *);
  278 (* VAR *);
  279 (* SIGNAL *);
  280 (* CONSTANT *);
  281 (* LOGIC *);
  282 (* NATURAL *);
  283 (* VARIABLE *);
  284 (* BOOL *);
  285 (* SHARED *);
  286 (* FOREACH *);
  287 (* FOR *);
  288 (* DO *);
  289 (* IN *);
  290 (* IF *);
  291 (* THEN *);
  292 (* ELSE *);
  293 (* ELSIF *);
  294 (* BEGIN *);
  295 (* END *);
  296 (* WHEN *);
  297 (* WAIT *);
  298 (* UNTIL *);
  299 (* SEQUENCE *);
  300 (* TYPE *);
  301 (* CASE *);
  302 (* IS *);
  303 (* ARRAY *);
  304 (* EOI *);
  305 (* SEP1 *);
  306 (* SEP2 *);
  307 (* LPAREN *);
  308 (* RPAREN *);
  309 (* LBRAK *);
  310 (* RBRAK *);
  311 (* LCURL *);
  312 (* RCURL *);
  313 (* ACC *);
  314 (* NULL *);
  315 (* OTHERS *);
  316 (* FOLLOW *);
  317 (* EQ *);
  318 (* NEQ *);
  319 (* LT *);
  320 (* GT *);
  321 (* ASSIGN *);
  322 (* ASSIGN2 *);
  323 (* GEQ *);
  324 (* PLUS *);
  325 (* MINUS *);
  326 (* TIMES *);
  327 (* DIVI *);
  328 (* EXP2 *);
  329 (* INT *);
  330 (* CHAR *);
  331 (* STRINGS *);
  332 (* SIGNED *);
  333 (* CONC *);
  334 (* AND *);
  335 (* OR *);
  336 (* XOR *);
  337 (* NOT *);
  339 (* COMMENT *);
  340 (* TO *);
  341 (* DOWNTO *);
  342 (* OUT *);
  343 (* WITH *);
  344 (* OF *);
  345 (* NSEC *);
  346 (* USEC *);
  347 (* MSEC *);
  348 (* SEC *);
  349 (* HZ *);
  350 (* KHZ *);
  351 (* MHZ *);
  352 (* GHZ *);
    0|]

let yytransl_block = [|
  257 (* STRING *);
  258 (* IDENT *);
  259 (* VALUE *);
  260 (* PARAM *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\003\000\003\000\013\000\
\013\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\018\000\018\000\018\000\018\000\018\000\
\018\000\018\000\015\000\015\000\004\000\004\000\019\000\006\000\
\006\000\021\000\008\000\008\000\023\000\023\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\007\000\007\000\027\000\027\000\009\000\009\000\028\000\
\028\000\012\000\012\000\029\000\029\000\029\000\029\000\024\000\
\024\000\024\000\024\000\030\000\030\000\031\000\031\000\032\000\
\032\000\032\000\032\000\032\000\035\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\036\000\036\000\038\000\038\000\040\000\040\000\011\000\011\000\
\011\000\041\000\041\000\041\000\041\000\026\000\026\000\020\000\
\020\000\017\000\017\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\010\000\010\000\039\000\039\000\
\039\000\039\000\039\000\039\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\016\000\016\000\016\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\043\000\043\000\043\000\043\000\044\000\
\044\000\044\000\044\000\000\000"

let yylen = "\002\000\
\002\000\002\000\004\000\004\000\007\000\004\000\007\000\004\000\
\007\000\008\000\004\000\007\000\004\000\007\000\008\000\004\000\
\007\000\006\000\009\000\006\000\009\000\002\000\003\000\001\000\
\003\000\001\000\003\000\006\000\006\000\004\000\004\000\006\000\
\008\000\006\000\008\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\002\000\003\000\001\000\002\000\
\003\000\001\000\002\000\003\000\001\000\001\000\002\000\009\000\
\002\000\006\000\004\000\005\000\004\000\005\000\006\000\009\000\
\002\000\002\000\003\000\009\000\005\000\002\000\003\000\009\000\
\003\000\002\000\003\000\004\000\004\000\004\000\004\000\002\000\
\003\000\003\000\003\000\002\000\003\000\002\000\003\000\007\000\
\003\000\003\000\001\000\001\000\004\000\005\000\005\000\005\000\
\005\000\004\000\006\000\006\000\005\000\007\000\003\000\003\000\
\004\000\006\000\004\000\001\000\006\000\006\000\004\000\001\000\
\001\000\003\000\001\000\002\000\005\000\005\000\001\000\002\000\
\001\000\001\000\002\000\003\000\002\000\001\000\003\000\004\000\
\003\000\001\000\003\000\001\000\001\000\003\000\003\000\003\000\
\001\000\001\000\001\000\001\000\001\000\004\000\004\000\004\000\
\004\000\001\000\001\000\001\000\002\000\003\000\004\000\001\000\
\001\000\004\000\009\000\007\000\003\000\003\000\002\000\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\001\000\
\003\000\003\000\001\000\001\000\001\000\002\000\002\000\003\000\
\001\000\004\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\196\000\000\000\000\000\121\000\
\000\000\000\000\125\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\000\180\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\176\000\175\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\091\000\000\000\000\000\092\000\
\152\000\153\000\000\000\108\000\000\000\000\000\000\000\000\000\
\000\000\000\000\124\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\004\000\000\000\000\000\188\000\189\000\190\000\
\191\000\192\000\193\000\194\000\195\000\182\000\183\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\008\000\000\000\000\000\000\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\133\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\025\000\129\000\000\000\000\000\
\046\000\174\000\184\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\187\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\
\067\000\000\000\000\000\073\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\150\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\128\000\000\000\186\000\000\000\
\146\000\141\000\053\000\000\000\147\000\000\000\054\000\148\000\
\000\000\059\000\000\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\151\000\000\000\000\000\000\000\000\000\107\000\113\000\000\000\
\000\000\000\000\154\000\000\000\111\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\018\000\
\000\000\134\000\135\000\136\000\000\000\000\000\042\000\036\000\
\039\000\038\000\040\000\041\000\037\000\000\000\000\000\000\000\
\000\000\131\000\044\000\005\000\000\000\000\000\000\000\060\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\012\000\
\069\000\000\000\000\000\009\000\000\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\096\000\094\000\000\000\000\000\
\097\000\095\000\000\000\000\000\000\000\000\000\017\000\007\000\
\091\000\000\000\000\000\112\000\000\000\000\000\000\000\000\000\
\075\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\010\000\000\000\015\000\
\000\000\110\000\114\000\000\000\000\000\000\000\106\000\000\000\
\000\000\100\000\099\000\000\000\000\000\109\000\116\000\000\000\
\076\000\000\000\077\000\000\000\078\000\079\000\000\000\000\000\
\000\000\000\000\144\000\145\000\142\000\143\000\000\000\000\000\
\000\000\000\000\000\000\127\000\000\000\000\000\000\000\156\000\
\000\000\000\000\000\000\102\000\000\000\000\000\000\000\085\000\
\087\000\021\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\000\000\000\000\000\000\000\000\000\000\000\
\056\000\064\000\068\000\072\000\155\000\000\000\117\000\118\000\
\000\000\094\000\102\000"

let yydgoto = "\002\000\
\013\000\014\000\038\000\042\000\095\000\096\000\068\000\063\000\
\072\000\087\000\053\000\005\001\040\000\041\000\197\000\191\000\
\192\000\086\001\044\000\054\000\097\000\064\000\033\001\100\001\
\034\001\103\001\069\000\074\000\006\001\130\001\133\001\089\000\
\090\000\055\000\117\001\054\001\092\000\124\001\055\001\125\001\
\016\000\193\000\118\000\119\000"

let yysindex = "\084\000\
\121\001\000\000\159\255\142\255\078\255\250\254\106\255\160\255\
\179\255\203\255\209\255\167\255\000\000\156\255\100\255\000\000\
\159\255\199\255\000\000\000\000\166\255\166\255\049\000\247\255\
\049\000\047\000\049\000\091\255\049\000\157\001\049\000\049\000\
\049\000\159\255\000\000\135\255\159\255\180\255\237\254\170\255\
\134\255\196\255\205\255\235\255\000\000\000\000\136\001\049\000\
\198\255\049\000\049\000\199\006\098\000\000\000\000\000\028\000\
\166\255\166\255\166\255\006\000\031\000\166\255\016\000\017\000\
\220\006\166\255\052\000\058\000\035\000\241\006\079\000\067\000\
\059\000\076\000\006\007\166\255\085\000\049\000\093\000\095\000\
\049\000\254\255\096\000\049\000\000\000\049\000\092\000\000\000\
\000\000\000\000\144\255\000\000\100\000\027\007\238\007\102\000\
\105\000\048\007\000\000\217\255\243\255\000\000\066\000\049\000\
\166\255\141\000\000\000\194\255\166\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\007\
\153\000\022\008\219\005\122\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\166\255\000\000\114\000\115\000\
\116\000\166\255\181\000\143\000\000\000\247\255\154\000\151\000\
\191\000\000\000\047\000\164\000\203\000\000\000\166\255\091\255\
\173\000\176\000\214\000\002\008\077\255\004\006\049\000\024\006\
\049\000\049\000\157\001\150\006\240\005\000\000\049\000\049\000\
\157\001\192\000\000\000\049\000\193\000\248\000\049\000\157\001\
\049\000\184\000\199\000\200\000\000\000\171\007\044\000\050\000\
\205\000\238\007\000\000\163\000\000\000\000\000\238\007\198\000\
\000\000\000\000\000\000\166\255\213\255\213\255\213\255\213\255\
\238\007\213\255\022\008\022\008\042\008\042\008\042\008\074\255\
\219\005\219\005\238\007\171\007\204\000\000\000\089\255\111\000\
\111\000\216\000\233\000\008\255\000\000\247\255\236\254\234\000\
\000\000\021\255\239\000\000\000\000\000\048\255\111\000\010\001\
\049\000\149\255\149\255\044\006\149\255\238\007\238\007\005\001\
\008\001\149\255\130\006\238\007\000\000\157\001\000\000\049\000\
\012\001\015\001\019\001\020\001\021\001\024\001\090\007\048\001\
\111\007\111\000\111\000\111\000\049\000\049\000\144\000\254\000\
\144\000\016\001\066\000\141\000\000\000\056\001\000\000\038\001\
\000\000\000\000\000\000\043\001\000\000\050\001\000\000\000\000\
\111\000\000\000\039\001\000\000\111\000\096\001\066\001\166\255\
\081\001\111\000\096\001\076\001\086\001\096\001\087\001\095\001\
\000\000\096\001\252\255\113\001\157\001\000\000\000\000\037\001\
\149\255\042\001\000\000\102\001\000\000\049\000\115\001\117\001\
\051\255\002\255\166\255\051\255\000\000\248\000\111\001\000\000\
\119\001\000\000\000\000\000\000\238\007\238\007\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\001\049\000\109\001\
\049\000\000\000\000\000\000\000\049\000\049\000\049\000\000\000\
\049\000\000\000\162\001\017\255\049\000\116\001\118\001\000\000\
\000\000\040\255\131\001\000\000\050\255\132\001\000\000\056\255\
\149\255\133\001\033\001\011\001\000\000\000\000\046\001\011\001\
\000\000\000\000\114\001\137\001\102\001\104\006\000\000\000\000\
\000\000\138\001\127\001\000\000\139\001\134\001\141\001\142\001\
\000\000\248\000\157\001\120\001\238\007\124\001\238\007\170\006\
\145\001\131\007\151\007\238\007\000\000\152\001\096\001\096\001\
\096\001\147\001\166\255\000\000\154\001\000\000\158\001\000\000\
\063\001\000\000\000\000\096\255\064\006\093\000\000\000\049\000\
\011\001\000\000\000\000\126\001\218\007\000\000\000\000\049\000\
\000\000\051\255\000\000\002\255\000\000\000\000\164\001\166\001\
\049\000\049\000\000\000\000\000\000\000\000\000\247\255\128\001\
\128\001\225\255\123\001\000\000\047\000\091\255\157\001\000\000\
\149\255\149\255\084\006\000\000\110\001\149\255\238\007\000\000\
\000\000\000\000\000\000\238\007\238\007\173\001\111\000\174\001\
\175\001\178\001\000\000\052\001\149\255\136\001\161\001\185\001\
\000\000\000\000\000\000\000\000\000\000\073\001\000\000\000\000\
\011\001\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\216\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\089\002\000\000\000\000\143\002\000\000\243\254\000\000\
\186\001\000\000\000\000\000\000\000\000\000\000\197\002\000\000\
\000\000\000\000\000\000\000\000\251\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\190\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\182\001\000\000\000\000\000\000\184\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\091\005\117\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\191\001\
\000\000\000\000\000\000\192\001\000\000\207\001\000\000\000\000\
\000\000\000\000\208\001\000\000\000\000\000\000\000\000\215\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\218\001\000\000\000\000\000\000\000\000\
\000\000\088\000\107\000\128\000\000\000\072\000\000\000\000\000\
\030\000\249\254\000\000\210\001\000\000\000\000\062\000\000\000\
\000\000\000\000\000\000\000\000\103\003\157\003\211\003\009\004\
\206\005\063\004\145\005\152\005\023\005\030\005\084\005\049\003\
\171\004\225\004\213\005\201\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\167\000\000\000\
\000\000\000\000\187\000\223\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\
\000\000\016\255\000\000\000\000\000\000\000\000\000\000\170\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\175\000\000\000\000\000\000\000\000\000\170\255\
\000\000\211\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\221\001\000\000\000\000\
\000\000\000\000\000\000\000\000\210\255\230\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\205\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\226\001\000\000\
\000\000\000\000\000\000\000\000\236\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\090\255\115\255\119\255\141\255\000\000\
\000\000\000\000\000\000\241\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\251\001\000\000\252\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\254\
\121\255\004\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\001\000\000\
\000\000\000\000\000\000\157\255\164\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\197\007\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\226\001\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\192\002\153\255\148\001\105\255\103\255\110\255\
\101\255\088\255\255\255\210\254\000\000\000\000\022\002\147\255\
\155\255\026\002\000\000\245\255\000\000\000\000\071\002\228\254\
\057\255\149\001\000\000\000\000\000\000\211\254\125\001\205\254\
\202\254\007\000\248\001\113\255\208\254\183\001\227\255\000\000\
\025\000\000\000\000\000\000\000"

let yytablesize = 2426
let yytable = "\015\000\
\093\000\233\000\248\000\229\000\237\000\201\000\200\000\118\001\
\253\000\122\001\045\000\134\001\027\001\131\001\106\001\008\001\
\131\001\109\001\088\000\039\000\043\000\112\001\136\001\137\001\
\035\001\036\001\073\000\019\000\255\000\081\000\221\000\022\000\
\078\000\103\000\026\000\079\000\091\000\080\000\081\000\049\001\
\027\000\019\000\082\000\066\000\023\000\104\000\084\000\030\000\
\150\001\003\000\067\000\046\000\003\000\047\000\039\001\143\000\
\144\000\145\000\099\000\132\001\148\000\099\000\040\001\031\000\
\152\000\031\001\074\001\075\001\076\001\012\000\170\001\157\001\
\012\000\026\000\162\000\081\000\081\000\071\000\044\001\027\000\
\045\001\159\001\048\001\041\001\001\000\063\001\030\000\161\001\
\086\000\096\001\003\000\183\001\003\000\098\001\151\001\152\001\
\153\001\045\000\105\001\056\001\022\001\058\001\031\000\039\000\
\064\001\047\001\061\001\043\000\129\001\049\000\012\000\242\000\
\012\000\024\001\025\001\021\000\026\001\151\001\152\001\153\001\
\071\000\027\001\192\001\193\001\194\001\134\001\131\001\151\001\
\152\001\153\001\201\001\052\001\208\001\151\001\152\001\153\001\
\121\000\032\000\129\000\222\000\114\001\093\000\020\000\024\000\
\226\000\100\000\101\000\093\000\036\000\046\000\003\000\047\000\
\082\000\139\000\093\000\121\000\025\000\236\000\073\000\088\000\
\017\000\028\001\028\000\029\001\030\001\088\000\034\000\003\000\
\034\000\119\001\012\000\118\001\088\000\090\001\031\001\076\000\
\032\000\091\000\077\000\078\000\018\000\234\001\079\000\091\000\
\080\000\081\000\053\001\012\000\029\000\082\000\091\000\083\000\
\045\000\084\000\046\000\003\000\047\000\026\000\082\000\082\000\
\037\000\028\000\043\000\035\000\033\000\034\000\085\000\049\000\
\175\000\176\000\027\000\035\000\186\000\187\000\188\000\012\000\
\028\000\105\000\102\000\135\001\106\000\032\001\032\001\032\001\
\093\000\162\001\184\001\029\000\167\001\029\000\088\000\088\000\
\171\001\088\000\107\000\086\000\073\000\032\001\088\000\145\001\
\030\000\178\000\088\000\033\000\048\000\198\000\032\000\154\001\
\091\000\091\000\035\000\091\000\049\000\031\000\182\000\108\000\
\091\000\121\000\178\000\033\000\091\000\177\000\050\000\178\000\
\032\001\032\001\032\001\183\000\056\000\057\000\058\000\226\001\
\189\000\059\000\051\000\060\000\061\000\129\000\177\000\093\000\
\184\000\204\001\109\000\177\000\169\000\142\000\218\001\032\001\
\146\000\136\000\062\000\032\001\139\000\185\000\102\001\170\000\
\032\001\088\000\217\001\216\001\214\001\088\000\151\001\152\001\
\153\001\046\000\003\000\047\000\147\000\088\000\149\000\045\000\
\088\000\219\001\220\001\091\000\129\000\223\001\224\001\091\000\
\150\000\043\000\046\000\003\000\047\000\066\000\012\000\091\000\
\136\000\153\000\091\000\139\000\067\000\230\001\130\000\013\001\
\014\001\130\000\155\000\130\000\186\000\187\000\188\000\012\000\
\103\000\235\001\103\000\103\000\015\001\046\000\003\000\047\000\
\154\000\016\001\017\001\048\000\157\000\088\000\103\000\018\001\
\088\000\158\000\163\000\049\000\088\000\093\000\132\000\132\000\
\003\000\132\000\012\000\132\000\048\000\050\000\159\000\091\000\
\132\000\132\000\091\000\160\000\049\000\132\000\091\000\088\000\
\167\000\051\000\174\000\200\001\012\000\171\000\050\000\024\001\
\025\001\137\000\026\001\137\000\179\000\137\000\196\000\048\000\
\189\000\091\000\051\000\177\000\108\000\088\000\140\000\165\000\
\180\000\102\001\141\000\203\000\138\000\088\000\138\000\204\000\
\138\000\050\000\223\000\224\000\225\000\079\001\088\000\091\000\
\080\001\093\000\052\000\081\001\065\000\051\000\070\000\091\000\
\075\000\139\000\094\000\139\000\098\000\139\000\227\000\028\001\
\091\000\029\001\030\001\088\000\228\000\088\000\088\000\230\000\
\232\000\088\000\088\000\120\000\073\000\122\000\123\000\231\000\
\104\000\234\000\104\000\104\000\235\000\091\000\179\000\091\000\
\091\000\088\000\238\000\091\000\091\000\032\001\104\000\240\000\
\082\001\083\001\084\001\085\001\089\000\088\000\089\000\089\000\
\239\000\164\000\166\000\091\000\168\000\254\000\000\001\172\000\
\010\001\173\000\089\000\164\000\164\000\164\000\164\000\091\000\
\020\001\164\000\164\000\164\000\164\000\164\000\164\000\011\001\
\012\001\021\001\190\000\194\000\164\000\164\000\019\001\199\000\
\090\000\023\001\090\000\090\000\001\001\002\001\003\001\004\001\
\037\001\038\001\043\001\046\000\003\000\047\000\090\000\046\001\
\205\000\206\000\207\000\208\000\209\000\210\000\211\000\212\000\
\213\000\214\000\215\000\216\000\217\000\218\000\219\000\220\000\
\012\000\046\000\003\000\047\000\088\000\076\000\088\000\088\000\
\077\000\078\000\050\001\059\001\166\001\060\001\080\000\081\000\
\053\001\065\001\088\000\082\000\066\001\083\000\012\000\084\000\
\067\001\068\001\244\000\069\001\246\000\247\000\087\001\046\000\
\003\000\047\000\251\000\252\000\085\000\049\000\115\001\070\001\
\116\001\081\000\007\001\115\001\009\001\120\001\081\000\168\001\
\089\001\169\001\081\000\048\000\012\000\115\001\072\001\080\000\
\081\000\076\000\093\001\164\001\077\000\078\000\092\001\094\001\
\079\000\086\000\080\000\081\000\199\001\050\000\095\001\082\000\
\097\001\083\000\115\001\084\000\233\001\081\000\046\000\003\000\
\222\001\051\000\046\000\003\000\047\000\099\001\101\001\104\001\
\085\000\049\000\003\000\107\001\108\001\004\000\005\000\006\000\
\007\000\008\000\009\000\012\000\051\001\111\001\110\001\012\000\
\076\000\010\000\011\000\077\000\078\000\123\001\012\000\079\000\
\113\001\080\000\081\000\053\001\138\001\086\000\082\000\140\001\
\083\000\127\001\084\000\128\001\139\001\046\000\003\000\047\000\
\077\001\078\001\142\001\149\001\048\000\155\001\199\000\085\000\
\049\000\158\001\160\001\163\001\172\001\156\001\178\001\174\001\
\177\001\179\001\012\000\181\001\182\001\180\001\050\000\076\000\
\185\001\205\001\077\000\078\000\186\001\191\001\079\000\197\001\
\080\000\081\000\051\000\198\001\086\000\082\000\188\001\083\000\
\195\001\084\000\210\001\140\000\211\001\140\000\140\000\153\001\
\231\001\126\001\215\001\225\001\227\001\228\001\085\000\049\000\
\229\001\140\000\140\000\140\000\022\000\140\000\045\000\140\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\232\001\024\000\141\001\140\000\143\001\050\000\057\000\065\000\
\144\001\146\001\147\001\086\000\148\001\051\000\066\000\119\000\
\220\000\119\000\119\000\119\000\119\000\070\000\179\000\119\000\
\048\000\043\000\098\000\074\000\126\000\119\000\165\001\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\173\001\119\000\
\119\000\101\000\115\000\119\000\119\000\119\000\119\000\119\000\
\119\000\119\000\119\000\119\000\119\000\119\000\119\000\119\000\
\058\000\084\000\086\000\083\000\119\000\119\000\119\000\119\000\
\195\000\091\001\088\001\119\000\119\000\042\001\119\000\196\001\
\209\001\121\001\000\000\175\001\000\000\000\000\000\000\000\000\
\000\000\203\001\000\000\165\001\000\000\000\000\000\000\000\000\
\000\000\000\000\122\000\207\001\122\000\122\000\122\000\122\000\
\000\000\000\000\122\000\000\000\212\001\213\001\000\000\000\000\
\122\000\000\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\000\000\122\000\122\000\000\000\000\000\122\000\122\000\
\122\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\122\000\122\000\122\000\000\000\000\000\000\000\000\000\122\000\
\122\000\122\000\122\000\000\000\000\000\000\000\122\000\122\000\
\120\000\122\000\120\000\120\000\120\000\120\000\000\000\000\000\
\120\000\000\000\000\000\000\000\000\000\000\000\120\000\000\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\000\000\
\120\000\120\000\000\000\000\000\120\000\120\000\120\000\120\000\
\120\000\120\000\120\000\120\000\120\000\120\000\120\000\120\000\
\120\000\000\000\000\000\000\000\000\000\120\000\120\000\120\000\
\120\000\000\000\000\000\000\000\120\000\120\000\123\000\120\000\
\123\000\123\000\123\000\123\000\000\000\000\000\123\000\000\000\
\000\000\000\000\000\000\000\000\123\000\000\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\000\000\123\000\123\000\
\000\000\000\000\123\000\123\000\123\000\123\000\123\000\123\000\
\123\000\123\000\123\000\123\000\123\000\123\000\123\000\000\000\
\000\000\000\000\000\000\123\000\123\000\123\000\123\000\000\000\
\000\000\000\000\123\000\123\000\181\000\123\000\181\000\181\000\
\181\000\181\000\000\000\000\000\181\000\000\000\000\000\000\000\
\000\000\000\000\181\000\000\000\181\000\181\000\181\000\000\000\
\181\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\
\181\000\181\000\181\000\181\000\181\000\181\000\181\000\181\000\
\181\000\181\000\181\000\181\000\181\000\000\000\000\000\000\000\
\000\000\181\000\181\000\181\000\181\000\000\000\000\000\000\000\
\181\000\181\000\185\000\181\000\185\000\185\000\185\000\185\000\
\000\000\000\000\185\000\000\000\000\000\000\000\000\000\000\000\
\185\000\000\000\185\000\185\000\185\000\000\000\185\000\000\000\
\185\000\000\000\000\000\000\000\000\000\000\000\185\000\185\000\
\185\000\185\000\185\000\185\000\185\000\185\000\185\000\185\000\
\185\000\185\000\185\000\000\000\000\000\000\000\000\000\185\000\
\185\000\185\000\185\000\000\000\000\000\000\000\185\000\185\000\
\173\000\185\000\173\000\173\000\173\000\173\000\000\000\000\000\
\173\000\000\000\000\000\000\000\000\000\000\000\173\000\000\000\
\173\000\173\000\173\000\000\000\173\000\000\000\173\000\000\000\
\000\000\000\000\000\000\000\000\173\000\173\000\173\000\173\000\
\173\000\000\000\000\000\173\000\173\000\173\000\173\000\173\000\
\173\000\000\000\000\000\000\000\000\000\173\000\173\000\173\000\
\000\000\000\000\000\000\000\000\173\000\173\000\164\000\173\000\
\164\000\164\000\164\000\164\000\000\000\000\000\164\000\000\000\
\000\000\000\000\000\000\000\000\164\000\000\000\164\000\164\000\
\164\000\000\000\164\000\000\000\164\000\000\000\000\000\000\000\
\000\000\000\000\164\000\164\000\164\000\164\000\164\000\000\000\
\000\000\164\000\164\000\164\000\164\000\164\000\164\000\000\000\
\000\000\000\000\000\000\000\000\164\000\164\000\000\000\000\000\
\000\000\000\000\164\000\164\000\169\000\164\000\169\000\169\000\
\169\000\169\000\000\000\000\000\169\000\000\000\000\000\000\000\
\000\000\000\000\169\000\000\000\169\000\169\000\169\000\000\000\
\169\000\000\000\169\000\000\000\000\000\000\000\000\000\000\000\
\169\000\169\000\169\000\169\000\169\000\000\000\000\000\169\000\
\169\000\169\000\169\000\169\000\169\000\000\000\000\000\000\000\
\000\000\000\000\169\000\169\000\000\000\000\000\000\000\000\000\
\169\000\169\000\165\000\169\000\165\000\165\000\165\000\165\000\
\000\000\000\000\165\000\000\000\000\000\000\000\000\000\000\000\
\165\000\000\000\165\000\165\000\165\000\000\000\165\000\000\000\
\165\000\000\000\000\000\000\000\000\000\000\000\165\000\165\000\
\165\000\165\000\165\000\000\000\000\000\165\000\165\000\165\000\
\165\000\165\000\165\000\000\000\000\000\000\000\000\000\000\000\
\165\000\165\000\000\000\000\000\000\000\000\000\165\000\165\000\
\166\000\165\000\166\000\166\000\166\000\166\000\000\000\000\000\
\166\000\000\000\000\000\000\000\000\000\000\000\166\000\000\000\
\166\000\166\000\166\000\000\000\166\000\000\000\166\000\000\000\
\000\000\000\000\000\000\000\000\166\000\166\000\166\000\166\000\
\166\000\000\000\000\000\166\000\166\000\166\000\166\000\166\000\
\166\000\000\000\000\000\000\000\000\000\000\000\166\000\166\000\
\000\000\000\000\000\000\000\000\166\000\166\000\168\000\166\000\
\168\000\168\000\168\000\168\000\000\000\000\000\168\000\000\000\
\000\000\000\000\000\000\000\000\168\000\000\000\168\000\168\000\
\168\000\000\000\168\000\000\000\168\000\000\000\000\000\000\000\
\000\000\000\000\168\000\168\000\168\000\168\000\168\000\000\000\
\000\000\168\000\168\000\168\000\168\000\168\000\168\000\000\000\
\000\000\000\000\000\000\000\000\168\000\168\000\000\000\000\000\
\000\000\000\000\168\000\168\000\160\000\168\000\160\000\160\000\
\160\000\160\000\000\000\000\000\160\000\000\000\000\000\000\000\
\000\000\000\000\160\000\000\000\160\000\160\000\160\000\000\000\
\160\000\000\000\160\000\000\000\000\000\000\000\000\000\000\000\
\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\160\000\160\000\160\000\160\000\160\000\000\000\000\000\000\000\
\000\000\000\000\160\000\160\000\000\000\000\000\000\000\000\000\
\160\000\160\000\170\000\160\000\170\000\170\000\170\000\170\000\
\000\000\000\000\170\000\000\000\000\000\000\000\000\000\000\000\
\170\000\000\000\170\000\170\000\170\000\000\000\170\000\000\000\
\170\000\000\000\000\000\000\000\000\000\000\000\170\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\170\000\170\000\
\170\000\170\000\170\000\000\000\000\000\000\000\000\000\000\000\
\170\000\170\000\000\000\000\000\000\000\000\000\170\000\170\000\
\171\000\170\000\171\000\171\000\171\000\171\000\000\000\000\000\
\171\000\000\000\000\000\000\000\000\000\000\000\171\000\000\000\
\171\000\171\000\171\000\000\000\171\000\000\000\171\000\000\000\
\000\000\000\000\000\000\000\000\171\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\171\000\171\000\171\000\171\000\
\171\000\000\000\000\000\000\000\000\000\000\000\171\000\171\000\
\000\000\000\000\000\000\000\000\171\000\171\000\162\000\171\000\
\162\000\162\000\162\000\162\000\000\000\163\000\162\000\163\000\
\163\000\163\000\163\000\000\000\162\000\163\000\162\000\162\000\
\162\000\000\000\162\000\163\000\162\000\163\000\163\000\163\000\
\000\000\163\000\162\000\163\000\000\000\000\000\000\000\000\000\
\000\000\163\000\162\000\162\000\162\000\162\000\162\000\000\000\
\000\000\163\000\163\000\163\000\163\000\163\000\000\000\000\000\
\000\000\000\000\162\000\162\000\000\000\162\000\000\000\000\000\
\000\000\163\000\163\000\158\000\163\000\158\000\158\000\158\000\
\158\000\000\000\159\000\158\000\159\000\159\000\159\000\159\000\
\000\000\158\000\159\000\158\000\158\000\158\000\000\000\158\000\
\159\000\158\000\159\000\159\000\159\000\000\000\159\000\158\000\
\159\000\000\000\000\000\000\000\000\000\000\000\159\000\158\000\
\158\000\158\000\158\000\158\000\000\000\000\000\159\000\159\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\158\000\
\158\000\000\000\158\000\000\000\000\000\000\000\159\000\159\000\
\157\000\159\000\157\000\157\000\157\000\157\000\000\000\161\000\
\157\000\161\000\161\000\161\000\161\000\000\000\157\000\161\000\
\157\000\157\000\157\000\000\000\157\000\161\000\157\000\161\000\
\161\000\161\000\000\000\161\000\157\000\161\000\000\000\000\000\
\000\000\000\000\000\000\161\000\157\000\157\000\000\000\000\000\
\000\000\000\000\000\000\161\000\161\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\157\000\157\000\000\000\157\000\
\000\000\000\000\000\000\161\000\161\000\167\000\161\000\167\000\
\167\000\167\000\167\000\000\000\172\000\167\000\172\000\172\000\
\172\000\172\000\000\000\167\000\172\000\167\000\167\000\167\000\
\000\000\167\000\172\000\167\000\172\000\172\000\172\000\000\000\
\172\000\167\000\172\000\000\000\000\000\000\000\000\000\250\000\
\172\000\000\000\000\000\000\000\000\000\000\000\000\000\125\000\
\126\000\127\000\128\000\129\000\000\000\130\000\000\000\000\000\
\000\000\167\000\167\000\000\000\167\000\000\000\243\000\136\000\
\172\000\172\000\139\000\172\000\125\000\126\000\127\000\128\000\
\129\000\000\000\130\000\131\000\132\000\133\000\134\000\135\000\
\000\000\000\000\245\000\000\000\136\000\137\000\138\000\139\000\
\125\000\126\000\127\000\128\000\129\000\000\000\130\000\131\000\
\132\000\133\000\134\000\135\000\000\000\000\000\057\001\000\000\
\136\000\137\000\138\000\139\000\125\000\126\000\127\000\128\000\
\129\000\000\000\130\000\131\000\132\000\133\000\134\000\135\000\
\000\000\000\000\202\001\000\000\136\000\137\000\138\000\139\000\
\125\000\126\000\127\000\128\000\129\000\000\000\130\000\131\000\
\132\000\133\000\134\000\135\000\000\000\000\000\221\001\000\000\
\136\000\137\000\138\000\139\000\125\000\126\000\127\000\128\000\
\129\000\000\000\130\000\131\000\132\000\133\000\134\000\135\000\
\000\000\000\000\000\000\176\001\136\000\137\000\138\000\139\000\
\125\000\126\000\127\000\128\000\129\000\000\000\130\000\131\000\
\132\000\133\000\134\000\135\000\000\000\000\000\000\000\000\000\
\136\000\137\000\138\000\139\000\125\000\126\000\127\000\128\000\
\129\000\062\001\130\000\131\000\132\000\133\000\134\000\135\000\
\000\000\000\000\000\000\000\000\136\000\137\000\138\000\139\000\
\000\000\000\000\000\000\000\000\000\000\000\000\125\000\126\000\
\127\000\128\000\129\000\249\000\130\000\131\000\132\000\133\000\
\134\000\135\000\000\000\000\000\000\000\000\000\136\000\137\000\
\138\000\139\000\125\000\126\000\127\000\128\000\129\000\000\000\
\130\000\131\000\132\000\133\000\134\000\135\000\000\000\187\001\
\000\000\000\000\136\000\137\000\138\000\139\000\125\000\126\000\
\127\000\128\000\129\000\000\000\130\000\131\000\132\000\133\000\
\134\000\135\000\000\000\000\000\000\000\000\000\136\000\137\000\
\138\000\139\000\124\000\000\000\000\000\013\001\014\001\000\000\
\000\000\000\000\000\000\125\000\126\000\127\000\128\000\129\000\
\000\000\130\000\131\000\132\000\133\000\134\000\135\000\151\000\
\000\000\000\000\000\000\136\000\137\000\138\000\139\000\000\000\
\125\000\126\000\127\000\128\000\129\000\000\000\130\000\131\000\
\132\000\133\000\134\000\135\000\156\000\000\000\000\000\000\000\
\136\000\137\000\138\000\139\000\000\000\125\000\126\000\127\000\
\128\000\129\000\000\000\130\000\131\000\132\000\133\000\134\000\
\135\000\161\000\000\000\000\000\000\000\136\000\137\000\138\000\
\139\000\000\000\125\000\126\000\127\000\128\000\129\000\000\000\
\130\000\131\000\132\000\133\000\134\000\135\000\178\000\000\000\
\000\000\000\000\136\000\137\000\138\000\139\000\000\000\125\000\
\126\000\127\000\128\000\129\000\000\000\130\000\131\000\132\000\
\133\000\134\000\135\000\181\000\000\000\000\000\000\000\136\000\
\137\000\138\000\139\000\000\000\125\000\126\000\127\000\128\000\
\129\000\000\000\130\000\131\000\132\000\133\000\134\000\135\000\
\202\000\000\000\000\000\000\000\136\000\137\000\138\000\139\000\
\000\000\125\000\126\000\127\000\128\000\129\000\000\000\130\000\
\131\000\132\000\133\000\134\000\135\000\071\001\000\000\000\000\
\000\000\136\000\137\000\138\000\139\000\000\000\125\000\126\000\
\127\000\128\000\129\000\000\000\130\000\131\000\132\000\133\000\
\134\000\135\000\073\001\000\000\000\000\000\000\136\000\137\000\
\138\000\139\000\000\000\125\000\126\000\127\000\128\000\129\000\
\000\000\130\000\131\000\132\000\133\000\134\000\135\000\000\000\
\189\001\000\000\000\000\136\000\137\000\138\000\139\000\125\000\
\126\000\127\000\128\000\129\000\000\000\130\000\131\000\132\000\
\133\000\134\000\135\000\000\000\190\001\000\000\000\000\136\000\
\137\000\138\000\139\000\125\000\126\000\127\000\128\000\129\000\
\000\000\130\000\131\000\132\000\133\000\134\000\135\000\000\000\
\000\000\000\000\000\000\136\000\137\000\138\000\139\000\125\000\
\126\000\127\000\128\000\129\000\000\000\130\000\131\000\132\000\
\133\000\134\000\135\000\000\000\000\000\000\000\000\000\136\000\
\137\000\138\000\139\000\000\000\000\000\000\000\013\001\014\001\
\184\000\184\000\184\000\184\000\184\000\181\000\181\000\184\000\
\184\000\184\000\184\000\184\000\184\000\000\000\000\000\000\000\
\000\000\184\000\184\000\184\000\184\000\206\001\125\000\126\000\
\127\000\128\000\129\000\000\000\130\000\131\000\132\000\133\000\
\134\000\135\000\000\000\000\000\000\000\000\000\136\000\137\000\
\138\000\139\000\125\000\126\000\127\000\128\000\129\000\000\000\
\130\000\131\000\132\000\133\000\134\000\135\000\000\000\000\000\
\000\000\000\000\136\000\137\000\138\000\139\000\241\000\126\000\
\127\000\128\000\129\000\000\000\130\000\131\000\132\000\133\000\
\134\000\135\000\000\000\000\000\000\000\000\000\136\000\137\000\
\138\000\139\000\125\000\126\000\127\000\128\000\129\000\000\000\
\130\000\000\000\000\000\133\000\134\000\135\000\000\000\000\000\
\000\000\000\000\136\000\137\000\138\000\139\000\125\000\126\000\
\127\000\128\000\129\000\000\000\130\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\136\000\137\000\
\138\000\139\000"

let yycheck = "\001\000\
\030\000\155\000\171\000\150\000\160\000\109\000\108\000\056\001\
\177\000\058\001\022\000\066\001\033\001\065\001\043\001\184\000\
\068\001\046\001\030\000\021\000\022\000\050\001\068\001\070\001\
\224\000\225\000\028\000\003\000\180\000\032\001\140\000\038\001\
\031\001\053\001\048\001\034\001\030\000\036\001\037\001\239\000\
\048\001\017\000\041\001\023\001\051\001\065\001\045\001\048\001\
\032\001\002\001\030\001\001\001\002\001\003\001\047\001\057\000\
\058\000\059\000\034\000\058\001\062\000\037\000\055\001\048\001\
\066\000\086\001\010\001\011\001\012\001\022\001\119\001\032\001\
\022\001\087\001\076\000\078\001\079\001\030\001\058\001\087\001\
\234\000\032\001\238\000\230\000\001\000\254\000\087\001\032\001\
\087\001\033\001\002\001\138\001\002\001\037\001\078\001\079\001\
\080\001\109\000\042\001\243\000\204\000\245\000\087\001\105\000\
\000\001\058\001\250\000\109\000\058\001\059\001\022\001\035\001\
\022\001\025\001\026\001\038\001\028\001\078\001\079\001\080\001\
\030\001\033\001\151\001\152\001\153\001\180\001\178\001\078\001\
\079\001\080\001\035\001\241\000\178\001\078\001\079\001\080\001\
\060\001\048\001\065\001\141\000\053\001\171\000\001\001\038\001\
\146\000\011\001\012\001\177\000\049\001\001\001\002\001\003\001\
\032\001\080\001\184\000\060\001\051\001\159\000\160\000\171\000\
\002\001\073\001\048\001\075\001\076\001\177\000\048\001\002\001\
\002\001\057\001\022\001\220\001\184\000\019\001\086\001\027\001\
\087\001\171\000\030\001\031\001\022\001\230\001\034\001\177\000\
\036\001\037\001\038\001\022\001\048\001\041\001\184\000\043\001\
\204\000\045\001\001\001\002\001\003\001\038\001\078\001\079\001\
\002\001\087\001\204\000\048\001\048\001\087\001\058\001\059\001\
\065\001\066\001\051\001\048\001\019\001\020\001\021\001\022\001\
\038\001\048\001\039\001\067\001\087\001\223\000\224\000\225\000\
\254\000\113\001\139\001\087\001\116\001\051\001\242\000\243\000\
\120\001\245\000\039\001\087\001\238\000\239\000\250\000\093\001\
\038\001\032\001\254\000\087\001\051\001\052\001\038\001\101\001\
\242\000\243\000\087\001\245\000\059\001\051\001\038\001\051\001\
\250\000\060\001\049\001\051\001\254\000\032\001\069\001\054\001\
\010\001\011\001\012\001\051\001\022\001\023\001\024\001\215\001\
\079\001\027\001\081\001\029\001\030\001\065\001\049\001\053\001\
\038\001\169\001\048\001\054\001\031\001\002\001\199\001\033\001\
\027\001\077\001\044\001\037\001\080\001\051\001\040\001\042\001\
\042\001\053\001\198\001\197\001\191\001\057\001\078\001\079\001\
\080\001\001\001\002\001\003\001\022\001\065\001\039\001\067\001\
\068\001\201\001\202\001\053\001\065\001\205\001\206\001\057\001\
\048\001\067\001\001\001\002\001\003\001\023\001\022\001\065\001\
\077\001\022\001\068\001\080\001\030\001\221\001\049\001\084\001\
\085\001\052\001\048\001\054\001\019\001\020\001\021\001\022\001\
\034\001\233\001\036\001\037\001\049\001\001\001\002\001\003\001\
\039\001\054\001\049\001\051\001\022\001\113\001\048\001\054\001\
\116\001\039\001\022\001\059\001\120\001\139\001\049\001\050\001\
\002\001\052\001\022\001\054\001\051\001\069\001\060\001\113\001\
\049\001\050\001\116\001\048\001\059\001\054\001\120\001\139\001\
\034\001\081\001\039\001\161\001\022\001\038\001\069\001\025\001\
\026\001\050\001\028\001\052\001\039\001\054\001\002\001\051\001\
\079\001\139\001\081\001\048\001\051\001\161\001\053\001\059\001\
\048\001\155\001\057\001\003\001\050\001\169\001\052\001\038\001\
\054\001\069\001\049\001\049\001\049\001\022\001\178\001\161\001\
\025\001\199\001\023\000\028\001\025\000\081\001\027\000\169\001\
\029\000\050\001\031\000\052\001\033\000\054\001\002\001\073\001\
\178\001\075\001\076\001\199\001\046\001\201\001\202\001\038\001\
\002\001\205\001\206\001\048\000\198\001\050\000\051\000\049\001\
\034\001\038\001\036\001\037\001\002\001\199\001\032\001\201\001\
\202\001\221\001\038\001\205\001\206\001\215\001\048\001\002\001\
\073\001\074\001\075\001\076\001\034\001\233\001\036\001\037\001\
\049\001\078\000\079\000\221\001\081\000\038\001\038\001\084\000\
\049\001\086\000\048\001\061\001\062\001\063\001\064\001\233\001\
\078\001\067\001\068\001\069\001\070\001\071\001\072\001\049\001\
\049\001\052\001\103\000\104\000\078\001\079\001\050\001\108\000\
\034\001\054\001\036\001\037\001\013\001\014\001\015\001\016\001\
\049\001\033\001\033\001\001\001\002\001\003\001\048\001\033\001\
\125\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\135\000\136\000\137\000\138\000\139\000\140\000\
\022\001\001\001\002\001\003\001\034\001\027\001\036\001\037\001\
\030\001\031\001\033\001\039\001\034\001\038\001\036\001\037\001\
\038\001\038\001\048\001\041\001\038\001\043\001\022\001\045\001\
\038\001\038\001\167\000\039\001\169\000\170\000\065\001\001\001\
\002\001\003\001\175\000\176\000\058\001\059\001\034\001\048\001\
\036\001\037\001\183\000\034\001\185\000\036\001\037\001\034\001\
\065\001\036\001\037\001\051\001\022\001\034\001\039\001\036\001\
\037\001\027\001\053\001\059\001\030\001\031\001\039\001\053\001\
\034\001\087\001\036\001\037\001\038\001\069\001\053\001\041\001\
\066\001\043\001\034\001\045\001\036\001\037\001\001\001\002\001\
\003\001\081\001\001\001\002\001\003\001\022\001\053\001\039\001\
\058\001\059\001\002\001\048\001\039\001\005\001\006\001\007\001\
\008\001\009\001\010\001\022\001\241\000\039\001\048\001\022\001\
\027\001\017\001\018\001\030\001\031\001\040\001\022\001\034\001\
\032\001\036\001\037\001\038\001\038\001\087\001\041\001\054\001\
\043\001\039\001\045\001\039\001\038\001\001\001\002\001\003\001\
\013\001\014\001\054\001\002\001\051\001\050\001\019\001\058\001\
\059\001\039\001\039\001\039\001\059\001\056\001\048\001\039\001\
\039\001\039\001\022\001\039\001\039\001\048\001\069\001\027\001\
\065\001\060\001\030\001\031\001\065\001\038\001\034\001\038\001\
\036\001\037\001\081\001\038\001\087\001\041\001\054\001\043\001\
\054\001\045\001\039\001\034\001\039\001\036\001\037\001\080\001\
\048\001\062\001\088\001\039\001\039\001\039\001\058\001\059\001\
\039\001\048\001\049\001\050\001\039\001\052\001\039\001\054\001\
\089\001\090\001\091\001\092\001\093\001\094\001\095\001\096\001\
\048\001\048\001\087\001\066\001\089\001\048\001\048\001\048\001\
\093\001\094\001\095\001\087\001\097\001\039\001\039\001\032\001\
\101\001\034\001\035\001\036\001\037\001\039\001\054\001\040\001\
\039\001\048\001\048\001\039\001\056\001\046\001\115\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\123\001\056\001\
\057\001\048\001\039\001\060\001\061\001\062\001\063\001\064\001\
\065\001\066\001\067\001\068\001\069\001\070\001\071\001\072\001\
\048\001\039\001\039\001\032\001\077\001\078\001\079\001\080\001\
\105\000\020\001\017\001\084\001\085\001\231\000\087\001\155\001\
\180\001\058\001\255\255\125\001\255\255\255\255\255\255\255\255\
\255\255\166\001\255\255\168\001\255\255\255\255\255\255\255\255\
\255\255\255\255\032\001\176\001\034\001\035\001\036\001\037\001\
\255\255\255\255\040\001\255\255\185\001\186\001\255\255\255\255\
\046\001\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\255\255\056\001\057\001\255\255\255\255\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\077\001\
\078\001\079\001\080\001\255\255\255\255\255\255\084\001\085\001\
\032\001\087\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\046\001\255\255\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\056\001\057\001\255\255\255\255\060\001\061\001\062\001\063\001\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\077\001\078\001\079\001\
\080\001\255\255\255\255\255\255\084\001\085\001\032\001\087\001\
\034\001\035\001\036\001\037\001\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\046\001\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\056\001\057\001\
\255\255\255\255\060\001\061\001\062\001\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\077\001\078\001\079\001\080\001\255\255\
\255\255\255\255\084\001\085\001\032\001\087\001\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\255\255\
\255\255\255\255\046\001\255\255\048\001\049\001\050\001\255\255\
\052\001\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\077\001\078\001\079\001\080\001\255\255\255\255\255\255\
\084\001\085\001\032\001\087\001\034\001\035\001\036\001\037\001\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\049\001\050\001\255\255\052\001\255\255\
\054\001\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\062\001\063\001\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\077\001\
\078\001\079\001\080\001\255\255\255\255\255\255\084\001\085\001\
\032\001\087\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\046\001\255\255\
\048\001\049\001\050\001\255\255\052\001\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\062\001\063\001\
\064\001\255\255\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\077\001\078\001\079\001\
\255\255\255\255\255\255\255\255\084\001\085\001\032\001\087\001\
\034\001\035\001\036\001\037\001\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\046\001\255\255\048\001\049\001\
\050\001\255\255\052\001\255\255\054\001\255\255\255\255\255\255\
\255\255\255\255\060\001\061\001\062\001\063\001\064\001\255\255\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\078\001\079\001\255\255\255\255\
\255\255\255\255\084\001\085\001\032\001\087\001\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\255\255\
\255\255\255\255\046\001\255\255\048\001\049\001\050\001\255\255\
\052\001\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\062\001\063\001\064\001\255\255\255\255\067\001\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\078\001\079\001\255\255\255\255\255\255\255\255\
\084\001\085\001\032\001\087\001\034\001\035\001\036\001\037\001\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\049\001\050\001\255\255\052\001\255\255\
\054\001\255\255\255\255\255\255\255\255\255\255\060\001\061\001\
\062\001\063\001\064\001\255\255\255\255\067\001\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\078\001\079\001\255\255\255\255\255\255\255\255\084\001\085\001\
\032\001\087\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\046\001\255\255\
\048\001\049\001\050\001\255\255\052\001\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\060\001\061\001\062\001\063\001\
\064\001\255\255\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\078\001\079\001\
\255\255\255\255\255\255\255\255\084\001\085\001\032\001\087\001\
\034\001\035\001\036\001\037\001\255\255\255\255\040\001\255\255\
\255\255\255\255\255\255\255\255\046\001\255\255\048\001\049\001\
\050\001\255\255\052\001\255\255\054\001\255\255\255\255\255\255\
\255\255\255\255\060\001\061\001\062\001\063\001\064\001\255\255\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\255\255\078\001\079\001\255\255\255\255\
\255\255\255\255\084\001\085\001\032\001\087\001\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\255\255\255\255\255\255\
\255\255\255\255\046\001\255\255\048\001\049\001\050\001\255\255\
\052\001\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\060\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\255\255\078\001\079\001\255\255\255\255\255\255\255\255\
\084\001\085\001\032\001\087\001\034\001\035\001\036\001\037\001\
\255\255\255\255\040\001\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\049\001\050\001\255\255\052\001\255\255\
\054\001\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\255\255\
\078\001\079\001\255\255\255\255\255\255\255\255\084\001\085\001\
\032\001\087\001\034\001\035\001\036\001\037\001\255\255\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\046\001\255\255\
\048\001\049\001\050\001\255\255\052\001\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\060\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\068\001\069\001\070\001\071\001\
\072\001\255\255\255\255\255\255\255\255\255\255\078\001\079\001\
\255\255\255\255\255\255\255\255\084\001\085\001\032\001\087\001\
\034\001\035\001\036\001\037\001\255\255\032\001\040\001\034\001\
\035\001\036\001\037\001\255\255\046\001\040\001\048\001\049\001\
\050\001\255\255\052\001\046\001\054\001\048\001\049\001\050\001\
\255\255\052\001\060\001\054\001\255\255\255\255\255\255\255\255\
\255\255\060\001\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\068\001\069\001\070\001\071\001\072\001\255\255\255\255\
\255\255\255\255\084\001\085\001\255\255\087\001\255\255\255\255\
\255\255\084\001\085\001\032\001\087\001\034\001\035\001\036\001\
\037\001\255\255\032\001\040\001\034\001\035\001\036\001\037\001\
\255\255\046\001\040\001\048\001\049\001\050\001\255\255\052\001\
\046\001\054\001\048\001\049\001\050\001\255\255\052\001\060\001\
\054\001\255\255\255\255\255\255\255\255\255\255\060\001\068\001\
\069\001\070\001\071\001\072\001\255\255\255\255\068\001\069\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\084\001\
\085\001\255\255\087\001\255\255\255\255\255\255\084\001\085\001\
\032\001\087\001\034\001\035\001\036\001\037\001\255\255\032\001\
\040\001\034\001\035\001\036\001\037\001\255\255\046\001\040\001\
\048\001\049\001\050\001\255\255\052\001\046\001\054\001\048\001\
\049\001\050\001\255\255\052\001\060\001\054\001\255\255\255\255\
\255\255\255\255\255\255\060\001\068\001\069\001\255\255\255\255\
\255\255\255\255\255\255\068\001\069\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\084\001\085\001\255\255\087\001\
\255\255\255\255\255\255\084\001\085\001\032\001\087\001\034\001\
\035\001\036\001\037\001\255\255\032\001\040\001\034\001\035\001\
\036\001\037\001\255\255\046\001\040\001\048\001\049\001\050\001\
\255\255\052\001\046\001\054\001\048\001\049\001\050\001\255\255\
\052\001\060\001\054\001\255\255\255\255\255\255\255\255\032\001\
\060\001\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\062\001\063\001\064\001\065\001\255\255\067\001\255\255\255\255\
\255\255\084\001\085\001\255\255\087\001\255\255\035\001\077\001\
\084\001\085\001\080\001\087\001\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\255\255\255\255\035\001\255\255\077\001\078\001\079\001\080\001\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\068\001\
\069\001\070\001\071\001\072\001\255\255\255\255\035\001\255\255\
\077\001\078\001\079\001\080\001\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\255\255\255\255\035\001\255\255\077\001\078\001\079\001\080\001\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\068\001\
\069\001\070\001\071\001\072\001\255\255\255\255\035\001\255\255\
\077\001\078\001\079\001\080\001\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\255\255\255\255\255\255\036\001\077\001\078\001\079\001\080\001\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\068\001\
\069\001\070\001\071\001\072\001\255\255\255\255\255\255\255\255\
\077\001\078\001\079\001\080\001\061\001\062\001\063\001\064\001\
\065\001\040\001\067\001\068\001\069\001\070\001\071\001\072\001\
\255\255\255\255\255\255\255\255\077\001\078\001\079\001\080\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\062\001\
\063\001\064\001\065\001\046\001\067\001\068\001\069\001\070\001\
\071\001\072\001\255\255\255\255\255\255\255\255\077\001\078\001\
\079\001\080\001\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\068\001\069\001\070\001\071\001\072\001\255\255\054\001\
\255\255\255\255\077\001\078\001\079\001\080\001\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\255\255\255\255\255\255\255\255\077\001\078\001\
\079\001\080\001\052\001\255\255\255\255\084\001\085\001\255\255\
\255\255\255\255\255\255\061\001\062\001\063\001\064\001\065\001\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\052\001\
\255\255\255\255\255\255\077\001\078\001\079\001\080\001\255\255\
\061\001\062\001\063\001\064\001\065\001\255\255\067\001\068\001\
\069\001\070\001\071\001\072\001\052\001\255\255\255\255\255\255\
\077\001\078\001\079\001\080\001\255\255\061\001\062\001\063\001\
\064\001\065\001\255\255\067\001\068\001\069\001\070\001\071\001\
\072\001\052\001\255\255\255\255\255\255\077\001\078\001\079\001\
\080\001\255\255\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\068\001\069\001\070\001\071\001\072\001\052\001\255\255\
\255\255\255\255\077\001\078\001\079\001\080\001\255\255\061\001\
\062\001\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\071\001\072\001\052\001\255\255\255\255\255\255\077\001\
\078\001\079\001\080\001\255\255\061\001\062\001\063\001\064\001\
\065\001\255\255\067\001\068\001\069\001\070\001\071\001\072\001\
\052\001\255\255\255\255\255\255\077\001\078\001\079\001\080\001\
\255\255\061\001\062\001\063\001\064\001\065\001\255\255\067\001\
\068\001\069\001\070\001\071\001\072\001\052\001\255\255\255\255\
\255\255\077\001\078\001\079\001\080\001\255\255\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\052\001\255\255\255\255\255\255\077\001\078\001\
\079\001\080\001\255\255\061\001\062\001\063\001\064\001\065\001\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\054\001\255\255\255\255\077\001\078\001\079\001\080\001\061\001\
\062\001\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\071\001\072\001\255\255\054\001\255\255\255\255\077\001\
\078\001\079\001\080\001\061\001\062\001\063\001\064\001\065\001\
\255\255\067\001\068\001\069\001\070\001\071\001\072\001\255\255\
\255\255\255\255\255\255\077\001\078\001\079\001\080\001\061\001\
\062\001\063\001\064\001\065\001\255\255\067\001\068\001\069\001\
\070\001\071\001\072\001\255\255\255\255\255\255\255\255\077\001\
\078\001\079\001\080\001\255\255\255\255\255\255\084\001\085\001\
\060\001\061\001\062\001\063\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\071\001\072\001\255\255\255\255\255\255\
\255\255\077\001\078\001\079\001\080\001\060\001\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\255\255\255\255\255\255\255\255\077\001\078\001\
\079\001\080\001\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\068\001\069\001\070\001\071\001\072\001\255\255\255\255\
\255\255\255\255\077\001\078\001\079\001\080\001\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\068\001\069\001\070\001\
\071\001\072\001\255\255\255\255\255\255\255\255\077\001\078\001\
\079\001\080\001\061\001\062\001\063\001\064\001\065\001\255\255\
\067\001\255\255\255\255\070\001\071\001\072\001\255\255\255\255\
\255\255\255\255\077\001\078\001\079\001\080\001\061\001\062\001\
\063\001\064\001\065\001\255\255\067\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\077\001\078\001\
\079\001\080\001"

let yynames_const = "\
  S_VERSION\000\
  S_PARAMETER\000\
  S_METHODS\000\
  S_SIGNALS\000\
  S_INTERFACE\000\
  S_MAPPING\000\
  S_ACCESS\000\
  S_PROCESS\000\
  S_DATA\000\
  S_CONTROL\000\
  S_IMPORT\000\
  S_SET\000\
  S_TOP\000\
  S_CHECK\000\
  LHS\000\
  RHS\000\
  LRHS\000\
  VAR\000\
  SIGNAL\000\
  CONSTANT\000\
  LOGIC\000\
  NATURAL\000\
  VARIABLE\000\
  BOOL\000\
  SHARED\000\
  FOREACH\000\
  FOR\000\
  DO\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ELSIF\000\
  BEGIN\000\
  END\000\
  WHEN\000\
  WAIT\000\
  UNTIL\000\
  SEQUENCE\000\
  TYPE\000\
  CASE\000\
  IS\000\
  ARRAY\000\
  EOI\000\
  SEP1\000\
  SEP2\000\
  LPAREN\000\
  RPAREN\000\
  LBRAK\000\
  RBRAK\000\
  LCURL\000\
  RCURL\000\
  ACC\000\
  NULL\000\
  OTHERS\000\
  FOLLOW\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  ASSIGN\000\
  ASSIGN2\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVI\000\
  EXP2\000\
  INT\000\
  CHAR\000\
  STRINGS\000\
  SIGNED\000\
  CONC\000\
  AND\000\
  OR\000\
  XOR\000\
  NOT\000\
  COMMENT\000\
  TO\000\
  DOWNTO\000\
  OUT\000\
  WITH\000\
  OF\000\
  NSEC\000\
  USEC\000\
  MSEC\000\
  SEC\000\
  HZ\000\
  KHZ\000\
  MHZ\000\
  GHZ\000\
  "

let yynames_block = "\
  STRING\000\
  IDENT\000\
  VALUE\000\
  PARAM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'section) in
    Obj.repr((
# 57 "../../src/ml/cp_parser_emi.mly"
                    _1 ) : Cp_syntax.emi_syntax))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 61 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.TM_version _2 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'params) in
    Obj.repr((
# 62 "../../src/ml/cp_parser_emi.mly"
                                     Cp_syntax.TM_parameter _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'methods) in
    Obj.repr((
# 63 "../../src/ml/cp_parser_emi.mly"
                                    Cp_syntax.TM_methods _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _6 = (peek_val parser_env 1 : 'methods) in
    Obj.repr((
# 64 "../../src/ml/cp_parser_emi.mly"
                                                       Cp_syntax.TM_conditional (_3,Cp_syntax.TM_methods _6) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'checks) in
    Obj.repr((
# 65 "../../src/ml/cp_parser_emi.mly"
                                 Cp_syntax.TM_check _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _6 = (peek_val parser_env 1 : 'checks) in
    Obj.repr((
# 66 "../../src/ml/cp_parser_emi.mly"
                                                    Cp_syntax.TM_conditional (_3,Cp_syntax.TM_check _6) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'interfaces) in
    Obj.repr((
# 67 "../../src/ml/cp_parser_emi.mly"
                                         Cp_syntax.TM_interface _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _6 = (peek_val parser_env 1 : 'interfaces) in
    Obj.repr((
# 68 "../../src/ml/cp_parser_emi.mly"
                                                            Cp_syntax.TM_conditional (_3,Cp_syntax.TM_interface _6) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 5 : 'expr) in
    Obj.repr((
# 69 "../../src/ml/cp_parser_emi.mly"
                                                          Cp_syntax.TM_conditional (_3,Cp_syntax.TM_interface []) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'signals) in
    Obj.repr((
# 70 "../../src/ml/cp_parser_emi.mly"
                                    Cp_syntax.TM_signals _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _6 = (peek_val parser_env 1 : 'signals) in
    Obj.repr((
# 71 "../../src/ml/cp_parser_emi.mly"
                                                       Cp_syntax.TM_conditional (_3,Cp_syntax.TM_signals _6) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'mappings) in
    Obj.repr((
# 72 "../../src/ml/cp_parser_emi.mly"
                                     Cp_syntax.TM_mappings _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _6 = (peek_val parser_env 1 : 'mappings) in
    Obj.repr((
# 73 "../../src/ml/cp_parser_emi.mly"
                                                        Cp_syntax.TM_conditional (_3,Cp_syntax.TM_mappings _6) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 5 : 'expr) in
    Obj.repr((
# 74 "../../src/ml/cp_parser_emi.mly"
                                                        Cp_syntax.TM_conditional (_3,Cp_syntax.TM_mappings []) ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 75 "../../src/ml/cp_parser_emi.mly"
                                     Cp_syntax.TM_top _3 ) : 'section))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _6 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 76 "../../src/ml/cp_parser_emi.mly"
                                                        Cp_syntax.TM_conditional (_3,Cp_syntax.TM_top _6) ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _5 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 77 "../../src/ml/cp_parser_emi.mly"
                                                   Cp_syntax.TM_process (_1,_5) ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 8 : 'name) in
    let _5 = (peek_val parser_env 4 : 'expr) in
    let _8 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 78 "../../src/ml/cp_parser_emi.mly"
                                                                      Cp_syntax.TM_conditional (_5,Cp_syntax.TM_process (_1,_8)) ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _5 = (peek_val parser_env 1 : 'access) in
    Obj.repr((
# 79 "../../src/ml/cp_parser_emi.mly"
                                            Cp_syntax.TM_access (_1, _5) ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 8 : 'name) in
    let _5 = (peek_val parser_env 4 : 'expr) in
    let _8 = (peek_val parser_env 1 : 'access) in
    Obj.repr((
# 80 "../../src/ml/cp_parser_emi.mly"
                                                               Cp_syntax.TM_conditional (_5, Cp_syntax.TM_access (_1, _8)) ) : 'section))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'param_def) in
    Obj.repr((
# 84 "../../src/ml/cp_parser_emi.mly"
                    [_1] ) : 'params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'param_def) in
    let _3 = (peek_val parser_env 0 : 'params) in
    Obj.repr((
# 85 "../../src/ml/cp_parser_emi.mly"
                           _1 :: _3 ) : 'params))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'param) in
    Obj.repr((
# 89 "../../src/ml/cp_parser_emi.mly"
            Cp_syntax.TM_param_def (_1,[]) ) : 'param_def))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'param) in
    let _3 = (peek_val parser_env 0 : 'attr_list) in
    Obj.repr((
# 90 "../../src/ml/cp_parser_emi.mly"
                           Cp_syntax.TM_param_def (_1,_3) ) : 'param_def))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 95 "../../src/ml/cp_parser_emi.mly"
           _1 ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 96 "../../src/ml/cp_parser_emi.mly"
                       Cp_syntax.TM_assign ('s',_1,_3) ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _3 = (peek_val parser_env 3 : 'range) in
    let _6 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 97 "../../src/ml/cp_parser_emi.mly"
                                         Cp_syntax.TM_assign ('s',Cp_syntax.TM_sub (_1,_3),_6) ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _3 = (peek_val parser_env 3 : 'arg_list) in
    let _6 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 98 "../../src/ml/cp_parser_emi.mly"
                                            Cp_syntax.TM_assign ('s',Cp_syntax.TM_sub (_1,Cp_syntax.TM_list _3), _6) ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'name) in
    let _3 = (peek_val parser_env 1 : 'range) in
    Obj.repr((
# 99 "../../src/ml/cp_parser_emi.mly"
                             Cp_syntax.TM_sub (_1,_3)  ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'name) in
    let _3 = (peek_val parser_env 1 : 'arg_list) in
    Obj.repr((
# 100 "../../src/ml/cp_parser_emi.mly"
                                Cp_syntax.TM_sub (_1,Cp_syntax.TM_list _3)  ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _3 = (peek_val parser_env 3 : 'range) in
    let _5 = (peek_val parser_env 1 : 'data_type) in
    Obj.repr((
# 101 "../../src/ml/cp_parser_emi.mly"
                                            Cp_syntax.TM_type (_5,Cp_syntax.TM_sub (_1,_3))  ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 7 : 'name) in
    let _3 = (peek_val parser_env 5 : 'range) in
    let _5 = (peek_val parser_env 3 : 'data_type) in
    let _8 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 102 "../../src/ml/cp_parser_emi.mly"
                                                        Cp_syntax.TM_assign ('s',Cp_syntax.TM_type (_5,Cp_syntax.TM_sub (_1,_3)),_8) ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 5 : 'name) in
    let _3 = (peek_val parser_env 3 : 'arg_list) in
    let _5 = (peek_val parser_env 1 : 'data_type) in
    Obj.repr((
# 103 "../../src/ml/cp_parser_emi.mly"
                                               Cp_syntax.TM_type (_5,Cp_syntax.TM_sub (_1,Cp_syntax.TM_list _3))  ) : 'param))
; (fun parser_env ->
    let _1 = (peek_val parser_env 7 : 'name) in
    let _3 = (peek_val parser_env 5 : 'arg_list) in
    let _5 = (peek_val parser_env 3 : 'data_type) in
    let _8 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 104 "../../src/ml/cp_parser_emi.mly"
                                                           Cp_syntax.TM_assign ('s',Cp_syntax.TM_type (_5,Cp_syntax.TM_sub(_1,Cp_syntax.TM_list _3)), _8) ) : 'param))
; (fun parser_env ->
    Obj.repr((
# 108 "../../src/ml/cp_parser_emi.mly"
            "logic" ) : 'data_type))
; (fun parser_env ->
    Obj.repr((
# 109 "../../src/ml/cp_parser_emi.mly"
             "int" ) : 'data_type))
; (fun parser_env ->
    Obj.repr((
# 110 "../../src/ml/cp_parser_emi.mly"
          "natural" ) : 'data_type))
; (fun parser_env ->
    Obj.repr((
# 111 "../../src/ml/cp_parser_emi.mly"
           "bool" ) : 'data_type))
; (fun parser_env ->
    Obj.repr((
# 112 "../../src/ml/cp_parser_emi.mly"
           "char" ) : 'data_type))
; (fun parser_env ->
    Obj.repr((
# 113 "../../src/ml/cp_parser_emi.mly"
              "string" ) : 'data_type))
; (fun parser_env ->
    Obj.repr((
# 114 "../../src/ml/cp_parser_emi.mly"
          "var" ) : 'data_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 118 "../../src/ml/cp_parser_emi.mly"
            [Cp_syntax.TM_ident _1] ) : 'attr_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : 'attr_list) in
    Obj.repr((
# 119 "../../src/ml/cp_parser_emi.mly"
                          (Cp_syntax.TM_ident _1) :: _3 ) : 'attr_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'method_decl) in
    Obj.repr((
# 122 "../../src/ml/cp_parser_emi.mly"
                      [_1] ) : 'methods))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'method_decl) in
    let _3 = (peek_val parser_env 0 : 'methods) in
    Obj.repr((
# 123 "../../src/ml/cp_parser_emi.mly"
                              _1 :: _3 ) : 'methods))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'func) in
    Obj.repr((
# 127 "../../src/ml/cp_parser_emi.mly"
            _1 ) : 'method_decl))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'check) in
    Obj.repr((
# 131 "../../src/ml/cp_parser_emi.mly"
                [_1] ) : 'checks))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'check) in
    let _3 = (peek_val parser_env 0 : 'checks) in
    Obj.repr((
# 132 "../../src/ml/cp_parser_emi.mly"
                       _1 :: _3 ) : 'checks))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 137 "../../src/ml/cp_parser_emi.mly"
           _1 ) : 'check))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'signal_decl) in
    Obj.repr((
# 141 "../../src/ml/cp_parser_emi.mly"
                      [_1] ) : 'signals))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'signal_decl) in
    let _3 = (peek_val parser_env 0 : 'signals) in
    Obj.repr((
# 142 "../../src/ml/cp_parser_emi.mly"
                              _1 :: _3 ) : 'signals))
; (fun parser_env ->
    Obj.repr((
# 146 "../../src/ml/cp_parser_emi.mly"
         Cp_syntax.TM_type ("in",Cp_syntax.TM_empty) ) : 'sig_dir))
; (fun parser_env ->
    Obj.repr((
# 147 "../../src/ml/cp_parser_emi.mly"
          Cp_syntax.TM_type ("out",Cp_syntax.TM_empty) ) : 'sig_dir))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 151 "../../src/ml/cp_parser_emi.mly"
                 Cp_syntax.TM_signal ('s',Cp_syntax.TM_var _2,Cp_syntax.TM_empty,Cp_syntax.TM_empty) ) : 'signal_decl))
; (fun parser_env ->
    let _3 = (peek_val parser_env 6 : Cp_syntax.file_pos*string) in
    let _5 = (peek_val parser_env 4 : 'foreach) in
    let _8 = (peek_val parser_env 1 : 'signals) in
    Obj.repr((
# 152 "../../src/ml/cp_parser_emi.mly"
                                                        Cp_syntax.TM_foreach (Cp_syntax.TM_var _3,_5,_8) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 153 "../../src/ml/cp_parser_emi.mly"
                    Cp_syntax.TM_constant (_2,Cp_syntax.TM_empty,Cp_syntax.TM_empty) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _4 = (peek_val parser_env 2 : 'arg_type) in
    let _6 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 154 "../../src/ml/cp_parser_emi.mly"
                                               Cp_syntax.TM_constant (_2,_4,_6) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 155 "../../src/ml/cp_parser_emi.mly"
                                Cp_syntax.TM_signal ('s',_2,Cp_syntax.TM_empty,_4) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'name) in
    let _4 = (peek_val parser_env 1 : 'sig_dir) in
    let _5 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 156 "../../src/ml/cp_parser_emi.mly"
                                        Cp_syntax.TM_signal ('s',_2,_4,_5) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 157 "../../src/ml/cp_parser_emi.mly"
                                  Cp_syntax.TM_signal ('v',_2,Cp_syntax.TM_empty,_4) ) : 'signal_decl))
; (fun parser_env ->
    let _3 = (peek_val parser_env 2 : 'name) in
    let _5 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 158 "../../src/ml/cp_parser_emi.mly"
                                         Cp_syntax.TM_signal ('V',_3,Cp_syntax.TM_empty,_5) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'name) in
    let _5 = (peek_val parser_env 1 : 'name_list) in
    Obj.repr((
# 159 "../../src/ml/cp_parser_emi.mly"
                                         Cp_syntax.TM_type_decl ('e',_2,_5,Cp_syntax.TM_empty) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 7 : 'name) in
    let _6 = (peek_val parser_env 3 : 'range) in
    let _9 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 160 "../../src/ml/cp_parser_emi.mly"
                                                       Cp_syntax.TM_type_decl ('a',_2,[_6],_9) ) : 'signal_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 161 "../../src/ml/cp_parser_emi.mly"
                 Cp_syntax.TM_type_decl ('e',_2,[],Cp_syntax.TM_empty) ) : 'signal_decl))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'interface_decl) in
    Obj.repr((
# 165 "../../src/ml/cp_parser_emi.mly"
                         [_1] ) : 'interfaces))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'interface_decl) in
    let _3 = (peek_val parser_env 0 : 'interfaces) in
    Obj.repr((
# 166 "../../src/ml/cp_parser_emi.mly"
                                    _1 :: _3 ) : 'interfaces))
; (fun parser_env ->
    let _3 = (peek_val parser_env 6 : Cp_syntax.file_pos*string) in
    let _5 = (peek_val parser_env 4 : 'foreach) in
    let _8 = (peek_val parser_env 1 : 'interfaces) in
    Obj.repr((
# 170 "../../src/ml/cp_parser_emi.mly"
                                                           Cp_syntax.TM_foreach (Cp_syntax.TM_var _3,_5,_8) ) : 'interface_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'name) in
    let _4 = (peek_val parser_env 1 : 'sig_dir) in
    let _5 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 171 "../../src/ml/cp_parser_emi.mly"
                                        Cp_syntax.TM_signal ('s',_2,_4,_5) ) : 'interface_decl))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'mapping_decl) in
    Obj.repr((
# 175 "../../src/ml/cp_parser_emi.mly"
                       [_1] ) : 'mappings))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'mapping_decl) in
    let _3 = (peek_val parser_env 0 : 'mappings) in
    Obj.repr((
# 176 "../../src/ml/cp_parser_emi.mly"
                                _1 :: _3 ) : 'mappings))
; (fun parser_env ->
    let _3 = (peek_val parser_env 6 : Cp_syntax.file_pos*string) in
    let _5 = (peek_val parser_env 4 : 'foreach) in
    let _8 = (peek_val parser_env 1 : 'mappings) in
    Obj.repr((
# 180 "../../src/ml/cp_parser_emi.mly"
                                                         Cp_syntax.TM_foreach (Cp_syntax.TM_var _3,_5,_8) ) : 'mapping_decl))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    let _3 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 181 "../../src/ml/cp_parser_emi.mly"
                       Cp_syntax.TM_mapping (_1,_3) ) : 'mapping_decl))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'access_decl) in
    Obj.repr((
# 185 "../../src/ml/cp_parser_emi.mly"
                      [_1] ) : 'access))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'access_decl) in
    let _3 = (peek_val parser_env 0 : 'access) in
    Obj.repr((
# 186 "../../src/ml/cp_parser_emi.mly"
                             _1 :: _3 ) : 'access))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'data_exprs) in
    Obj.repr((
# 190 "../../src/ml/cp_parser_emi.mly"
                                  Cp_syntax.TM_data _3) : 'access_decl))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'control_exprs) in
    Obj.repr((
# 191 "../../src/ml/cp_parser_emi.mly"
                                        Cp_syntax.TM_control _3) : 'access_decl))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'methods) in
    Obj.repr((
# 192 "../../src/ml/cp_parser_emi.mly"
                                 Cp_syntax.TM_import _3) : 'access_decl))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'data_exprs) in
    Obj.repr((
# 193 "../../src/ml/cp_parser_emi.mly"
                                 Cp_syntax.TM_set _3) : 'access_decl))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 197 "../../src/ml/cp_parser_emi.mly"
                Cp_syntax.TM_var _2 ) : 'foreach))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'foreach) in
    let _3 = (peek_val parser_env 0 : 'foreach) in
    Obj.repr((
# 198 "../../src/ml/cp_parser_emi.mly"
                          Cp_syntax.TM_expr ("and",_1,_3) ) : 'foreach))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'foreach) in
    let _3 = (peek_val parser_env 0 : 'foreach) in
    Obj.repr((
# 199 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.TM_expr ("or",_1,_3) ) : 'foreach))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'foreach) in
    let _3 = (peek_val parser_env 0 : 'foreach) in
    Obj.repr((
# 200 "../../src/ml/cp_parser_emi.mly"
                          Cp_syntax.TM_expr ("xor",_1,_3) ) : 'foreach))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'data_expr) in
    Obj.repr((
# 204 "../../src/ml/cp_parser_emi.mly"
                    [_1] ) : 'data_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'data_expr) in
    let _3 = (peek_val parser_env 0 : 'data_exprs) in
    Obj.repr((
# 205 "../../src/ml/cp_parser_emi.mly"
                               _1 :: _3 ) : 'data_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'control_expr) in
    Obj.repr((
# 208 "../../src/ml/cp_parser_emi.mly"
                       [_1] ) : 'control_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'control_expr) in
    let _3 = (peek_val parser_env 0 : 'control_exprs) in
    Obj.repr((
# 209 "../../src/ml/cp_parser_emi.mly"
                                     _1 :: _3 ) : 'control_exprs))
; (fun parser_env ->
    let _1 = (peek_val parser_env 6 : 'element) in
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _5 = (peek_val parser_env 2 : 'expr) in
    let _7 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 213 "../../src/ml/cp_parser_emi.mly"
                                             Cp_syntax.TM_cond_assign (_1,_3,_5,_7) ) : 'data_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'element) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 214 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.TM_assign ('s',_1,_3) ) : 'data_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'element) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 215 "../../src/ml/cp_parser_emi.mly"
                          Cp_syntax.TM_assign ('v',_1,_3) ) : 'data_expr))
; (fun parser_env ->
    Obj.repr((
# 216 "../../src/ml/cp_parser_emi.mly"
          Cp_syntax.TM_empty ) : 'data_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'func) in
    Obj.repr((
# 217 "../../src/ml/cp_parser_emi.mly"
          _1 ) : 'data_expr))
; (fun parser_env ->
    let _4 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 221 "../../src/ml/cp_parser_emi.mly"
                                 [Cp_syntax.TM_if (Cp_syntax.TM_empty,_4,[])]) : 'ifothers))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'expr) in
    let _4 = (peek_val parser_env 1 : 'block_instr) in
    let _5 = (peek_val parser_env 0 : 'ifseq) in
    Obj.repr((
# 224 "../../src/ml/cp_parser_emi.mly"
                                     (Cp_syntax.TM_if (_2,_4,[])) :: _5) : 'ifseq))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'expr) in
    let _4 = (peek_val parser_env 1 : 'block_instr) in
    let _5 = (peek_val parser_env 0 : 'ifseq) in
    Obj.repr((
# 225 "../../src/ml/cp_parser_emi.mly"
                                        (Cp_syntax.TM_if (_2,_4,[])) :: _5 ) : 'ifseq))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'expr) in
    let _4 = (peek_val parser_env 1 : 'block_instr) in
    let _5 = (peek_val parser_env 0 : 'ifothers) in
    Obj.repr((
# 226 "../../src/ml/cp_parser_emi.mly"
                                        (Cp_syntax.TM_if (_2,_4,[])) :: _5) : 'ifseq))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'expr) in
    let _4 = (peek_val parser_env 1 : 'block_instr) in
    let _5 = (peek_val parser_env 0 : 'ifothers) in
    Obj.repr((
# 227 "../../src/ml/cp_parser_emi.mly"
                                           (Cp_syntax.TM_if (_2,_4,[])) :: _5 ) : 'ifseq))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'expr) in
    let _4 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 228 "../../src/ml/cp_parser_emi.mly"
                                  [Cp_syntax.TM_if (_2,_4,[])]) : 'ifseq))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'expr) in
    let _4 = (peek_val parser_env 2 : 'block_instr) in
    let _6 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 229 "../../src/ml/cp_parser_emi.mly"
                                                   [Cp_syntax.TM_if (_2,_4,_6)]) : 'ifseq))
; (fun parser_env ->
    let _3 = (peek_val parser_env 3 : 'expr) in
    let _5 = (peek_val parser_env 1 : 'block_instr) in
    let _6 = (peek_val parser_env 0 : 'ifseq) in
    Obj.repr((
# 230 "../../src/ml/cp_parser_emi.mly"
                                          (Cp_syntax.TM_if (_3,_5,[])) :: _6 ) : 'ifseq))
; (fun parser_env ->
    let _3 = (peek_val parser_env 2 : 'expr) in
    let _5 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 231 "../../src/ml/cp_parser_emi.mly"
                                    [Cp_syntax.TM_if (_3,_5,[])]) : 'ifseq))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : 'expr) in
    let _5 = (peek_val parser_env 2 : 'block_instr) in
    let _7 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 232 "../../src/ml/cp_parser_emi.mly"
                                                     [Cp_syntax.TM_if (_3,_5,_7)]) : 'ifseq))
; (fun parser_env ->
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 236 "../../src/ml/cp_parser_emi.mly"
                    Cp_syntax.TM_wait ("for",_3) ) : 'control_expr))
; (fun parser_env ->
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 237 "../../src/ml/cp_parser_emi.mly"
                      Cp_syntax.TM_wait ("until",_3) ) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'expr) in
    let _4 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 238 "../../src/ml/cp_parser_emi.mly"
                               Cp_syntax.TM_if (_2,_4,[])) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'expr) in
    let _4 = (peek_val parser_env 2 : 'block_instr) in
    let _6 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 239 "../../src/ml/cp_parser_emi.mly"
                                                Cp_syntax.TM_if (_2,_4,_6)) : 'control_expr))
; (fun parser_env ->
    let _4 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 240 "../../src/ml/cp_parser_emi.mly"
                                 Cp_syntax.TM_if (Cp_syntax.TM_empty,_4,[])) : 'control_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'ifseq) in
    Obj.repr((
# 241 "../../src/ml/cp_parser_emi.mly"
            Cp_syntax.TM_seq _1 ) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'expr) in
    let _5 = (peek_val parser_env 1 : 'when_list) in
    Obj.repr((
# 242 "../../src/ml/cp_parser_emi.mly"
                                       Cp_syntax.TM_case (_2,_5) ) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 4 : 'expr) in
    let _4 = (peek_val parser_env 2 : 'range) in
    let _6 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 243 "../../src/ml/cp_parser_emi.mly"
                                       Cp_syntax.TM_for (_2,_4,_6) ) : 'control_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'expr) in
    let _4 = (peek_val parser_env 0 : 'block_instr) in
    Obj.repr((
# 244 "../../src/ml/cp_parser_emi.mly"
                               Cp_syntax.TM_dowith (_2,_4) ) : 'control_expr))
; (fun parser_env ->
    Obj.repr((
# 245 "../../src/ml/cp_parser_emi.mly"
           Cp_syntax.TM_empty ) : 'control_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'instruction) in
    Obj.repr((
# 249 "../../src/ml/cp_parser_emi.mly"
                  [_1] ) : 'block_instr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 250 "../../src/ml/cp_parser_emi.mly"
                             _2 ) : 'block_instr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'when_expr) in
    Obj.repr((
# 254 "../../src/ml/cp_parser_emi.mly"
                [_1] ) : 'when_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'when_expr) in
    let _2 = (peek_val parser_env 0 : 'when_list) in
    Obj.repr((
# 255 "../../src/ml/cp_parser_emi.mly"
                          _1 :: _2 ) : 'when_list))
; (fun parser_env ->
    let _4 = (peek_val parser_env 1 : 'block_instr) in
    Obj.repr((
# 258 "../../src/ml/cp_parser_emi.mly"
                                        Cp_syntax.TM_when (  Cp_syntax.TM_value ('O',Cp_syntax.nilpos,"others") ,_4) ) : 'when_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : 'expr) in
    let _4 = (peek_val parser_env 1 : 'block_instr) in
    Obj.repr((
# 259 "../../src/ml/cp_parser_emi.mly"
                                      Cp_syntax.TM_when (_2,_4) ) : 'when_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 262 "../../src/ml/cp_parser_emi.mly"
            Cp_syntax.TM_ident _1 ) : 'name))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 263 "../../src/ml/cp_parser_emi.mly"
                Cp_syntax.TM_var _2 ) : 'name))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'var_expr) in
    Obj.repr((
# 264 "../../src/ml/cp_parser_emi.mly"
               Cp_syntax.tm_name_split _1 ) : 'name))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 268 "../../src/ml/cp_parser_emi.mly"
            Cp_syntax.TM_ident _1 ) : 'var_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 269 "../../src/ml/cp_parser_emi.mly"
                Cp_syntax.TM_var _2 ) : 'var_expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : Cp_syntax.file_pos*string) in
    let _3 = (peek_val parser_env 0 : 'var_expr) in
    Obj.repr((
# 270 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.tm_name_concat [Cp_syntax.TM_var _2;_3] ) : 'var_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Cp_syntax.file_pos*string) in
    let _2 = (peek_val parser_env 0 : 'var_expr) in
    Obj.repr((
# 271 "../../src/ml/cp_parser_emi.mly"
                     Cp_syntax.tm_name_concat [Cp_syntax.TM_ident _1;_2] ) : 'var_expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 275 "../../src/ml/cp_parser_emi.mly"
           [_1] ) : 'name_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    let _3 = (peek_val parser_env 0 : 'name_list) in
    Obj.repr((
# 276 "../../src/ml/cp_parser_emi.mly"
                          _1 :: _3 ) : 'name_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'name) in
    let _3 = (peek_val parser_env 1 : 'arg_list) in
    Obj.repr((
# 279 "../../src/ml/cp_parser_emi.mly"
                                  Cp_syntax.TM_func (_1,_3) ) : 'func))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    Obj.repr((
# 280 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.TM_func (_1,[]) ) : 'func))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'arg) in
    Obj.repr((
# 286 "../../src/ml/cp_parser_emi.mly"
          [_1] ) : 'arg_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'arg) in
    let _3 = (peek_val parser_env 0 : 'arg_list) in
    Obj.repr((
# 287 "../../src/ml/cp_parser_emi.mly"
                        _1 :: _3 ) : 'arg_list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 291 "../../src/ml/cp_parser_emi.mly"
           _1 ) : 'arg))
; (fun parser_env ->
    Obj.repr((
# 292 "../../src/ml/cp_parser_emi.mly"
         Cp_syntax.TM_string (Cp_syntax.nilpos,"or") ) : 'arg))
; (fun parser_env ->
    let _3 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 293 "../../src/ml/cp_parser_emi.mly"
                        Cp_syntax.TM_arg ("lhs",_3) ) : 'arg))
; (fun parser_env ->
    let _3 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 294 "../../src/ml/cp_parser_emi.mly"
                        Cp_syntax.TM_arg ("rhs",_3) ) : 'arg))
; (fun parser_env ->
    let _3 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 295 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.TM_arg ("lrhs",_3) ) : 'arg))
; (fun parser_env ->
    Obj.repr((
# 296 "../../src/ml/cp_parser_emi.mly"
          Cp_syntax.TM_arg ("lhs",Cp_syntax.TM_empty) ) : 'arg))
; (fun parser_env ->
    Obj.repr((
# 297 "../../src/ml/cp_parser_emi.mly"
          Cp_syntax.TM_arg ("rhs",Cp_syntax.TM_empty) ) : 'arg))
; (fun parser_env ->
    Obj.repr((
# 298 "../../src/ml/cp_parser_emi.mly"
           Cp_syntax.TM_arg ("lrhs",Cp_syntax.TM_empty) ) : 'arg))
; (fun parser_env ->
    Obj.repr((
# 302 "../../src/ml/cp_parser_emi.mly"
             Cp_syntax.TM_type ("logic", Cp_syntax.TM_empty) ) : 'arg_type))
; (fun parser_env ->
    Obj.repr((
# 303 "../../src/ml/cp_parser_emi.mly"
           Cp_syntax.TM_type ("bool", Cp_syntax.TM_empty) ) : 'arg_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'expr) in
    Obj.repr((
# 304 "../../src/ml/cp_parser_emi.mly"
                            Cp_syntax.TM_type ("int", _3) ) : 'arg_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'expr) in
    Obj.repr((
# 305 "../../src/ml/cp_parser_emi.mly"
                               Cp_syntax.TM_type ("int", _3) ) : 'arg_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'expr) in
    Obj.repr((
# 306 "../../src/ml/cp_parser_emi.mly"
                              Cp_syntax.TM_type ("logic", _3) ) : 'arg_type))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'range) in
    Obj.repr((
# 307 "../../src/ml/cp_parser_emi.mly"
                               Cp_syntax.TM_type ("logic", _3) ) : 'arg_type))
; (fun parser_env ->
    Obj.repr((
# 308 "../../src/ml/cp_parser_emi.mly"
               Cp_syntax.TM_type ("natural", Cp_syntax.TM_empty) ) : 'arg_type))
; (fun parser_env ->
    Obj.repr((
# 309 "../../src/ml/cp_parser_emi.mly"
               Cp_syntax.TM_type ("string", Cp_syntax.TM_empty) ) : 'arg_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 310 "../../src/ml/cp_parser_emi.mly"
           Cp_syntax.TM_type ("type",_1) ) : 'arg_type))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'instruction) in
    Obj.repr((
# 315 "../../src/ml/cp_parser_emi.mly"
                      [_1] ) : 'instructions))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'instruction) in
    let _3 = (peek_val parser_env 0 : 'instructions) in
    Obj.repr((
# 316 "../../src/ml/cp_parser_emi.mly"
                                   _1 :: _3 ) : 'instructions))
; (fun parser_env ->
    let _2 = (peek_val parser_env 2 : 'name) in
    let _4 = (peek_val parser_env 0 : 'arg_type) in
    Obj.repr((
# 320 "../../src/ml/cp_parser_emi.mly"
                                  Cp_syntax.TM_signal ('v',_2,Cp_syntax.TM_empty,_4) ) : 'instruction))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'data_expr) in
    Obj.repr((
# 321 "../../src/ml/cp_parser_emi.mly"
                _1 ) : 'instruction))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'control_expr) in
    Obj.repr((
# 322 "../../src/ml/cp_parser_emi.mly"
                   _1 ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 323 "../../src/ml/cp_parser_emi.mly"
                                      Cp_syntax.TM_seq _3 ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 6 : Cp_syntax.file_pos*string) in
    let _5 = (peek_val parser_env 4 : 'foreach) in
    let _8 = (peek_val parser_env 1 : 'instructions) in
    Obj.repr((
# 324 "../../src/ml/cp_parser_emi.mly"
                                                             Cp_syntax.TM_foreach (Cp_syntax.TM_var _3,_5,_8) ) : 'instruction))
; (fun parser_env ->
    let _3 = (peek_val parser_env 4 : Cp_syntax.file_pos*string) in
    let _5 = (peek_val parser_env 2 : 'foreach) in
    let _7 = (peek_val parser_env 0 : 'instruction) in
    Obj.repr((
# 325 "../../src/ml/cp_parser_emi.mly"
                                                  Cp_syntax.TM_foreach (Cp_syntax.TM_var _3,_5,[_7]) ) : 'instruction))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 331 "../../src/ml/cp_parser_emi.mly"
                       Cp_syntax.TM_expr ("+",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 332 "../../src/ml/cp_parser_emi.mly"
                       Cp_syntax.TM_expr ("^",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 333 "../../src/ml/cp_parser_emi.mly"
                   Cp_syntax.TM_expr ("-",Cp_syntax.TM_empty,_2) ) : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 334 "../../src/ml/cp_parser_emi.mly"
                 Cp_syntax.TM_expr ("not",Cp_syntax.TM_empty,_2) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 335 "../../src/ml/cp_parser_emi.mly"
                        Cp_syntax.TM_expr ("-",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 336 "../../src/ml/cp_parser_emi.mly"
                        Cp_syntax.TM_expr ("*",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 337 "../../src/ml/cp_parser_emi.mly"
                       Cp_syntax.TM_expr ("/",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 338 "../../src/ml/cp_parser_emi.mly"
                     Cp_syntax.TM_expr ("=",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 339 "../../src/ml/cp_parser_emi.mly"
                     Cp_syntax.TM_expr ("<",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 340 "../../src/ml/cp_parser_emi.mly"
                     Cp_syntax.TM_expr (">",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 341 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.TM_expr ("<=",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 342 "../../src/ml/cp_parser_emi.mly"
                      Cp_syntax.TM_expr (">=",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 343 "../../src/ml/cp_parser_emi.mly"
                      Cp_syntax.TM_expr ("/=",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 344 "../../src/ml/cp_parser_emi.mly"
                      Cp_syntax.TM_expr ("and",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 345 "../../src/ml/cp_parser_emi.mly"
                     Cp_syntax.TM_expr ("or",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 346 "../../src/ml/cp_parser_emi.mly"
                      Cp_syntax.TM_expr ("xor",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 347 "../../src/ml/cp_parser_emi.mly"
                       Cp_syntax.TM_expr ("&",_1,_3) ) : 'expr))
; (fun parser_env ->
    let _2 = (peek_val parser_env 1 : 'expr) in
    Obj.repr((
# 348 "../../src/ml/cp_parser_emi.mly"
                           _2 ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'element) in
    Obj.repr((
# 349 "../../src/ml/cp_parser_emi.mly"
                _1 ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'func) in
    Obj.repr((
# 350 "../../src/ml/cp_parser_emi.mly"
             _1 ) : 'expr))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 355 "../../src/ml/cp_parser_emi.mly"
                       Cp_syntax.TM_range ('-',_1,_3) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'expr) in
    let _3 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 356 "../../src/ml/cp_parser_emi.mly"
                   Cp_syntax.TM_range ('+',_1,_3) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'expr) in
    Obj.repr((
# 357 "../../src/ml/cp_parser_emi.mly"
           Cp_syntax.TM_range ('=',_1,_1) ) : 'range))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Cp_syntax.file_pos*string) in
    Obj.repr((
# 361 "../../src/ml/cp_parser_emi.mly"
             Cp_syntax.TM_string (_1) ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 362 "../../src/ml/cp_parser_emi.mly"
           Cp_syntax.TM_value (_1) ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    let _2 = (peek_val parser_env 0 : 'timeunit) in
    Obj.repr((
# 363 "../../src/ml/cp_parser_emi.mly"
                    let k,p,v=_1 in Cp_syntax.TM_value (k,p,Int64.to_string (Int64.mul (Int64.of_string v) _2)) ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : char*Cp_syntax.file_pos*string) in
    let _2 = (peek_val parser_env 0 : 'frequnit) in
    Obj.repr((
# 364 "../../src/ml/cp_parser_emi.mly"
                    let k,p,v=_1 in Cp_syntax.TM_value (k,p,Int64.to_string (Int64.mul (Int64.of_string v) _2)) ) : 'element))
; (fun parser_env ->
    let _3 = (peek_val parser_env 0 : char*Cp_syntax.file_pos*string) in
    Obj.repr((
# 365 "../../src/ml/cp_parser_emi.mly"
                         Cp_syntax.TM_value ('O',(let kind,pos,str = _3 in pos),(let kind,pos,str=_3 in str)) ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 366 "../../src/ml/cp_parser_emi.mly"
          _1 ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : 'name) in
    let _3 = (peek_val parser_env 1 : 'range) in
    Obj.repr((
# 367 "../../src/ml/cp_parser_emi.mly"
                            Cp_syntax.TM_sub (_1,_3)  ) : 'element))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'name) in
    let _3 = (peek_val parser_env 0 : 'name) in
    Obj.repr((
# 368 "../../src/ml/cp_parser_emi.mly"
                   Cp_syntax.TM_sel (_1,_3) ) : 'element))
; (fun parser_env ->
    Obj.repr((
# 372 "../../src/ml/cp_parser_emi.mly"
             Int64.of_string "1" ) : 'timeunit))
; (fun parser_env ->
    Obj.repr((
# 373 "../../src/ml/cp_parser_emi.mly"
             Int64.of_string "1000" ) : 'timeunit))
; (fun parser_env ->
    Obj.repr((
# 374 "../../src/ml/cp_parser_emi.mly"
             Int64.of_string "1000000" ) : 'timeunit))
; (fun parser_env ->
    Obj.repr((
# 375 "../../src/ml/cp_parser_emi.mly"
            Int64.of_string "1000000000" ) : 'timeunit))
; (fun parser_env ->
    Obj.repr((
# 379 "../../src/ml/cp_parser_emi.mly"
           Int64.of_string "1" ) : 'frequnit))
; (fun parser_env ->
    Obj.repr((
# 380 "../../src/ml/cp_parser_emi.mly"
            Int64.of_string "1000" ) : 'frequnit))
; (fun parser_env ->
    Obj.repr((
# 381 "../../src/ml/cp_parser_emi.mly"
            Int64.of_string "1000000" ) : 'frequnit))
; (fun parser_env ->
    Obj.repr((
# 382 "../../src/ml/cp_parser_emi.mly"
            Int64.of_string "1000000000" ) : 'frequnit))
(* Entry main *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Cp_syntax.emi_syntax)
