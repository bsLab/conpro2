--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D114-M15 Genetic size: 2388587
--         Compile date: Wed Oct 21 14:09:57 CEST 2009
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <recv> from module <Com>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity com_recv is
port(
  -- Connections to external objects, components and the outside world
  signal REG_PRO_recv_EXCEPTION_RD: in signed(7 downto 0);
  signal REG_PRO_recv_EXCEPTION_WR: out signed(7 downto 0);
  signal REG_PRO_recv_EXCEPTION_WE: out std_logic;
  signal DEV_data_WR: out std_logic_vector(15 downto 0);
  signal LINK_ln_STOP: out std_logic;
  signal LINK_ln_RE: out std_logic;
  signal LINK_ln_RD: in std_logic_vector(15 downto 0);
  signal LINK_ln_RD_ERR: in std_logic;
  signal LINK_ln_GD: in std_logic;
  signal DEV_data_en_WR: out std_logic;
  signal PRO_recv_ENABLE: in std_logic;
  signal PRO_recv_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end com_recv;
architecture main of com_recv is
  -- Local and temporary data objects
  signal d: std_logic_vector(15 downto 0);
  signal err: std_logic;
  signal LOOP_i_1: signed(7 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_recv_start, -- PROCESS0[:0]
    S_i5_for_loop, -- COUNT_LOOP71698[com.cp:56]
    S_i5_for_loop_cond, -- COUNT_LOOP71698[com.cp:56]
    S_i6_fun, -- FUN64777[com.cp:58]
    S_i7_branch, -- BRANCH72721[com.cp:59]
    S_i8_raise, -- BRANCH_TRUE61374[:0]
    S_i10_bind_to_11, -- ASSIGN47348[com.cp:61]
    S_i5_for_loop_incr, -- COUNT_LOOP71698[com.cp:56]
    S_i2_select, -- FUN13567[com.cp:66]
    S_i3_fun, -- FUN13567[com.cp:66]
    S_i4_assign, -- CASE_BODY11607[com.cp:66]
    S_recv_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_recv_start;
  signal pro_state_next: pro_states := S_recv_start;
  -- Auxilliary toplevel definitions
  constant CONST_I8_1: signed(7 downto 0) := "00000001";
  constant CONST_I8_64: signed(7 downto 0) := "01000000";
  constant CONST_I8_2: signed(7 downto 0) := "00000010";
  constant CONST_I8_0: signed(7 downto 0) := "00000000";
begin
  state_transition: process(
          PRO_recv_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_recv_ENABLE='0' then
        pro_state <= S_recv_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_1,
          LINK_ln_GD,
          err,
          REG_PRO_recv_EXCEPTION_RD,
          pro_state
          )
  begin
    PRO_recv_END <= '0';
    case pro_state is
      when S_recv_start => -- PROCESS0[:0]
        pro_state_next <= S_i5_for_loop;
      when S_i5_for_loop => -- COUNT_LOOP71698[com.cp:56]
        pro_state_next <= S_i5_for_loop_cond;
      when S_i5_for_loop_cond => -- COUNT_LOOP71698[com.cp:56]
        if CONST_I8_64 >= LOOP_i_1 then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_recv_end;
        end if;
      when S_i6_fun => -- FUN64777[com.cp:58]
        if not((LINK_ln_GD) = ('0')) then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_i7_branch;
        end if;
      when S_i7_branch => -- BRANCH72721[com.cp:59]
        if err = '1' then
          pro_state_next <= S_i8_raise;
        else
          pro_state_next <= S_i10_bind_to_11;
        end if;
      when S_i8_raise => -- BRANCH_TRUE61374[:0]
        pro_state_next <= S_i2_select;
      when S_i10_bind_to_11 => -- ASSIGN47348[com.cp:61]
        pro_state_next <= S_i5_for_loop_incr;
      when S_i5_for_loop_incr => -- COUNT_LOOP71698[com.cp:56]
        pro_state_next <= S_i5_for_loop_cond;
      when S_i2_select => -- FUN13567[com.cp:66]
        case REG_PRO_recv_EXCEPTION_RD  is
          when  CONST_I8_2 => pro_state_next <= S_i3_fun;
          when  others => pro_state_next <= S_recv_end;
        end case;
      when S_i3_fun => -- FUN13567[com.cp:66]
        if not((LINK_ln_GD) = ('0')) then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- CASE_BODY11607[com.cp:66]
        pro_state_next <= S_recv_end;
      when S_recv_end => -- PROCESS0[:0]
        pro_state_next <= S_recv_end;
        PRO_recv_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          d,
          pro_state
          )
  begin
    -- Default values
    LINK_ln_RE <= '0';
    REG_PRO_recv_EXCEPTION_WR <= to_signed(0,8);
    REG_PRO_recv_EXCEPTION_WE <= '0';
    DEV_data_en_WR <= '0';
    DEV_data_WR <= "0000000000000000";
    LINK_ln_STOP <= '0';
    case pro_state is
      when S_recv_start => -- PROCESS0[:0]
        null;
      when S_i5_for_loop => -- COUNT_LOOP71698[com.cp:56]
        null;
      when S_i5_for_loop_cond => -- COUNT_LOOP71698[com.cp:56]
        null;
      when S_i6_fun => -- FUN64777[com.cp:58]
        LINK_ln_RE <= LINK_ln_GD;
      when S_i7_branch => -- BRANCH72721[com.cp:59]
        null;
      when S_i8_raise => -- BRANCH_TRUE61374[:0]
        REG_PRO_recv_EXCEPTION_WR <= CONST_I8_2;
        REG_PRO_recv_EXCEPTION_WE <= '1';
      when S_i10_bind_to_11 => -- ASSIGN47348[com.cp:61]
        DEV_data_en_WR <= '1';
        DEV_data_WR <= d;
      when S_i5_for_loop_incr => -- COUNT_LOOP71698[com.cp:56]
        null;
      when S_i2_select => -- FUN13567[com.cp:66]
        null;
      when S_i3_fun => -- FUN13567[com.cp:66]
        LINK_ln_STOP <= LINK_ln_GD;
      when S_i4_assign => -- CASE_BODY11607[com.cp:66]
        REG_PRO_recv_EXCEPTION_WR <= CONST_I8_0;
        REG_PRO_recv_EXCEPTION_WE <= '1';
      when S_recv_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          LINK_ln_RD,
          LINK_ln_RD_ERR,
          LOOP_i_1,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_1 <= to_signed(0,8);
        d <= "0000000000000000";
        err <= '0';
      else
        case pro_state is
          when S_recv_start => -- PROCESS0[:0]
            null;
          when S_i5_for_loop => -- COUNT_LOOP71698[com.cp:56]
            LOOP_i_1 <= CONST_I8_1;
          when S_i5_for_loop_cond => -- COUNT_LOOP71698[com.cp:56]
            null;
          when S_i6_fun => -- FUN64777[com.cp:58]
            d <= LINK_ln_RD;
            err <= LINK_ln_RD_ERR;
          when S_i7_branch => -- BRANCH72721[com.cp:59]
            null;
          when S_i8_raise => -- BRANCH_TRUE61374[:0]
            null;
          when S_i10_bind_to_11 => -- ASSIGN47348[com.cp:61]
            null;
          when S_i5_for_loop_incr => -- COUNT_LOOP71698[com.cp:56]
            LOOP_i_1 <= LOOP_i_1 + CONST_I8_1;
          when S_i2_select => -- FUN13567[com.cp:66]
            null;
          when S_i3_fun => -- FUN13567[com.cp:66]
            null;
          when S_i4_assign => -- CASE_BODY11607[com.cp:66]
            null;
          when S_recv_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
