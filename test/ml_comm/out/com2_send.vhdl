--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D115 Genetic size: 2534927
--         Compile date: Fri Oct 23 13:13:50 CEST 2009
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <send> from module <Com2>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity com2_send is
port(
  -- Connections to external objects, components and the outside world
  signal REG_PRO_send_EXCEPTION_RD: in signed(7 downto 0);
  signal REG_PRO_send_EXCEPTION_WR: out signed(7 downto 0);
  signal REG_PRO_send_EXCEPTION_WE: out std_logic;
  signal RND_rnd_RE: out std_logic;
  signal RND_rnd_RD: in std_logic_vector(7 downto 0);
  signal RND_rnd_GD: in std_logic;
  signal UART_ln_STOP: out std_logic;
  signal UART_ln_WE: out std_logic;
  signal UART_ln_WR: out std_logic_vector(7 downto 0);
  signal UART_ln_WR_ERR: in std_logic;
  signal UART_ln_GD: in std_logic;
  signal PRO_send_ENABLE: in std_logic;
  signal PRO_send_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end com2_send;
architecture main of com2_send is
  -- Local and temporary data objects
  signal d: std_logic_vector(7 downto 0);
  signal r8: std_logic_vector(7 downto 0);
  signal err: std_logic;
  signal LOOP_i_0: signed(7 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_send_start, -- PROCESS0[:0]
    S_i5_for_loop, -- COUNT_LOOP44358[com2.cp:30]
    S_i5_for_loop_cond, -- COUNT_LOOP44358[com2.cp:30]
    S_i6_fun, -- FUN64777[com2.cp:32]
    S_i7_assign, -- ASSIGN17429[com2.cp:33]
    S_i8_fun, -- FUN87455[com2.cp:34]
    S_i9_branch, -- BRANCH2877[com2.cp:35]
    S_i10_raise, -- BRANCH_TRUE85449[:0]
    S_i5_for_loop_incr, -- COUNT_LOOP44358[com2.cp:30]
    S_i2_select, -- FUN13567[com2.cp:40]
    S_i3_fun, -- FUN13567[com2.cp:40]
    S_i4_assign, -- CASE_BODY58851[com2.cp:40]
    S_send_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_send_start;
  signal pro_state_next: pro_states := S_send_start;
  -- Auxilliary toplevel definitions
  constant CONST_I8_1: signed(7 downto 0) := "00000001";
  constant CONST_I8_64: signed(7 downto 0) := "01000000";
  constant CONST_I8_0: signed(7 downto 0) := "00000000";
begin
  state_transition: process(
          PRO_send_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_send_ENABLE='0' then
        pro_state <= S_send_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_0,
          RND_rnd_GD,
          UART_ln_GD,
          err,
          REG_PRO_send_EXCEPTION_RD,
          pro_state
          )
  begin
    PRO_send_END <= '0';
    case pro_state is
      when S_send_start => -- PROCESS0[:0]
        pro_state_next <= S_i5_for_loop;
      when S_i5_for_loop => -- COUNT_LOOP44358[com2.cp:30]
        pro_state_next <= S_i5_for_loop_cond;
      when S_i5_for_loop_cond => -- COUNT_LOOP44358[com2.cp:30]
        if CONST_I8_64 >= LOOP_i_0 then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_send_end;
        end if;
      when S_i6_fun => -- FUN64777[com2.cp:32]
        if not((RND_rnd_GD) = ('0')) then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_i7_assign;
        end if;
      when S_i7_assign => -- ASSIGN17429[com2.cp:33]
        pro_state_next <= S_i8_fun;
      when S_i8_fun => -- FUN87455[com2.cp:34]
        if not((UART_ln_GD) = ('0')) then
          pro_state_next <= S_i8_fun;
        else
          pro_state_next <= S_i9_branch;
        end if;
      when S_i9_branch => -- BRANCH2877[com2.cp:35]
        if err = '1' then
          pro_state_next <= S_i10_raise;
        else
          pro_state_next <= S_i5_for_loop_incr;
        end if;
      when S_i10_raise => -- BRANCH_TRUE85449[:0]
        pro_state_next <= S_i2_select;
      when S_i5_for_loop_incr => -- COUNT_LOOP44358[com2.cp:30]
        pro_state_next <= S_i5_for_loop_cond;
      when S_i2_select => -- FUN13567[com2.cp:40]
        case REG_PRO_send_EXCEPTION_RD  is
          when  CONST_I8_1 => pro_state_next <= S_i3_fun;
          when  others => pro_state_next <= S_send_end;
        end case;
      when S_i3_fun => -- FUN13567[com2.cp:40]
        if not((UART_ln_GD) = ('0')) then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- CASE_BODY58851[com2.cp:40]
        pro_state_next <= S_send_end;
      when S_send_end => -- PROCESS0[:0]
        pro_state_next <= S_send_end;
        PRO_send_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          d,
          pro_state
          )
  begin
    -- Default values
    RND_rnd_RE <= '0';
    UART_ln_WE <= '0';
    UART_ln_WR <= "00000000";
    REG_PRO_send_EXCEPTION_WR <= to_signed(0,8);
    REG_PRO_send_EXCEPTION_WE <= '0';
    UART_ln_STOP <= '0';
    case pro_state is
      when S_send_start => -- PROCESS0[:0]
        null;
      when S_i5_for_loop => -- COUNT_LOOP44358[com2.cp:30]
        null;
      when S_i5_for_loop_cond => -- COUNT_LOOP44358[com2.cp:30]
        null;
      when S_i6_fun => -- FUN64777[com2.cp:32]
        RND_rnd_RE <= RND_rnd_GD;
      when S_i7_assign => -- ASSIGN17429[com2.cp:33]
        null;
      when S_i8_fun => -- FUN87455[com2.cp:34]
        UART_ln_WE <= UART_ln_GD;
        UART_ln_WR <= d;
      when S_i9_branch => -- BRANCH2877[com2.cp:35]
        null;
      when S_i10_raise => -- BRANCH_TRUE85449[:0]
        REG_PRO_send_EXCEPTION_WR <= CONST_I8_1;
        REG_PRO_send_EXCEPTION_WE <= '1';
      when S_i5_for_loop_incr => -- COUNT_LOOP44358[com2.cp:30]
        null;
      when S_i2_select => -- FUN13567[com2.cp:40]
        null;
      when S_i3_fun => -- FUN13567[com2.cp:40]
        UART_ln_STOP <= UART_ln_GD;
      when S_i4_assign => -- CASE_BODY58851[com2.cp:40]
        REG_PRO_send_EXCEPTION_WR <= CONST_I8_0;
        REG_PRO_send_EXCEPTION_WE <= '1';
      when S_send_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          RND_rnd_RD,
          r8,
          UART_ln_WR_ERR,
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_0 <= to_signed(0,8);
        r8 <= "00000000";
        d <= "00000000";
        err <= '0';
      else
        case pro_state is
          when S_send_start => -- PROCESS0[:0]
            null;
          when S_i5_for_loop => -- COUNT_LOOP44358[com2.cp:30]
            LOOP_i_0 <= CONST_I8_1;
          when S_i5_for_loop_cond => -- COUNT_LOOP44358[com2.cp:30]
            null;
          when S_i6_fun => -- FUN64777[com2.cp:32]
            r8 <= RND_rnd_RD;
          when S_i7_assign => -- ASSIGN17429[com2.cp:33]
            d <= r8;
          when S_i8_fun => -- FUN87455[com2.cp:34]
            err <= UART_ln_WR_ERR;
          when S_i9_branch => -- BRANCH2877[com2.cp:35]
            null;
          when S_i10_raise => -- BRANCH_TRUE85449[:0]
            null;
          when S_i5_for_loop_incr => -- COUNT_LOOP44358[com2.cp:30]
            LOOP_i_0 <= LOOP_i_0 + CONST_I8_1;
          when S_i2_select => -- FUN13567[com2.cp:40]
            null;
          when S_i3_fun => -- FUN13567[com2.cp:40]
            null;
          when S_i4_assign => -- CASE_BODY58851[com2.cp:40]
            null;
          when S_send_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
