--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D138 Genetic size: 2566603
--         Compile date: Thu Feb 25 11:39:56 CET 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p_1> from module <Mu>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity mu_p_1 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_d_1_WR: out std_logic;
  signal REG_d_1_WE: out std_logic;
  signal MUTEX_mu_LOCK: out std_logic;
  signal MUTEX_mu_UNLOCK: out std_logic;
  signal MUTEX_mu_GD: in std_logic;
  signal PRO_p_1_ENABLE: in std_logic;
  signal PRO_p_1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end mu_p_1;
architecture main of mu_p_1 is
  -- Local and temporary data objects
  signal LOOP_i_1: signed(3 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p_1_start, -- PROCESS0[:0]
    S_i1_assign, -- ASSIGN23890[mu.cp:15]
    S_i2_for_loop, -- COUNT_LOOP58851[mu.cp:16]
    S_i2_for_loop_cond, -- COUNT_LOOP58851[mu.cp:16]
    S_i3_fun, -- FUN19215[mu.cp:19]
    S_i4_assign, -- ASSIGN83560[mu.cp:20]
    S_i5_fun, -- FUN95086[mu.cp:21]
    S_i6_assign, -- ASSIGN37171[mu.cp:22]
    S_i2_for_loop_incr, -- COUNT_LOOP58851[mu.cp:16]
    S_p_1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p_1_start;
  signal pro_state_next: pro_states := S_p_1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I4_1: signed(3 downto 0) := "0001";
  constant CONST_I4_5: signed(3 downto 0) := "0101";
begin
  state_transition: process(
          PRO_p_1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p_1_ENABLE='0' then
        pro_state <= S_p_1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_1,
          MUTEX_mu_GD,
          pro_state
          )
  begin
    PRO_p_1_END <= '0';
    case pro_state is
      when S_p_1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_assign;
      when S_i1_assign => -- ASSIGN23890[mu.cp:15]
        pro_state_next <= S_i2_for_loop;
      when S_i2_for_loop => -- COUNT_LOOP58851[mu.cp:16]
        pro_state_next <= S_i2_for_loop_cond;
      when S_i2_for_loop_cond => -- COUNT_LOOP58851[mu.cp:16]
        if CONST_I4_5 >= LOOP_i_1 then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_p_1_end;
        end if;
      when S_i3_fun => -- FUN19215[mu.cp:19]
        if not((MUTEX_mu_GD) = ('0')) then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- ASSIGN83560[mu.cp:20]
        pro_state_next <= S_i5_fun;
      when S_i5_fun => -- FUN95086[mu.cp:21]
        if not((MUTEX_mu_GD) = ('0')) then
          pro_state_next <= S_i5_fun;
        else
          pro_state_next <= S_i6_assign;
        end if;
      when S_i6_assign => -- ASSIGN37171[mu.cp:22]
        pro_state_next <= S_i2_for_loop_incr;
      when S_i2_for_loop_incr => -- COUNT_LOOP58851[mu.cp:16]
        pro_state_next <= S_i2_for_loop_cond;
      when S_p_1_end => -- PROCESS0[:0]
        pro_state_next <= S_p_1_end;
        PRO_p_1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          pro_state
          )
  begin
    -- Default values
    REG_d_1_WR <= '0';
    REG_d_1_WE <= '0';
    MUTEX_mu_LOCK <= '0';
    MUTEX_mu_UNLOCK <= '0';
    case pro_state is
      when S_p_1_start => -- PROCESS0[:0]
        null;
      when S_i1_assign => -- ASSIGN23890[mu.cp:15]
        REG_d_1_WR <= '0';
        REG_d_1_WE <= '1';
      when S_i2_for_loop => -- COUNT_LOOP58851[mu.cp:16]
        null;
      when S_i2_for_loop_cond => -- COUNT_LOOP58851[mu.cp:16]
        null;
      when S_i3_fun => -- FUN19215[mu.cp:19]
        MUTEX_mu_LOCK <= '1';
      when S_i4_assign => -- ASSIGN83560[mu.cp:20]
        REG_d_1_WR <= '1';
        REG_d_1_WE <= '1';
      when S_i5_fun => -- FUN95086[mu.cp:21]
        MUTEX_mu_UNLOCK <= '1';
      when S_i6_assign => -- ASSIGN37171[mu.cp:22]
        REG_d_1_WR <= '0';
        REG_d_1_WE <= '1';
      when S_i2_for_loop_incr => -- COUNT_LOOP58851[mu.cp:16]
        null;
      when S_p_1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          LOOP_i_1,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_1 <= to_signed(0,4);
      else
        case pro_state is
          when S_p_1_start => -- PROCESS0[:0]
            null;
          when S_i1_assign => -- ASSIGN23890[mu.cp:15]
            null;
          when S_i2_for_loop => -- COUNT_LOOP58851[mu.cp:16]
            LOOP_i_1 <= CONST_I4_1;
          when S_i2_for_loop_cond => -- COUNT_LOOP58851[mu.cp:16]
            null;
          when S_i3_fun => -- FUN19215[mu.cp:19]
            null;
          when S_i4_assign => -- ASSIGN83560[mu.cp:20]
            null;
          when S_i5_fun => -- FUN95086[mu.cp:21]
            null;
          when S_i6_assign => -- ASSIGN37171[mu.cp:22]
            null;
          when S_i2_for_loop_incr => -- COUNT_LOOP58851[mu.cp:16]
            LOOP_i_1 <= LOOP_i_1 + CONST_I4_1;
          when S_p_1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
