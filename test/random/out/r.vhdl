--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (C) 2006-2008 ** BSSLAB, Dr. Stefan Bosse
--         Version 2.1 D21 **  2049142 total genes
--         Compiled on Thu Nov 27 11:07:26 CET 2008
--         Compiled by sbosse
--         Compiled on SunOS sun203 5.10 Generic_118833-33 sun4u sparc SUNW,A70

-- Implementation of Module <R>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity MOD_r is
port(
  -- Connections to the outside world
  signal x: out signed(9 downto 0);
  signal y: out signed(9 downto 0);
  signal CLK: in std_logic;
  signal RESET: in std_logic
);
end MOD_r;
architecture main of MOD_r is
  -- Process instances
  component r_p1
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_RD: in signed(9 downto 0);
    signal REG_d_WR: out signed(9 downto 0);
    signal REG_d_WE: out std_logic;
    signal REG_e_RD: in std_logic_vector(11 downto 0);
    signal REG_e_WR: out std_logic_vector(11 downto 0);
    signal REG_e_WE: out std_logic;
    signal REG_f_RD: in signed(3 downto 0);
    signal REG_f_WR: out signed(3 downto 0);
    signal REG_f_WE: out std_logic;
    signal REG_g_RD: in std_logic_vector(3 downto 0);
    signal REG_g_WR: out std_logic_vector(3 downto 0);
    signal REG_g_WE: out std_logic;
    signal x_WR: out signed(9 downto 0);
    signal y_WR: out signed(9 downto 0);
    signal F_rnd1_RE: out std_logic;
    signal F_rnd1_RD: in std_logic_vector(9 downto 0);
    signal F_rnd1_GD: in std_logic;
    signal PRO_p1_ENABLE: in std_logic;
    signal PRO_p1_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component r_main
  port(
    -- Connections to external objects, components and the outside world
    signal PRO_p1_START: out std_logic;
    signal PRO_p1_GD: in std_logic;
    signal F_rnd1_INIT: out std_logic;
    signal F_rnd1_GD: in std_logic;
    signal PRO_main_ENABLE: in std_logic;
    signal PRO_main_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  -- Local and temporary data objects
  signal REG_d: signed(9 downto 0);
  signal REG_d_RD: signed(9 downto 0);
  signal REG_d_p1_WR: signed(9 downto 0);
  signal REG_d_p1_WE: std_logic;
  signal REG_e: std_logic_vector(11 downto 0);
  signal REG_e_RD: std_logic_vector(11 downto 0);
  signal REG_e_p1_WR: std_logic_vector(11 downto 0);
  signal REG_e_p1_WE: std_logic;
  signal REG_f: signed(3 downto 0);
  signal REG_f_RD: signed(3 downto 0);
  signal REG_f_p1_WR: signed(3 downto 0);
  signal REG_f_p1_WE: std_logic;
  signal REG_g: std_logic_vector(3 downto 0);
  signal REG_g_RD: std_logic_vector(3 downto 0);
  signal REG_g_p1_WR: std_logic_vector(3 downto 0);
  signal REG_g_p1_WE: std_logic;
  signal x_WR: signed(9 downto 0);
  signal y_WR: signed(9 downto 0);
  signal PRO_main_ENABLE: std_logic;
  signal PRO_main_END: std_logic;
  signal PRO_p1_ENABLE: std_logic;
  signal PRO_p1_END: std_logic;
  signal PRO_p1_main_START: std_logic;
  signal PRO_p1_main_GD: std_logic;
  signal F_rnd1_d_in: std_logic;
  signal F_rnd1_data_shift: std_logic_vector(9 downto 0);
  signal F_rnd1_data: std_logic_vector(9 downto 0);
  signal F_rnd1_shift: std_logic;
  signal F_rnd1_init: std_logic;
  signal F_rnd1_avail: std_logic;
  signal F_rnd1_p1_RE: std_logic;
  signal F_rnd1_p1_RD: std_logic_vector(9 downto 0);
  signal F_rnd1_main_INIT: std_logic;
  signal F_rnd1_main_GD: std_logic;
  signal F_rnd1_p1_GD: std_logic;
  signal F_rnd1_count: std_logic_vector(3 downto 0);
  -- State Processing
  -- Aux. signals
  signal conpro_system_clk: std_logic;
  signal conpro_system_reset: std_logic;
begin
  -- Module implementation
  -- Register
  IMPL_REG_d: process(
          REG_d_p1_WR,
          REG_d_p1_WE,
          REG_d,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_d_RD <= REG_d;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d <= to_signed(0,10);
     elsif REG_d_p1_WE='1' then
      REG_d <= REG_d_p1_WR;
     end if;
    end if;
  end process IMPL_REG_d;
  
  -- Register
  IMPL_REG_e: process(
          REG_e_p1_WR,
          REG_e_p1_WE,
          REG_e,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_e_RD <= REG_e;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_e <= "000000000000";
     elsif REG_e_p1_WE='1' then
      REG_e <= REG_e_p1_WR;
     end if;
    end if;
  end process IMPL_REG_e;
  
  -- Register
  IMPL_REG_f: process(
          REG_f_p1_WR,
          REG_f_p1_WE,
          REG_f,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_f_RD <= REG_f;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_f <= to_signed(0,4);
     elsif REG_f_p1_WE='1' then
      REG_f <= REG_f_p1_WR;
     end if;
    end if;
  end process IMPL_REG_f;
  
  -- Register
  IMPL_REG_g: process(
          REG_g_p1_WR,
          REG_g_p1_WE,
          REG_g,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_g_RD <= REG_g;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_g <= "0000";
     elsif REG_g_p1_WE='1' then
      REG_g <= REG_g_p1_WR;
     end if;
    end if;
  end process IMPL_REG_g;
  
  -- Process control
  PRO_CONTROL_main: process(
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_main_ENABLE <= '1'; -- main process activated on reset
      end if;
    end if;
  end process PRO_CONTROL_main;
  
  -- Process control
  PRO_CONTROL_p1: process(
          PRO_p1_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p1_ENABLE <= '0';
        PRO_p1_main_GD <= '1';
      elsif PRO_p1_main_START = '1' then
        PRO_p1_ENABLE <= '1';
        PRO_p1_main_GD <= '0';
      else
        PRO_p1_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p1;
  
  --
  -- EMI <Object Random.random.rnd1> Process
  --
  RANDOM_rnd1_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    F_rnd1_init,
    F_rnd1_main_INIT,
    F_rnd1_p1_RE,
    F_rnd1_avail,
    F_rnd1_data)
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        F_rnd1_shift <= '0';
        F_rnd1_init <= '0';
        F_rnd1_main_GD <= '1';
        F_rnd1_p1_GD <= '1';
      else
        F_rnd1_main_GD <= '1';
        F_rnd1_p1_GD <= '1';
        if (F_rnd1_init) = ('1') then
          F_rnd1_init <= '0';
        elsif (F_rnd1_main_INIT) = ('1') then
          F_rnd1_init <= '1';
          F_rnd1_main_GD <= '0';
        elsif (F_rnd1_p1_RE) = ('1') then
          F_rnd1_shift <= '1';
          if (F_rnd1_avail) = ('1') then
            F_rnd1_p1_RD <= F_rnd1_data;
            F_rnd1_p1_GD <= '0';
            F_rnd1_shift <= '0';
          end if;
        end if;
      end if;
    end if;
  end process RANDOM_rnd1_SCHED;
  --
  -- EMI <Object Random.random.rnd1> Process
  --
  RANDOM_rnd1: process(conpro_system_clk,
    conpro_system_reset,
    F_rnd1_init,
    F_rnd1_shift,
    F_rnd1_d_in,
    F_rnd1_data_shift,
    F_rnd1_count)
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if (conpro_system_reset = '1') or ((F_rnd1_init) = ('1')) then
        F_rnd1_data_shift <= "1111101000";
        F_rnd1_data <= "0000000000";
        F_rnd1_count <= "0000";
        F_rnd1_avail <= '0';
      elsif (F_rnd1_shift) = ('1') then
        F_rnd1_data_shift <= (F_rnd1_d_in) & (F_rnd1_data_shift(9 downto 1));
        F_rnd1_count <= (F_rnd1_count) + (1);
        if (F_rnd1_count) = ("1001") then
          F_rnd1_avail <= '1';
          F_rnd1_data <= F_rnd1_data_shift;
          F_rnd1_count <= "0000";
        else
          F_rnd1_avail <= '0';
        end if;
      end if;
    end if;
  end process RANDOM_rnd1;
  --
  -- EMI <Object Random.random.rnd1>
  --
  F_rnd1_d_in <= (F_rnd1_data_shift(2)) xor (F_rnd1_data_shift(9));
  
  -- Process instantiations
  PRO_MAP_p1: r_p1 port map(
    REG_d_RD => REG_d_RD,
    REG_d_WR => REG_d_p1_WR,
    REG_d_WE => REG_d_p1_WE,
    REG_e_RD => REG_e_RD,
    REG_e_WR => REG_e_p1_WR,
    REG_e_WE => REG_e_p1_WE,
    REG_f_RD => REG_f_RD,
    REG_f_WR => REG_f_p1_WR,
    REG_f_WE => REG_f_p1_WE,
    REG_g_RD => REG_g_RD,
    REG_g_WR => REG_g_p1_WR,
    REG_g_WE => REG_g_p1_WE,
    x_WR => x_WR,
    y_WR => y_WR,
    F_rnd1_RE => F_rnd1_p1_RE,
    F_rnd1_RD => F_rnd1_p1_RD,
    F_rnd1_GD => F_rnd1_p1_GD,
    PRO_p1_ENABLE => PRO_p1_ENABLE,
    PRO_p1_END => PRO_p1_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_main: r_main port map(
    PRO_p1_START => PRO_p1_main_START,
    PRO_p1_GD => PRO_p1_main_GD,
    F_rnd1_INIT => F_rnd1_main_INIT,
    F_rnd1_GD => F_rnd1_main_GD,
    PRO_main_ENABLE => PRO_main_ENABLE,
    PRO_main_END => PRO_main_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  
  -- Toplevel assignments
  -- Monitors
  x <= x_WR;
  y <= y_WR;
  conpro_system_clk <= CLK;
  conpro_system_reset <= RESET;
end main;
