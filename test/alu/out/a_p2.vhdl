--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D101 Genetic size: 2267134
--         Compile date: Mon Aug 17 19:21:41 CEST 2009
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p2> from module <A>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
entity a_p2 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_d_RD: in signed(15 downto 0);
  signal REG_d_WR: out signed(15 downto 0);
  signal REG_d_WE: out std_logic;
  signal PRO_p2_ENABLE: in std_logic;
  signal PRO_p2_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end a_p2;
architecture main of a_p2 is
  -- Local and temporary data objects
  signal n: signed(15 downto 0);
  signal prod: signed(15 downto 0);
  -- Auxilliary ALU signals
  signal res_1_Alu_mul: signed(15 downto 0);
  signal alu_1_op1: signed(15 downto 0);
  signal alu_1_op2: signed(15 downto 0);
  signal alu_1_res: signed(15 downto 0);
  signal alu_1_reg: signed(15 downto 0);
  -- State Processing
  type pro_states is (
    S_p2_start, -- PROCESS0[:0]
    S_i1_bind_to_2, -- ASSIGN81371[a.cp:35]
    S_i3_assign, -- ASSIGN83891[a.cp:38]
    S_i3_assign_1, -- ASSIGN83891[a.cp:38]
    S_i4_assign, -- ASSIGN19442[a.cp:39]
    S_i5_assign, -- ASSIGN78627[a.cp:38]
    S_i5_assign_1, -- ASSIGN78627[a.cp:38]
    S_i6_assign, -- ASSIGN22215[a.cp:39]
    S_i7_assign, -- ASSIGN10492[a.cp:38]
    S_i7_assign_1, -- ASSIGN10492[a.cp:38]
    S_i8_assign, -- ASSIGN7089[a.cp:39]
    S_i9_assign, -- ASSIGN2398[a.cp:38]
    S_i9_assign_1, -- ASSIGN2398[a.cp:38]
    S_i10_assign, -- ASSIGN45421[a.cp:39]
    S_i11_assign, -- ASSIGN75600[a.cp:38]
    S_i11_assign_1, -- ASSIGN75600[a.cp:38]
    S_i12_assign, -- ASSIGN11089[a.cp:39]
    S_i13_assign, -- ASSIGN86320[a.cp:38]
    S_i13_assign_1, -- ASSIGN86320[a.cp:38]
    S_i14_assign, -- ASSIGN33708[a.cp:39]
    S_i15_assign, -- ASSIGN28093[a.cp:38]
    S_i15_assign_1, -- ASSIGN28093[a.cp:38]
    S_i16_assign, -- ASSIGN81698[a.cp:39]
    S_i17_assign, -- ASSIGN21229[a.cp:38]
    S_i17_assign_1, -- ASSIGN21229[a.cp:38]
    S_i18_assign, -- ASSIGN49386[a.cp:39]
    S_i19_assign, -- ASSIGN45725[a.cp:38]
    S_i19_assign_1, -- ASSIGN45725[a.cp:38]
    S_i20_assign, -- ASSIGN66809[a.cp:39]
    S_i21_assign, -- ASSIGN13048[a.cp:38]
    S_i21_assign_1, -- ASSIGN13048[a.cp:38]
    S_i22_assign, -- ASSIGN7507[a.cp:39]
    S_i23_assign, -- ASSIGN43691[a.cp:38]
    S_i23_assign_1, -- ASSIGN43691[a.cp:38]
    S_i24_assign, -- ASSIGN70779[a.cp:39]
    S_i25_assign, -- ASSIGN77351[a.cp:38]
    S_i25_assign_1, -- ASSIGN77351[a.cp:38]
    S_i26_assign, -- ASSIGN33362[a.cp:39]
    S_i27_assign, -- ASSIGN61683[a.cp:38]
    S_i27_assign_1, -- ASSIGN61683[a.cp:38]
    S_i28_assign, -- ASSIGN55762[a.cp:39]
    S_i29_assign, -- ASSIGN23606[a.cp:38]
    S_i29_assign_1, -- ASSIGN23606[a.cp:38]
    S_i30_assign, -- ASSIGN69501[a.cp:39]
    S_i31_assign, -- ASSIGN58009[a.cp:38]
    S_i31_assign_1, -- ASSIGN58009[a.cp:38]
    S_i32_assign, -- ASSIGN33018[a.cp:39]
    S_i33_assign, -- ASSIGN92729[a.cp:38]
    S_i33_assign_1, -- ASSIGN92729[a.cp:38]
    S_i34_assign, -- ASSIGN67938[a.cp:39]
    S_i35_assign, -- ASSIGN31439[a.cp:41]
    S_p2_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p2_start;
  signal pro_state_next: pro_states := S_p2_start;
  type alu_ops is (
    Alu_mul,
    Alu_nop
    );
  signal alu_1_op: alu_ops;
  -- Auxilliary toplevel definitions
  constant CONST_I16_2: signed(15 downto 0) := "0000000000000010";
  constant CONST_I16_1: signed(15 downto 0) := "0000000000000001";
  constant CONST_I16_3: signed(15 downto 0) := "0000000000000011";
  constant CONST_I16_4: signed(15 downto 0) := "0000000000000100";
  constant CONST_I16_5: signed(15 downto 0) := "0000000000000101";
  constant CONST_I16_6: signed(15 downto 0) := "0000000000000110";
  constant CONST_I16_7: signed(15 downto 0) := "0000000000000111";
  constant CONST_I16_8: signed(15 downto 0) := "0000000000001000";
  constant CONST_I16_9: signed(15 downto 0) := "0000000000001001";
  constant CONST_I16_10: signed(15 downto 0) := "0000000000001010";
  constant CONST_I16_11: signed(15 downto 0) := "0000000000001011";
  constant CONST_I16_12: signed(15 downto 0) := "0000000000001100";
  constant CONST_I16_13: signed(15 downto 0) := "0000000000001101";
  constant CONST_I16_14: signed(15 downto 0) := "0000000000001110";
  constant CONST_I16_15: signed(15 downto 0) := "0000000000001111";
  constant CONST_I16_16: signed(15 downto 0) := "0000000000010000";
  -- ConPro VHDL Library
  --
  -- ConPro2 library
  --
  --  Version 2.1.2
  --
  
  function min(n,m:natural) return natural is
    begin
      if n < m then return n;
      elsif m < n then return m;
      else return n; end if;
    end;
  function max(n,m:natural) return natural is
    begin
      if n > m then return n;
      elsif m > n then return m;
      else return n; end if;
    end;
  
  --
  -- multiplier with width_A=width_B=width_RES, type I
  --
  function mult(A,B: SIGNED) return SIGNED is
    variable BA: SIGNED((A'length+B'length-1) downto 0);
    variable BA_n: SIGNED((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := conv_signed(BA,A'length);
      return (BA_n);
    end;
  --
  -- multiplier with width_A=width_B=width_RES, type L
  --
  function mult(A,B: STD_LOGIC_VECTOR) return STD_LOGIC_VECTOR is
    variable BA: STD_LOGIC_VECTOR((A'length+B'length-1) downto 0);
    variable BA_n: STD_LOGIC_VECTOR((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := BA((A'length-1) downto 0);
      return (BA_n);
    end;
  --
  -- Overloading of 1 bit adder, type L
  --
  function "+" (L: std_logic; R:integer) return std_logic is
    begin
      if R = 0 then return L; else return (L xor '1'); end if;
    end "+";
  
  --
  -- Type conversion
  -- ConPro types! L: logic(std_logic), I:integer(signed), N:natural(integer)
  -- Argument width relation: n <= m
  --
  function Ln_to_Lm(L_n:std_logic_vector;n,m:natural) return std_logic_vector is
    variable fill: std_logic_vector(max(1,m-n-1) downto 0) := (others => '0');
    variable L_m: std_logic_vector(m-1 downto 0);
    begin
      if (m-n) > 1 then L_m := fill & L_n;
      else L_m := '0' & L_n; end if;
      return L_m;
    end;
  function Lm_to_Ln(L_m:std_logic_vector;m,n:natural) return std_logic_vector is
    variable L_n: std_logic_vector(n-1 downto 0);
    begin
      L_n := L_m(n-1 downto 0);
      return L_n;
    end;
  function Ln_to_Lm_1(L_n:std_logic_vector;n,m:natural) return std_logic_vector is
    variable L_m: std_logic_vector(m-1 downto 0);
    begin
      L_m := '1' & L_n;
      return L_m;
    end;
  function In_to_Im(I_n:signed;n,m:natural) return signed is
    variable I_m: signed(m-1 downto 0);
    begin
      I_m := conv_signed(I_n,m);
      return I_m;
    end;
  function Im_to_In(I_m:signed;m,n:natural) return signed is
    variable I_n: signed(n-1 downto 0);
    begin
      I_n := conv_signed(I_m,n);
      return I_n;
    end;
  function I_to_L(I:signed) return std_logic_vector is
    variable L: std_logic_vector(I'length-1 downto 0);
    begin
      L := std_logic_vector(I);
      return L;
    end;
  function In_to_Lm(I_n:signed;n,m:natural) return std_logic_vector is
    variable L_m: std_logic_vector(m-1 downto 0);
    begin
      L_m := std_logic_vector(conv_signed(I_n,m));
      return L_m;
    end;
  function Im_to_Ln(I_m:signed;m,n:natural) return std_logic_vector is
    variable L_n: std_logic_vector(n-1 downto 0);
    begin
      L_n := std_logic_vector(conv_signed(I_m,n));
      return L_n;
    end;
  function L_to_I(L:std_logic_vector) return signed is
    variable I: signed(L'length-1 downto 0);
    begin
      I := signed(L);
      return I;
    end;
  function L_to_B(L:std_logic_vector) return boolean is
    variable comp: std_logic_vector(L'length-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (L = comp);
      return B;
    end;
  function Ln_to_B(L:std_logic_vector;n:natural) return boolean is
    variable comp: std_logic_vector(n-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (L = comp);
      return B;
    end;
  function I_to_B(I:signed) return boolean is
    variable comp: signed(I'length-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (I = comp);
      return B;
    end;
  function In_to_B(I:signed;n:natural) return boolean is
    variable comp: signed(n-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (I = comp);
      return B;
    end;
  function Ln_to_Im(L_n:std_logic_vector;n,m:natural) return signed is
    variable I_m: signed(m-1 downto 0);
    begin
      I_m := conv_signed(signed(L_n),m);
      return I_m;
    end;
  function Lm_to_In(L_m:std_logic_vector;m,n:natural) return signed is
    variable I_n: signed(n-1 downto 0);
    begin
      I_n := conv_signed(signed(L_m),n);
      return I_n;
    end;
  function N_to_Im(N:natural;m:natural) return signed is
    variable I_m: signed(m-1 downto 0);
    begin
      I_m := conv_signed(N,m);
      return I_m;
    end;
  function L_to_N(L:std_logic_vector) return integer is
    variable N: integer;
    begin
      N := conv_integer(unsigned((L)));
      return N;
    end;
  function I_to_N(I:signed) return integer is
    variable N: integer;
    begin
      N := conv_integer(unsigned((I)));
      return N;
    end;
begin
  state_transition: process(
          PRO_p2_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='0' or PRO_p2_ENABLE='0' then
        pro_state <= S_p2_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          pro_state
          )
  begin
    PRO_p2_END <= '0';
    case pro_state is
      when S_p2_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_bind_to_2;
      when S_i1_bind_to_2 => -- ASSIGN81371[a.cp:35]
        pro_state_next <= S_i3_assign;
      when S_i3_assign => -- ASSIGN83891[a.cp:38]
        pro_state_next <= S_i3_assign_1;
      when S_i3_assign_1 => -- ASSIGN83891[a.cp:38]
        pro_state_next <= S_i4_assign;
      when S_i4_assign => -- ASSIGN19442[a.cp:39]
        pro_state_next <= S_i5_assign;
      when S_i5_assign => -- ASSIGN78627[a.cp:38]
        pro_state_next <= S_i5_assign_1;
      when S_i5_assign_1 => -- ASSIGN78627[a.cp:38]
        pro_state_next <= S_i6_assign;
      when S_i6_assign => -- ASSIGN22215[a.cp:39]
        pro_state_next <= S_i7_assign;
      when S_i7_assign => -- ASSIGN10492[a.cp:38]
        pro_state_next <= S_i7_assign_1;
      when S_i7_assign_1 => -- ASSIGN10492[a.cp:38]
        pro_state_next <= S_i8_assign;
      when S_i8_assign => -- ASSIGN7089[a.cp:39]
        pro_state_next <= S_i9_assign;
      when S_i9_assign => -- ASSIGN2398[a.cp:38]
        pro_state_next <= S_i9_assign_1;
      when S_i9_assign_1 => -- ASSIGN2398[a.cp:38]
        pro_state_next <= S_i10_assign;
      when S_i10_assign => -- ASSIGN45421[a.cp:39]
        pro_state_next <= S_i11_assign;
      when S_i11_assign => -- ASSIGN75600[a.cp:38]
        pro_state_next <= S_i11_assign_1;
      when S_i11_assign_1 => -- ASSIGN75600[a.cp:38]
        pro_state_next <= S_i12_assign;
      when S_i12_assign => -- ASSIGN11089[a.cp:39]
        pro_state_next <= S_i13_assign;
      when S_i13_assign => -- ASSIGN86320[a.cp:38]
        pro_state_next <= S_i13_assign_1;
      when S_i13_assign_1 => -- ASSIGN86320[a.cp:38]
        pro_state_next <= S_i14_assign;
      when S_i14_assign => -- ASSIGN33708[a.cp:39]
        pro_state_next <= S_i15_assign;
      when S_i15_assign => -- ASSIGN28093[a.cp:38]
        pro_state_next <= S_i15_assign_1;
      when S_i15_assign_1 => -- ASSIGN28093[a.cp:38]
        pro_state_next <= S_i16_assign;
      when S_i16_assign => -- ASSIGN81698[a.cp:39]
        pro_state_next <= S_i17_assign;
      when S_i17_assign => -- ASSIGN21229[a.cp:38]
        pro_state_next <= S_i17_assign_1;
      when S_i17_assign_1 => -- ASSIGN21229[a.cp:38]
        pro_state_next <= S_i18_assign;
      when S_i18_assign => -- ASSIGN49386[a.cp:39]
        pro_state_next <= S_i19_assign;
      when S_i19_assign => -- ASSIGN45725[a.cp:38]
        pro_state_next <= S_i19_assign_1;
      when S_i19_assign_1 => -- ASSIGN45725[a.cp:38]
        pro_state_next <= S_i20_assign;
      when S_i20_assign => -- ASSIGN66809[a.cp:39]
        pro_state_next <= S_i21_assign;
      when S_i21_assign => -- ASSIGN13048[a.cp:38]
        pro_state_next <= S_i21_assign_1;
      when S_i21_assign_1 => -- ASSIGN13048[a.cp:38]
        pro_state_next <= S_i22_assign;
      when S_i22_assign => -- ASSIGN7507[a.cp:39]
        pro_state_next <= S_i23_assign;
      when S_i23_assign => -- ASSIGN43691[a.cp:38]
        pro_state_next <= S_i23_assign_1;
      when S_i23_assign_1 => -- ASSIGN43691[a.cp:38]
        pro_state_next <= S_i24_assign;
      when S_i24_assign => -- ASSIGN70779[a.cp:39]
        pro_state_next <= S_i25_assign;
      when S_i25_assign => -- ASSIGN77351[a.cp:38]
        pro_state_next <= S_i25_assign_1;
      when S_i25_assign_1 => -- ASSIGN77351[a.cp:38]
        pro_state_next <= S_i26_assign;
      when S_i26_assign => -- ASSIGN33362[a.cp:39]
        pro_state_next <= S_i27_assign;
      when S_i27_assign => -- ASSIGN61683[a.cp:38]
        pro_state_next <= S_i27_assign_1;
      when S_i27_assign_1 => -- ASSIGN61683[a.cp:38]
        pro_state_next <= S_i28_assign;
      when S_i28_assign => -- ASSIGN55762[a.cp:39]
        pro_state_next <= S_i29_assign;
      when S_i29_assign => -- ASSIGN23606[a.cp:38]
        pro_state_next <= S_i29_assign_1;
      when S_i29_assign_1 => -- ASSIGN23606[a.cp:38]
        pro_state_next <= S_i30_assign;
      when S_i30_assign => -- ASSIGN69501[a.cp:39]
        pro_state_next <= S_i31_assign;
      when S_i31_assign => -- ASSIGN58009[a.cp:38]
        pro_state_next <= S_i31_assign_1;
      when S_i31_assign_1 => -- ASSIGN58009[a.cp:38]
        pro_state_next <= S_i32_assign;
      when S_i32_assign => -- ASSIGN33018[a.cp:39]
        pro_state_next <= S_i33_assign;
      when S_i33_assign => -- ASSIGN92729[a.cp:38]
        pro_state_next <= S_i33_assign_1;
      when S_i33_assign_1 => -- ASSIGN92729[a.cp:38]
        pro_state_next <= S_i34_assign;
      when S_i34_assign => -- ASSIGN67938[a.cp:39]
        pro_state_next <= S_i35_assign;
      when S_i35_assign => -- ASSIGN31439[a.cp:41]
        pro_state_next <= S_p2_end;
      when S_p2_end => -- PROCESS0[:0]
        pro_state_next <= S_p2_end;
        PRO_p2_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          prod,
          pro_state
          )
  begin
    -- Default values
    alu_1_op <= Alu_nop;
    alu_1_op1 <= conv_signed(0,16);
    alu_1_op2 <= conv_signed(0,16);
    REG_d_WR <= conv_signed(0,16);
    REG_d_WE <= '0';
    case pro_state is
      when S_p2_start => -- PROCESS0[:0]
        null;
      when S_i1_bind_to_2 => -- ASSIGN81371[a.cp:35]
        null;
      when S_i3_assign => -- ASSIGN83891[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_1;
        alu_1_op  <= Alu_mul;
      when S_i3_assign_1 => -- ASSIGN83891[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i4_assign => -- ASSIGN19442[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i5_assign => -- ASSIGN78627[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i5_assign_1 => -- ASSIGN78627[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i6_assign => -- ASSIGN22215[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i7_assign => -- ASSIGN10492[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_3;
        alu_1_op  <= Alu_mul;
      when S_i7_assign_1 => -- ASSIGN10492[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i8_assign => -- ASSIGN7089[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i9_assign => -- ASSIGN2398[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_4;
        alu_1_op  <= Alu_mul;
      when S_i9_assign_1 => -- ASSIGN2398[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i10_assign => -- ASSIGN45421[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i11_assign => -- ASSIGN75600[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_5;
        alu_1_op  <= Alu_mul;
      when S_i11_assign_1 => -- ASSIGN75600[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i12_assign => -- ASSIGN11089[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i13_assign => -- ASSIGN86320[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_6;
        alu_1_op  <= Alu_mul;
      when S_i13_assign_1 => -- ASSIGN86320[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i14_assign => -- ASSIGN33708[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i15_assign => -- ASSIGN28093[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_7;
        alu_1_op  <= Alu_mul;
      when S_i15_assign_1 => -- ASSIGN28093[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i16_assign => -- ASSIGN81698[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i17_assign => -- ASSIGN21229[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_8;
        alu_1_op  <= Alu_mul;
      when S_i17_assign_1 => -- ASSIGN21229[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i18_assign => -- ASSIGN49386[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i19_assign => -- ASSIGN45725[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_9;
        alu_1_op  <= Alu_mul;
      when S_i19_assign_1 => -- ASSIGN45725[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i20_assign => -- ASSIGN66809[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i21_assign => -- ASSIGN13048[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_10;
        alu_1_op  <= Alu_mul;
      when S_i21_assign_1 => -- ASSIGN13048[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i22_assign => -- ASSIGN7507[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i23_assign => -- ASSIGN43691[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_11;
        alu_1_op  <= Alu_mul;
      when S_i23_assign_1 => -- ASSIGN43691[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i24_assign => -- ASSIGN70779[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i25_assign => -- ASSIGN77351[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_12;
        alu_1_op  <= Alu_mul;
      when S_i25_assign_1 => -- ASSIGN77351[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i26_assign => -- ASSIGN33362[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i27_assign => -- ASSIGN61683[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_13;
        alu_1_op  <= Alu_mul;
      when S_i27_assign_1 => -- ASSIGN61683[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i28_assign => -- ASSIGN55762[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i29_assign => -- ASSIGN23606[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_14;
        alu_1_op  <= Alu_mul;
      when S_i29_assign_1 => -- ASSIGN23606[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i30_assign => -- ASSIGN69501[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i31_assign => -- ASSIGN58009[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_15;
        alu_1_op  <= Alu_mul;
      when S_i31_assign_1 => -- ASSIGN58009[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i32_assign => -- ASSIGN33018[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i33_assign => -- ASSIGN92729[a.cp:38]
        alu_1_op1 <= prod;
        alu_1_op2 <= CONST_I16_16;
        alu_1_op  <= Alu_mul;
      when S_i33_assign_1 => -- ASSIGN92729[a.cp:38]
        alu_1_op1 <= alu_1_reg;
        alu_1_op2 <= n;
        alu_1_op  <= Alu_mul;
      when S_i34_assign => -- ASSIGN67938[a.cp:39]
        alu_1_op1 <= n;
        alu_1_op2 <= CONST_I16_2;
        alu_1_op  <= Alu_mul;
      when S_i35_assign => -- ASSIGN31439[a.cp:41]
        REG_d_WR <= prod;
        REG_d_WE <= '1';
      when S_p2_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          REG_d_RD,
          alu_1_res,
          prod,
          alu_1_reg,
          n,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '0' then
        n <= conv_signed(0,16);
        prod <= conv_signed(0,16);
        alu_1_reg <= conv_signed(0,16);
      else
        case pro_state is
          when S_p2_start => -- PROCESS0[:0]
            null;
          when S_i1_bind_to_2 => -- ASSIGN81371[a.cp:35]
            n <= CONST_I16_2;
            prod <= REG_d_RD;
          when S_i3_assign => -- ASSIGN83891[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i3_assign_1 => -- ASSIGN83891[a.cp:38]
            prod <= alu_1_res;
          when S_i4_assign => -- ASSIGN19442[a.cp:39]
            n <= alu_1_res;
          when S_i5_assign => -- ASSIGN78627[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i5_assign_1 => -- ASSIGN78627[a.cp:38]
            prod <= alu_1_res;
          when S_i6_assign => -- ASSIGN22215[a.cp:39]
            n <= alu_1_res;
          when S_i7_assign => -- ASSIGN10492[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i7_assign_1 => -- ASSIGN10492[a.cp:38]
            prod <= alu_1_res;
          when S_i8_assign => -- ASSIGN7089[a.cp:39]
            n <= alu_1_res;
          when S_i9_assign => -- ASSIGN2398[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i9_assign_1 => -- ASSIGN2398[a.cp:38]
            prod <= alu_1_res;
          when S_i10_assign => -- ASSIGN45421[a.cp:39]
            n <= alu_1_res;
          when S_i11_assign => -- ASSIGN75600[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i11_assign_1 => -- ASSIGN75600[a.cp:38]
            prod <= alu_1_res;
          when S_i12_assign => -- ASSIGN11089[a.cp:39]
            n <= alu_1_res;
          when S_i13_assign => -- ASSIGN86320[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i13_assign_1 => -- ASSIGN86320[a.cp:38]
            prod <= alu_1_res;
          when S_i14_assign => -- ASSIGN33708[a.cp:39]
            n <= alu_1_res;
          when S_i15_assign => -- ASSIGN28093[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i15_assign_1 => -- ASSIGN28093[a.cp:38]
            prod <= alu_1_res;
          when S_i16_assign => -- ASSIGN81698[a.cp:39]
            n <= alu_1_res;
          when S_i17_assign => -- ASSIGN21229[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i17_assign_1 => -- ASSIGN21229[a.cp:38]
            prod <= alu_1_res;
          when S_i18_assign => -- ASSIGN49386[a.cp:39]
            n <= alu_1_res;
          when S_i19_assign => -- ASSIGN45725[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i19_assign_1 => -- ASSIGN45725[a.cp:38]
            prod <= alu_1_res;
          when S_i20_assign => -- ASSIGN66809[a.cp:39]
            n <= alu_1_res;
          when S_i21_assign => -- ASSIGN13048[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i21_assign_1 => -- ASSIGN13048[a.cp:38]
            prod <= alu_1_res;
          when S_i22_assign => -- ASSIGN7507[a.cp:39]
            n <= alu_1_res;
          when S_i23_assign => -- ASSIGN43691[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i23_assign_1 => -- ASSIGN43691[a.cp:38]
            prod <= alu_1_res;
          when S_i24_assign => -- ASSIGN70779[a.cp:39]
            n <= alu_1_res;
          when S_i25_assign => -- ASSIGN77351[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i25_assign_1 => -- ASSIGN77351[a.cp:38]
            prod <= alu_1_res;
          when S_i26_assign => -- ASSIGN33362[a.cp:39]
            n <= alu_1_res;
          when S_i27_assign => -- ASSIGN61683[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i27_assign_1 => -- ASSIGN61683[a.cp:38]
            prod <= alu_1_res;
          when S_i28_assign => -- ASSIGN55762[a.cp:39]
            n <= alu_1_res;
          when S_i29_assign => -- ASSIGN23606[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i29_assign_1 => -- ASSIGN23606[a.cp:38]
            prod <= alu_1_res;
          when S_i30_assign => -- ASSIGN69501[a.cp:39]
            n <= alu_1_res;
          when S_i31_assign => -- ASSIGN58009[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i31_assign_1 => -- ASSIGN58009[a.cp:38]
            prod <= alu_1_res;
          when S_i32_assign => -- ASSIGN33018[a.cp:39]
            n <= alu_1_res;
          when S_i33_assign => -- ASSIGN92729[a.cp:38]
            alu_1_reg <= alu_1_res;
          when S_i33_assign_1 => -- ASSIGN92729[a.cp:38]
            prod <= alu_1_res;
          when S_i34_assign => -- ASSIGN67938[a.cp:39]
            n <= alu_1_res;
          when S_i35_assign => -- ASSIGN31439[a.cp:41]
            null;
          when S_p2_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  -- Process Arithmetic Logic Boolean Unit: The Rechenwerk
  alu_1: process(
          alu_1_op,
          res_1_Alu_mul
          )
  begin
    -- Default values
    alu_1_res <= conv_signed(0,16);
    case alu_1_op is
      when Alu_mul => alu_1_res <= res_1_Alu_mul;
      when Alu_nop => null;
    end case;
  end process alu_1;
  
  -- Toplevel assignments
  -- Monitors
  res_1_Alu_mul <= mult(alu_1_op1,alu_1_op2);
end main;
