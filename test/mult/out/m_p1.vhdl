--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D113-M11 Genetic size: 2373756
--         Compile date: Mon Oct 12 14:08:33 CEST 2009
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p1> from module <M>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity m_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_x_RD: in signed(7 downto 0);
  signal REG_x_WR: out signed(7 downto 0);
  signal REG_x_WE: out std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end m_p1;
architecture main of m_p1 is
  -- Local and temporary data objects
  signal LOOP_i_0: signed(4 downto 0);
  signal a: signed(7 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, -- PROCESS0[:0]
    S_i1_assign, -- ASSIGN87757[m.cp:10]
    S_i2_for_loop, -- COUNT_LOOP8650[m.cp:11]
    S_i2_for_loop_cond, -- COUNT_LOOP8650[m.cp:11]
    S_i3_assign, -- ASSIGN16603[m.cp:12]
    S_i2_for_loop_incr, -- COUNT_LOOP8650[m.cp:11]
    S_i4_assign, -- ASSIGN44358[m.cp:13]
    S_p1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
  constant CONST_I8_2: signed(7 downto 0) := "00000010";
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_0,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_assign;
      when S_i1_assign => -- ASSIGN87757[m.cp:10]
        pro_state_next <= S_i2_for_loop;
      when S_i2_for_loop => -- COUNT_LOOP8650[m.cp:11]
        pro_state_next <= S_i2_for_loop_cond;
      when S_i2_for_loop_cond => -- COUNT_LOOP8650[m.cp:11]
        if CONST_I5_10 >= LOOP_i_0 then
          pro_state_next <= S_i3_assign;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i3_assign => -- ASSIGN16603[m.cp:12]
        pro_state_next <= S_i2_for_loop_incr;
      when S_i2_for_loop_incr => -- COUNT_LOOP8650[m.cp:11]
        pro_state_next <= S_i2_for_loop_cond;
      when S_i4_assign => -- ASSIGN44358[m.cp:13]
        pro_state_next <= S_p1_end;
      when S_p1_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          a,
          pro_state
          )
  begin
    -- Default values
    REG_x_WR <= to_signed(0,8);
    REG_x_WE <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        null;
      when S_i1_assign => -- ASSIGN87757[m.cp:10]
        null;
      when S_i2_for_loop => -- COUNT_LOOP8650[m.cp:11]
        null;
      when S_i2_for_loop_cond => -- COUNT_LOOP8650[m.cp:11]
        null;
      when S_i3_assign => -- ASSIGN16603[m.cp:12]
        null;
      when S_i2_for_loop_incr => -- COUNT_LOOP8650[m.cp:11]
        null;
      when S_i4_assign => -- ASSIGN44358[m.cp:13]
        REG_x_WR <= a;
        REG_x_WE <= '1';
      when S_p1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          REG_x_RD,
          a,
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        a <= to_signed(0,8);
        LOOP_i_0 <= to_signed(0,5);
      else
        case pro_state is
          when S_p1_start => -- PROCESS0[:0]
            null;
          when S_i1_assign => -- ASSIGN87757[m.cp:10]
            a <= REG_x_RD;
          when S_i2_for_loop => -- COUNT_LOOP8650[m.cp:11]
            LOOP_i_0 <= CONST_I5_1;
          when S_i2_for_loop_cond => -- COUNT_LOOP8650[m.cp:11]
            null;
          when S_i3_assign => -- ASSIGN16603[m.cp:12]
            a <= mult(a,CONST_I8_2);
          when S_i2_for_loop_incr => -- COUNT_LOOP8650[m.cp:11]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_i4_assign => -- ASSIGN44358[m.cp:13]
            null;
          when S_p1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
