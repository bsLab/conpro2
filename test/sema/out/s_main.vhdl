--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (C) 2006-2008 ** BSSLAB, Dr. Stefan Bosse
--         Version 2.1 A15 **  2049142 total genes
--         Compiled on Thu Nov 27 11:07:26 CET 2008
--         Compiled by sbosse
--         Compiled on SunOS sun203 5.10 Generic_118833-33 sun4u sparc SUNW,A70

-- Process implementation of process <main> from module <S>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity s_main is
port(
  -- Connections to external objects, components and the outside world
  signal PRO_p_START: out std_logic;
  signal PRO_p_GD: in std_logic;
  signal PRO_p_SEL: out integer;
  signal SEMA_s_INIT: out std_logic;
  signal SEMA_s_GD: in std_logic;
  signal REG_x_WR: out signed(7 downto 0);
  signal REG_x_WE: out std_logic;
  signal REG_x_GD: in std_logic;
  signal REG_y_WR: out signed(7 downto 0);
  signal REG_y_WE: out std_logic;
  signal REG_y_GD: in std_logic;
  signal REG_z_WR: out signed(7 downto 0);
  signal REG_z_WE: out std_logic;
  signal REG_z_GD: in std_logic;
  signal PRO_main_ENABLE: in std_logic;
  signal PRO_main_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end s_main;
architecture main of s_main is
  -- Local and temporary data objects
  signal LOOP_i_4: signed(3 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_main_start, -- PROCESS0[:0]
    S_i1_fun, -- FUN77977[s.cp:30]
    S_i2_assign, -- ASSIGN57915[s.cp:31]
    S_i3_assign, -- ASSIGN45461[s.cp:32]
    S_i4_assign, -- ASSIGN70081[s.cp:33]
    S_i5_for_loop, -- COUNT_LOOP88513[s.cp:34]
    S_i5_for_loop_cond, -- COUNT_LOOP88513[s.cp:34]
    S_i6_fun, -- FUN81371[s.cp:35]
    S_i5_for_loop_incr, -- COUNT_LOOP88513[s.cp:34]
    S_main_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_main_start;
  signal pro_state_next: pro_states := S_main_start;
  -- Auxilliary toplevel definitions
  constant CONST_I8_0: signed(7 downto 0) := "00000000";
  constant CONST_I4_0: signed(3 downto 0) := "0000";
  constant CONST_I4_3: signed(3 downto 0) := "0011";
  signal LOOP_i_4_CONV_NAT4: integer;
  constant CONST_I4_1: signed(3 downto 0) := "0001";
begin
  state_transition: process(
          PRO_main_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_main_ENABLE='0' then
        pro_state <= S_main_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          SEMA_s_GD,
          REG_x_GD,
          REG_y_GD,
          REG_z_GD,
          LOOP_i_4,
          PRO_p_GD,
          pro_state
          )
  begin
    PRO_main_END <= '0';
    case pro_state is
      when S_main_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_fun;
      when S_i1_fun => -- FUN77977[s.cp:30]
        if not((SEMA_s_GD) = ('0')) then
          pro_state_next <= S_i1_fun;
        else
          pro_state_next <= S_i2_assign;
        end if;
      when S_i2_assign => -- ASSIGN57915[s.cp:31]
        if REG_x_GD = '1' then
          pro_state_next <= S_i2_assign;
        else
          pro_state_next <= S_i3_assign;
        end if;
      when S_i3_assign => -- ASSIGN45461[s.cp:32]
        if REG_y_GD = '1' then
          pro_state_next <= S_i3_assign;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- ASSIGN70081[s.cp:33]
        if REG_z_GD = '1' then
          pro_state_next <= S_i4_assign;
        else
          pro_state_next <= S_i5_for_loop;
        end if;
      when S_i5_for_loop => -- COUNT_LOOP88513[s.cp:34]
        pro_state_next <= S_i5_for_loop_cond;
      when S_i5_for_loop_cond => -- COUNT_LOOP88513[s.cp:34]
        if CONST_I4_3 >= LOOP_i_4 then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_main_end;
        end if;
      when S_i6_fun => -- FUN81371[s.cp:35]
        if PRO_p_GD = '1' then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_i5_for_loop_incr;
        end if;
      when S_i5_for_loop_incr => -- COUNT_LOOP88513[s.cp:34]
        pro_state_next <= S_i5_for_loop_cond;
      when S_main_end => -- PROCESS0[:0]
        pro_state_next <= S_main_end;
        PRO_main_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          LOOP_i_4_CONV_NAT4,
          LOOP_i_4,
          pro_state
          )
  begin
    -- Default values
    SEMA_s_INIT <= '0';
    REG_x_WR <= to_signed(0,8);
    REG_x_WE <= '0';
    REG_y_WR <= to_signed(0,8);
    REG_y_WE <= '0';
    REG_z_WR <= to_signed(0,8);
    REG_z_WE <= '0';
    PRO_p_START <= '0';
    PRO_p_SEL <= 0;
    case pro_state is
      when S_main_start => -- PROCESS0[:0]
        null;
      when S_i1_fun => -- FUN77977[s.cp:30]
        SEMA_s_INIT <= '1';
      when S_i2_assign => -- ASSIGN57915[s.cp:31]
        REG_x_WR <= CONST_I8_0;
        REG_x_WE <= '1';
      when S_i3_assign => -- ASSIGN45461[s.cp:32]
        REG_y_WR <= CONST_I8_0;
        REG_y_WE <= '1';
      when S_i4_assign => -- ASSIGN70081[s.cp:33]
        REG_z_WR <= CONST_I8_0;
        REG_z_WE <= '1';
      when S_i5_for_loop => -- COUNT_LOOP88513[s.cp:34]
        null;
      when S_i5_for_loop_cond => -- COUNT_LOOP88513[s.cp:34]
        null;
      when S_i6_fun => -- FUN81371[s.cp:35]
        PRO_p_START <= '1';
        PRO_p_SEL <= LOOP_i_4_CONV_NAT4;
      when S_i5_for_loop_incr => -- COUNT_LOOP88513[s.cp:34]
        null;
      when S_main_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_4 <= to_signed(0,4);
      else
        case pro_state is
          when S_main_start => -- PROCESS0[:0]
            null;
          when S_i1_fun => -- FUN77977[s.cp:30]
            null;
          when S_i2_assign => -- ASSIGN57915[s.cp:31]
            null;
          when S_i3_assign => -- ASSIGN45461[s.cp:32]
            null;
          when S_i4_assign => -- ASSIGN70081[s.cp:33]
            null;
          when S_i5_for_loop => -- COUNT_LOOP88513[s.cp:34]
            LOOP_i_4 <= CONST_I4_0;
          when S_i5_for_loop_cond => -- COUNT_LOOP88513[s.cp:34]
            null;
          when S_i6_fun => -- FUN81371[s.cp:35]
            null;
          when S_i5_for_loop_incr => -- COUNT_LOOP88513[s.cp:34]
            LOOP_i_4 <= LOOP_i_4 + CONST_I4_1;
          when S_main_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
  LOOP_i_4_CONV_NAT4 <= to_integer(unsigned(LOOP_i_4));
end main;
