--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (C) 2006-2008 ** BSSLAB, Dr. Stefan Bosse
--         Version 2.1 A15 **  2049142 total genes
--         Compiled on Thu Nov 27 11:07:26 CET 2008
--         Compiled by sbosse
--         Compiled on SunOS sun203 5.10 Generic_118833-33 sun4u sparc SUNW,A70

-- Implementation of Module <S>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity MOD_s is
port(
  -- Connections to the outside world
  signal x_RD: out std_logic_vector(7 downto 0);
  signal y_RD: out std_logic_vector(7 downto 0);
  signal z_RD: out std_logic_vector(7 downto 0);
  signal d_RD: out std_logic_vector(7 downto 0);
  signal CLK: in std_logic;
  signal RESET: in std_logic
);
end MOD_s;
architecture main of MOD_s is
  -- Process instances
  component s_p_0
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_WR: out signed(7 downto 0);
    signal REG_d_WE: out std_logic;
    signal REG_d_GD: in std_logic;
    signal SEMA_s_DOWN: out std_logic;
    signal SEMA_s_UP: out std_logic;
    signal SEMA_s_GD: in std_logic;
    signal REG_x_RD: in signed(7 downto 0);
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal REG_y_RD: in signed(7 downto 0);
    signal REG_y_WR: out signed(7 downto 0);
    signal REG_y_WE: out std_logic;
    signal REG_y_GD: in std_logic;
    signal REG_z_RD: in signed(7 downto 0);
    signal REG_z_WR: out signed(7 downto 0);
    signal REG_z_WE: out std_logic;
    signal REG_z_GD: in std_logic;
    signal PRO_p_0_ENABLE: in std_logic;
    signal PRO_p_0_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component s_p_1
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_WR: out signed(7 downto 0);
    signal REG_d_WE: out std_logic;
    signal REG_d_GD: in std_logic;
    signal SEMA_s_DOWN: out std_logic;
    signal SEMA_s_UP: out std_logic;
    signal SEMA_s_GD: in std_logic;
    signal REG_x_RD: in signed(7 downto 0);
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal REG_y_RD: in signed(7 downto 0);
    signal REG_y_WR: out signed(7 downto 0);
    signal REG_y_WE: out std_logic;
    signal REG_y_GD: in std_logic;
    signal REG_z_RD: in signed(7 downto 0);
    signal REG_z_WR: out signed(7 downto 0);
    signal REG_z_WE: out std_logic;
    signal REG_z_GD: in std_logic;
    signal PRO_p_1_ENABLE: in std_logic;
    signal PRO_p_1_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component s_p_2
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_WR: out signed(7 downto 0);
    signal REG_d_WE: out std_logic;
    signal REG_d_GD: in std_logic;
    signal SEMA_s_DOWN: out std_logic;
    signal SEMA_s_UP: out std_logic;
    signal SEMA_s_GD: in std_logic;
    signal REG_x_RD: in signed(7 downto 0);
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal REG_y_RD: in signed(7 downto 0);
    signal REG_y_WR: out signed(7 downto 0);
    signal REG_y_WE: out std_logic;
    signal REG_y_GD: in std_logic;
    signal REG_z_RD: in signed(7 downto 0);
    signal REG_z_WR: out signed(7 downto 0);
    signal REG_z_WE: out std_logic;
    signal REG_z_GD: in std_logic;
    signal PRO_p_2_ENABLE: in std_logic;
    signal PRO_p_2_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component s_p_3
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_WR: out signed(7 downto 0);
    signal REG_d_WE: out std_logic;
    signal REG_d_GD: in std_logic;
    signal SEMA_s_DOWN: out std_logic;
    signal SEMA_s_UP: out std_logic;
    signal SEMA_s_GD: in std_logic;
    signal REG_x_RD: in signed(7 downto 0);
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal REG_y_RD: in signed(7 downto 0);
    signal REG_y_WR: out signed(7 downto 0);
    signal REG_y_WE: out std_logic;
    signal REG_y_GD: in std_logic;
    signal REG_z_RD: in signed(7 downto 0);
    signal REG_z_WR: out signed(7 downto 0);
    signal REG_z_WE: out std_logic;
    signal REG_z_GD: in std_logic;
    signal PRO_p_3_ENABLE: in std_logic;
    signal PRO_p_3_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component s_main
  port(
    -- Connections to external objects, components and the outside world
    signal PRO_p_START: out std_logic;
    signal PRO_p_GD: in std_logic;
    signal PRO_p_SEL: out integer;
    signal SEMA_s_INIT: out std_logic;
    signal SEMA_s_GD: in std_logic;
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal REG_y_WR: out signed(7 downto 0);
    signal REG_y_WE: out std_logic;
    signal REG_y_GD: in std_logic;
    signal REG_z_WR: out signed(7 downto 0);
    signal REG_z_WE: out std_logic;
    signal REG_z_GD: in std_logic;
    signal PRO_main_ENABLE: in std_logic;
    signal PRO_main_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  -- Local and temporary data objects
  signal REG_d: signed(7 downto 0);
  signal REG_d_LOCKED: std_logic;
  signal REG_d_p_0_WR: signed(7 downto 0);
  signal REG_d_p_0_WE: std_logic;
  signal REG_d_p_1_WR: signed(7 downto 0);
  signal REG_d_p_1_WE: std_logic;
  signal REG_d_p_2_WR: signed(7 downto 0);
  signal REG_d_p_2_WE: std_logic;
  signal REG_d_p_3_WR: signed(7 downto 0);
  signal REG_d_p_3_WE: std_logic;
  signal REG_d_p_0_GD: std_logic;
  signal REG_d_p_1_GD: std_logic;
  signal REG_d_p_2_GD: std_logic;
  signal REG_d_p_3_GD: std_logic;
  signal SEMA_s_p_3_DOWN: std_logic;
  signal SEMA_s_p_2_DOWN: std_logic;
  signal SEMA_s_p_1_DOWN: std_logic;
  signal SEMA_s_p_0_DOWN: std_logic;
  signal SEMA_s_p_3_UP: std_logic;
  signal SEMA_s_p_2_UP: std_logic;
  signal SEMA_s_p_1_UP: std_logic;
  signal SEMA_s_p_0_UP: std_logic;
  signal SEMA_s_main_INIT: std_logic;
  signal SEMA_s_main_GD: std_logic;
  signal SEMA_s_p_3_GD: std_logic;
  signal SEMA_s_p_2_GD: std_logic;
  signal SEMA_s_p_1_GD: std_logic;
  signal SEMA_s_p_0_GD: std_logic;
  signal SEMA_s_LEVEL: std_logic_vector(7 downto 0);
  signal SEMA_s_main_QUEUED: std_logic;
  signal SEMA_s_main_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_s_p_3_QUEUED: std_logic;
  signal SEMA_s_p_3_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_s_p_2_QUEUED: std_logic;
  signal SEMA_s_p_2_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_s_p_1_QUEUED: std_logic;
  signal SEMA_s_p_1_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_s_p_0_QUEUED: std_logic;
  signal SEMA_s_p_0_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_s_HEAD: std_logic_vector(2 downto 0);
  signal SEMA_s_TAIL: std_logic_vector(2 downto 0);
  signal SEMA_s_OWNER: std_logic_vector(2 downto 0);
  signal REG_x: signed(7 downto 0);
  signal REG_x_LOCKED: std_logic;
  signal REG_x_RD: signed(7 downto 0);
  signal REG_x_p_0_WR: signed(7 downto 0);
  signal REG_x_p_0_WE: std_logic;
  signal REG_x_p_1_WR: signed(7 downto 0);
  signal REG_x_p_1_WE: std_logic;
  signal REG_x_p_2_WR: signed(7 downto 0);
  signal REG_x_p_2_WE: std_logic;
  signal REG_x_p_3_WR: signed(7 downto 0);
  signal REG_x_p_3_WE: std_logic;
  signal REG_x_main_WR: signed(7 downto 0);
  signal REG_x_main_WE: std_logic;
  signal REG_x_p_0_GD: std_logic;
  signal REG_x_p_1_GD: std_logic;
  signal REG_x_p_2_GD: std_logic;
  signal REG_x_p_3_GD: std_logic;
  signal REG_x_main_GD: std_logic;
  signal REG_y: signed(7 downto 0);
  signal REG_y_LOCKED: std_logic;
  signal REG_y_RD: signed(7 downto 0);
  signal REG_y_p_0_WR: signed(7 downto 0);
  signal REG_y_p_0_WE: std_logic;
  signal REG_y_p_1_WR: signed(7 downto 0);
  signal REG_y_p_1_WE: std_logic;
  signal REG_y_p_2_WR: signed(7 downto 0);
  signal REG_y_p_2_WE: std_logic;
  signal REG_y_p_3_WR: signed(7 downto 0);
  signal REG_y_p_3_WE: std_logic;
  signal REG_y_main_WR: signed(7 downto 0);
  signal REG_y_main_WE: std_logic;
  signal REG_y_p_0_GD: std_logic;
  signal REG_y_p_1_GD: std_logic;
  signal REG_y_p_2_GD: std_logic;
  signal REG_y_p_3_GD: std_logic;
  signal REG_y_main_GD: std_logic;
  signal REG_z: signed(7 downto 0);
  signal REG_z_LOCKED: std_logic;
  signal REG_z_RD: signed(7 downto 0);
  signal REG_z_p_0_WR: signed(7 downto 0);
  signal REG_z_p_0_WE: std_logic;
  signal REG_z_p_1_WR: signed(7 downto 0);
  signal REG_z_p_1_WE: std_logic;
  signal REG_z_p_2_WR: signed(7 downto 0);
  signal REG_z_p_2_WE: std_logic;
  signal REG_z_p_3_WR: signed(7 downto 0);
  signal REG_z_p_3_WE: std_logic;
  signal REG_z_main_WR: signed(7 downto 0);
  signal REG_z_main_WE: std_logic;
  signal REG_z_p_0_GD: std_logic;
  signal REG_z_p_1_GD: std_logic;
  signal REG_z_p_2_GD: std_logic;
  signal REG_z_p_3_GD: std_logic;
  signal REG_z_main_GD: std_logic;
  signal PRO_main_ENABLE: std_logic;
  signal PRO_main_END: std_logic;
  signal PRO_p_main_START: std_logic;
  signal PRO_p_main_SEL: integer;
  signal PRO_p_main_GD: std_logic;
  signal PRO_p_0_ENABLE: std_logic;
  signal PRO_p_0_END: std_logic;
  signal PRO_p_0_main_START: std_logic;
  signal PRO_p_0_main_GD: std_logic;
  signal PRO_p_1_ENABLE: std_logic;
  signal PRO_p_1_END: std_logic;
  signal PRO_p_1_main_START: std_logic;
  signal PRO_p_1_main_GD: std_logic;
  signal PRO_p_2_ENABLE: std_logic;
  signal PRO_p_2_END: std_logic;
  signal PRO_p_2_main_START: std_logic;
  signal PRO_p_2_main_GD: std_logic;
  signal PRO_p_3_ENABLE: std_logic;
  signal PRO_p_3_END: std_logic;
  signal PRO_p_3_main_START: std_logic;
  signal PRO_p_3_main_GD: std_logic;
  -- State Processing
  -- Aux. signals
  signal conpro_system_clk: std_logic;
  signal conpro_system_reset: std_logic;
begin
  -- Module implementation
  -- Guarded Register
  IMPL_REG_d: process(
          REG_d_p_0_WR,
          REG_d_p_0_WE,
          REG_d_p_1_WR,
          REG_d_p_1_WE,
          REG_d_p_2_WR,
          REG_d_p_2_WE,
          REG_d_p_3_WR,
          REG_d_p_3_WE,
          REG_d_LOCKED,
          REG_d,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d <= to_signed(0,8);
      REG_d_LOCKED <= '0';
      REG_d_p_0_GD <= '1';
      REG_d_p_1_GD <= '1';
      REG_d_p_2_GD <= '1';
      REG_d_p_3_GD <= '1';
     else
      REG_d_p_0_GD <= '1';
      REG_d_p_1_GD <= '1';
      REG_d_p_2_GD <= '1';
      REG_d_p_3_GD <= '1';
      if REG_d_LOCKED = '0' and REG_d_p_0_WE='1' then
       REG_d <= REG_d_p_0_WR;
       REG_d_p_0_GD <= '0';
       REG_d_LOCKED <= '1';
      elsif REG_d_LOCKED = '0' and REG_d_p_1_WE='1' then
       REG_d <= REG_d_p_1_WR;
       REG_d_p_1_GD <= '0';
       REG_d_LOCKED <= '1';
      elsif REG_d_LOCKED = '0' and REG_d_p_2_WE='1' then
       REG_d <= REG_d_p_2_WR;
       REG_d_p_2_GD <= '0';
       REG_d_LOCKED <= '1';
      elsif REG_d_LOCKED = '0' and REG_d_p_3_WE='1' then
       REG_d <= REG_d_p_3_WR;
       REG_d_p_3_GD <= '0';
       REG_d_LOCKED <= '1';
      elsif REG_d_LOCKED = '1' then
       REG_d_LOCKED <= '0';
       REG_d_p_0_GD <= '1';
       REG_d_p_1_GD <= '1';
       REG_d_p_2_GD <= '1';
       REG_d_p_3_GD <= '1';
      end if;
     end if;
    end if;
  end process IMPL_REG_d;
  
  --
  -- EMI <Semaphore.semaphore.s> Process
  --
  SEMA_s_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    SEMA_s_main_INIT,
    SEMA_s_p_3_DOWN,
    SEMA_s_LEVEL,
    SEMA_s_p_2_DOWN,
    SEMA_s_p_1_DOWN,
    SEMA_s_p_0_DOWN,
    SEMA_s_p_3_QUEUED,
    SEMA_s_OWNER,
    SEMA_s_HEAD,
    SEMA_s_p_2_QUEUED,
    SEMA_s_p_1_QUEUED,
    SEMA_s_p_0_QUEUED,
    SEMA_s_p_3_PRIO,
    SEMA_s_TAIL,
    SEMA_s_p_2_PRIO,
    SEMA_s_p_1_PRIO,
    SEMA_s_p_0_PRIO,
    SEMA_s_p_3_UP,
    SEMA_s_p_2_UP,
    SEMA_s_p_1_UP,
    SEMA_s_p_0_UP)
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        SEMA_s_LEVEL <= "00000001";
        SEMA_s_main_GD <= '1';
        SEMA_s_main_QUEUED <= '0';
        SEMA_s_main_PRIO <= "000";
        SEMA_s_p_3_GD <= '1';
        SEMA_s_p_3_QUEUED <= '0';
        SEMA_s_p_3_PRIO <= "000";
        SEMA_s_p_2_GD <= '1';
        SEMA_s_p_2_QUEUED <= '0';
        SEMA_s_p_2_PRIO <= "000";
        SEMA_s_p_1_GD <= '1';
        SEMA_s_p_1_QUEUED <= '0';
        SEMA_s_p_1_PRIO <= "000";
        SEMA_s_p_0_GD <= '1';
        SEMA_s_p_0_QUEUED <= '0';
        SEMA_s_p_0_PRIO <= "000";
        SEMA_s_HEAD <= "000";
        SEMA_s_TAIL <= "000";
        SEMA_s_OWNER <= "000";
      else
        SEMA_s_main_GD <= '1';
        SEMA_s_p_3_GD <= '1';
        SEMA_s_p_2_GD <= '1';
        SEMA_s_p_1_GD <= '1';
        SEMA_s_p_0_GD <= '1';
        if (SEMA_s_main_INIT) = ('1') then
          SEMA_s_LEVEL <= "00000001";
          SEMA_s_main_GD <= '0';
          SEMA_s_main_QUEUED <= '0';
          SEMA_s_main_PRIO <= "000";
          SEMA_s_p_3_QUEUED <= '0';
          SEMA_s_p_3_PRIO <= "000";
          SEMA_s_p_2_QUEUED <= '0';
          SEMA_s_p_2_PRIO <= "000";
          SEMA_s_p_1_QUEUED <= '0';
          SEMA_s_p_1_PRIO <= "000";
          SEMA_s_p_0_QUEUED <= '0';
          SEMA_s_p_0_PRIO <= "000";
          SEMA_s_HEAD <= "000";
          SEMA_s_TAIL <= "000";
          SEMA_s_OWNER <= "000";
        elsif ((SEMA_s_p_3_DOWN) = ('1')) and (not ((SEMA_s_LEVEL) = ("00000000"))) then
          SEMA_s_p_3_GD <= '0';
          SEMA_s_LEVEL <= (SEMA_s_LEVEL) - (1);
          SEMA_s_OWNER <= "100";
        elsif ((SEMA_s_p_2_DOWN) = ('1')) and (not ((SEMA_s_LEVEL) = ("00000000"))) then
          SEMA_s_p_2_GD <= '0';
          SEMA_s_LEVEL <= (SEMA_s_LEVEL) - (1);
          SEMA_s_OWNER <= "011";
        elsif ((SEMA_s_p_1_DOWN) = ('1')) and (not ((SEMA_s_LEVEL) = ("00000000"))) then
          SEMA_s_p_1_GD <= '0';
          SEMA_s_LEVEL <= (SEMA_s_LEVEL) - (1);
          SEMA_s_OWNER <= "010";
        elsif ((SEMA_s_p_0_DOWN) = ('1')) and (not ((SEMA_s_LEVEL) = ("00000000"))) then
          SEMA_s_p_0_GD <= '0';
          SEMA_s_LEVEL <= (SEMA_s_LEVEL) - (1);
          SEMA_s_OWNER <= "001";
        elsif (((SEMA_s_p_3_DOWN) = ('1')) and ((SEMA_s_p_3_QUEUED) = ('0'))) and ((SEMA_s_OWNER) /= ("100")) then
          SEMA_s_p_3_PRIO <= (SEMA_s_HEAD) + (1);
          SEMA_s_HEAD <= (SEMA_s_HEAD) + (1);
          SEMA_s_p_3_QUEUED <= '1';
        elsif (((SEMA_s_p_2_DOWN) = ('1')) and ((SEMA_s_p_2_QUEUED) = ('0'))) and ((SEMA_s_OWNER) /= ("011")) then
          SEMA_s_p_2_PRIO <= (SEMA_s_HEAD) + (1);
          SEMA_s_HEAD <= (SEMA_s_HEAD) + (1);
          SEMA_s_p_2_QUEUED <= '1';
        elsif (((SEMA_s_p_1_DOWN) = ('1')) and ((SEMA_s_p_1_QUEUED) = ('0'))) and ((SEMA_s_OWNER) /= ("010")) then
          SEMA_s_p_1_PRIO <= (SEMA_s_HEAD) + (1);
          SEMA_s_HEAD <= (SEMA_s_HEAD) + (1);
          SEMA_s_p_1_QUEUED <= '1';
        elsif (((SEMA_s_p_0_DOWN) = ('1')) and ((SEMA_s_p_0_QUEUED) = ('0'))) and ((SEMA_s_OWNER) /= ("001")) then
          SEMA_s_p_0_PRIO <= (SEMA_s_HEAD) + (1);
          SEMA_s_HEAD <= (SEMA_s_HEAD) + (1);
          SEMA_s_p_0_QUEUED <= '1';
        elsif (((SEMA_s_p_3_DOWN) = ('1')) and ((SEMA_s_p_3_QUEUED) = ('1'))) and ((SEMA_s_p_3_PRIO) = (SEMA_s_TAIL)) then
          SEMA_s_p_3_GD <= '0';
          SEMA_s_p_3_QUEUED <= '0';
          SEMA_s_OWNER <= "100";
        elsif (((SEMA_s_p_2_DOWN) = ('1')) and ((SEMA_s_p_2_QUEUED) = ('1'))) and ((SEMA_s_p_2_PRIO) = (SEMA_s_TAIL)) then
          SEMA_s_p_2_GD <= '0';
          SEMA_s_p_2_QUEUED <= '0';
          SEMA_s_OWNER <= "011";
        elsif (((SEMA_s_p_1_DOWN) = ('1')) and ((SEMA_s_p_1_QUEUED) = ('1'))) and ((SEMA_s_p_1_PRIO) = (SEMA_s_TAIL)) then
          SEMA_s_p_1_GD <= '0';
          SEMA_s_p_1_QUEUED <= '0';
          SEMA_s_OWNER <= "010";
        elsif (((SEMA_s_p_0_DOWN) = ('1')) and ((SEMA_s_p_0_QUEUED) = ('1'))) and ((SEMA_s_p_0_PRIO) = (SEMA_s_TAIL)) then
          SEMA_s_p_0_GD <= '0';
          SEMA_s_p_0_QUEUED <= '0';
          SEMA_s_OWNER <= "001";
        elsif (SEMA_s_p_3_UP) = ('1') or (SEMA_s_p_2_UP) = ('1') or (SEMA_s_p_1_UP) = ('1') or (SEMA_s_p_0_UP) = ('1') then
          if (SEMA_s_p_3_UP) = ('1') then
            SEMA_s_p_3_GD <= '0';
          elsif (SEMA_s_p_2_UP) = ('1') then
            SEMA_s_p_2_GD <= '0';
          elsif (SEMA_s_p_1_UP) = ('1') then
            SEMA_s_p_1_GD <= '0';
          elsif (SEMA_s_p_0_UP) = ('1') then
            SEMA_s_p_0_GD <= '0';
          end if;
          if (SEMA_s_HEAD) = (SEMA_s_TAIL) then
            SEMA_s_OWNER <= "000";
            SEMA_s_LEVEL <= (SEMA_s_LEVEL) + (1);
          else
            SEMA_s_TAIL <= (SEMA_s_TAIL) + (1);
          end if;
        end if;
      end if;
    end if;
  end process SEMA_s_SCHED;
  -- Guarded Register
  IMPL_REG_x: process(
          REG_x_p_0_WR,
          REG_x_p_0_WE,
          REG_x_p_1_WR,
          REG_x_p_1_WE,
          REG_x_p_2_WR,
          REG_x_p_2_WE,
          REG_x_p_3_WR,
          REG_x_p_3_WE,
          REG_x_main_WR,
          REG_x_main_WE,
          REG_x_LOCKED,
          REG_x,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_x_RD <= REG_x;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_x <= to_signed(0,8);
      REG_x_LOCKED <= '0';
      REG_x_p_0_GD <= '1';
      REG_x_p_1_GD <= '1';
      REG_x_p_2_GD <= '1';
      REG_x_p_3_GD <= '1';
      REG_x_main_GD <= '1';
     else
      REG_x_p_0_GD <= '1';
      REG_x_p_1_GD <= '1';
      REG_x_p_2_GD <= '1';
      REG_x_p_3_GD <= '1';
      REG_x_main_GD <= '1';
      if REG_x_LOCKED = '0' and REG_x_p_0_WE='1' then
       REG_x <= REG_x_p_0_WR;
       REG_x_p_0_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '0' and REG_x_p_1_WE='1' then
       REG_x <= REG_x_p_1_WR;
       REG_x_p_1_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '0' and REG_x_p_2_WE='1' then
       REG_x <= REG_x_p_2_WR;
       REG_x_p_2_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '0' and REG_x_p_3_WE='1' then
       REG_x <= REG_x_p_3_WR;
       REG_x_p_3_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '0' and REG_x_main_WE='1' then
       REG_x <= REG_x_main_WR;
       REG_x_main_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '1' then
       REG_x_LOCKED <= '0';
       REG_x_p_0_GD <= '1';
       REG_x_p_1_GD <= '1';
       REG_x_p_2_GD <= '1';
       REG_x_p_3_GD <= '1';
       REG_x_main_GD <= '1';
      end if;
     end if;
    end if;
  end process IMPL_REG_x;
  
  -- Guarded Register
  IMPL_REG_y: process(
          REG_y_p_0_WR,
          REG_y_p_0_WE,
          REG_y_p_1_WR,
          REG_y_p_1_WE,
          REG_y_p_2_WR,
          REG_y_p_2_WE,
          REG_y_p_3_WR,
          REG_y_p_3_WE,
          REG_y_main_WR,
          REG_y_main_WE,
          REG_y_LOCKED,
          REG_y,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_y_RD <= REG_y;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_y <= to_signed(0,8);
      REG_y_LOCKED <= '0';
      REG_y_p_0_GD <= '1';
      REG_y_p_1_GD <= '1';
      REG_y_p_2_GD <= '1';
      REG_y_p_3_GD <= '1';
      REG_y_main_GD <= '1';
     else
      REG_y_p_0_GD <= '1';
      REG_y_p_1_GD <= '1';
      REG_y_p_2_GD <= '1';
      REG_y_p_3_GD <= '1';
      REG_y_main_GD <= '1';
      if REG_y_LOCKED = '0' and REG_y_p_0_WE='1' then
       REG_y <= REG_y_p_0_WR;
       REG_y_p_0_GD <= '0';
       REG_y_LOCKED <= '1';
      elsif REG_y_LOCKED = '0' and REG_y_p_1_WE='1' then
       REG_y <= REG_y_p_1_WR;
       REG_y_p_1_GD <= '0';
       REG_y_LOCKED <= '1';
      elsif REG_y_LOCKED = '0' and REG_y_p_2_WE='1' then
       REG_y <= REG_y_p_2_WR;
       REG_y_p_2_GD <= '0';
       REG_y_LOCKED <= '1';
      elsif REG_y_LOCKED = '0' and REG_y_p_3_WE='1' then
       REG_y <= REG_y_p_3_WR;
       REG_y_p_3_GD <= '0';
       REG_y_LOCKED <= '1';
      elsif REG_y_LOCKED = '0' and REG_y_main_WE='1' then
       REG_y <= REG_y_main_WR;
       REG_y_main_GD <= '0';
       REG_y_LOCKED <= '1';
      elsif REG_y_LOCKED = '1' then
       REG_y_LOCKED <= '0';
       REG_y_p_0_GD <= '1';
       REG_y_p_1_GD <= '1';
       REG_y_p_2_GD <= '1';
       REG_y_p_3_GD <= '1';
       REG_y_main_GD <= '1';
      end if;
     end if;
    end if;
  end process IMPL_REG_y;
  
  -- Guarded Register
  IMPL_REG_z: process(
          REG_z_p_0_WR,
          REG_z_p_0_WE,
          REG_z_p_1_WR,
          REG_z_p_1_WE,
          REG_z_p_2_WR,
          REG_z_p_2_WE,
          REG_z_p_3_WR,
          REG_z_p_3_WE,
          REG_z_main_WR,
          REG_z_main_WE,
          REG_z_LOCKED,
          REG_z,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_z_RD <= REG_z;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_z <= to_signed(0,8);
      REG_z_LOCKED <= '0';
      REG_z_p_0_GD <= '1';
      REG_z_p_1_GD <= '1';
      REG_z_p_2_GD <= '1';
      REG_z_p_3_GD <= '1';
      REG_z_main_GD <= '1';
     else
      REG_z_p_0_GD <= '1';
      REG_z_p_1_GD <= '1';
      REG_z_p_2_GD <= '1';
      REG_z_p_3_GD <= '1';
      REG_z_main_GD <= '1';
      if REG_z_LOCKED = '0' and REG_z_p_0_WE='1' then
       REG_z <= REG_z_p_0_WR;
       REG_z_p_0_GD <= '0';
       REG_z_LOCKED <= '1';
      elsif REG_z_LOCKED = '0' and REG_z_p_1_WE='1' then
       REG_z <= REG_z_p_1_WR;
       REG_z_p_1_GD <= '0';
       REG_z_LOCKED <= '1';
      elsif REG_z_LOCKED = '0' and REG_z_p_2_WE='1' then
       REG_z <= REG_z_p_2_WR;
       REG_z_p_2_GD <= '0';
       REG_z_LOCKED <= '1';
      elsif REG_z_LOCKED = '0' and REG_z_p_3_WE='1' then
       REG_z <= REG_z_p_3_WR;
       REG_z_p_3_GD <= '0';
       REG_z_LOCKED <= '1';
      elsif REG_z_LOCKED = '0' and REG_z_main_WE='1' then
       REG_z <= REG_z_main_WR;
       REG_z_main_GD <= '0';
       REG_z_LOCKED <= '1';
      elsif REG_z_LOCKED = '1' then
       REG_z_LOCKED <= '0';
       REG_z_p_0_GD <= '1';
       REG_z_p_1_GD <= '1';
       REG_z_p_2_GD <= '1';
       REG_z_p_3_GD <= '1';
       REG_z_main_GD <= '1';
      end if;
     end if;
    end if;
  end process IMPL_REG_z;
  
  -- Process control
  PRO_CONTROL_main: process(
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_main_ENABLE <= '1'; -- main process activated on reset
      end if;
    end if;
  end process PRO_CONTROL_main;
  
  -- Process control
  -- Process control multiplexer
  -- Blocking collectors
  PRO_p_main_GD <=
    PRO_p_0_main_GD and
    PRO_p_1_main_GD and
    PRO_p_2_main_GD and
    PRO_p_3_main_GD ;
  -- Operation selectors
  PRO_p_0_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=0 else '0';
  PRO_p_1_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=1 else '0';
  PRO_p_2_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=2 else '0';
  PRO_p_3_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=3 else '0';
  
  PRO_CONTROL_p_0: process(
          PRO_p_0_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_0_ENABLE <= '0';
        PRO_p_0_main_GD <= '1';
      elsif PRO_p_0_main_START = '1' then
        PRO_p_0_ENABLE <= '1';
        PRO_p_0_main_GD <= '0';
      else
        PRO_p_0_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_0;
  
  -- Process control
  PRO_CONTROL_p_1: process(
          PRO_p_1_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_1_ENABLE <= '0';
        PRO_p_1_main_GD <= '1';
      elsif PRO_p_1_main_START = '1' then
        PRO_p_1_ENABLE <= '1';
        PRO_p_1_main_GD <= '0';
      else
        PRO_p_1_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_1;
  
  -- Process control
  PRO_CONTROL_p_2: process(
          PRO_p_2_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_2_ENABLE <= '0';
        PRO_p_2_main_GD <= '1';
      elsif PRO_p_2_main_START = '1' then
        PRO_p_2_ENABLE <= '1';
        PRO_p_2_main_GD <= '0';
      else
        PRO_p_2_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_2;
  
  -- Process control
  PRO_CONTROL_p_3: process(
          PRO_p_3_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_3_ENABLE <= '0';
        PRO_p_3_main_GD <= '1';
      elsif PRO_p_3_main_START = '1' then
        PRO_p_3_ENABLE <= '1';
        PRO_p_3_main_GD <= '0';
      else
        PRO_p_3_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_3;
  
  
  -- Process instantiations
  PRO_MAP_p_0: s_p_0 port map(
    REG_d_WR => REG_d_p_0_WR,
    REG_d_WE => REG_d_p_0_WE,
    REG_d_GD => REG_d_p_0_GD,
    SEMA_s_DOWN => SEMA_s_p_0_DOWN,
    SEMA_s_UP => SEMA_s_p_0_UP,
    SEMA_s_GD => SEMA_s_p_0_GD,
    REG_x_RD => REG_x_RD,
    REG_x_WR => REG_x_p_0_WR,
    REG_x_WE => REG_x_p_0_WE,
    REG_x_GD => REG_x_p_0_GD,
    REG_y_RD => REG_y_RD,
    REG_y_WR => REG_y_p_0_WR,
    REG_y_WE => REG_y_p_0_WE,
    REG_y_GD => REG_y_p_0_GD,
    REG_z_RD => REG_z_RD,
    REG_z_WR => REG_z_p_0_WR,
    REG_z_WE => REG_z_p_0_WE,
    REG_z_GD => REG_z_p_0_GD,
    PRO_p_0_ENABLE => PRO_p_0_ENABLE,
    PRO_p_0_END => PRO_p_0_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p_1: s_p_1 port map(
    REG_d_WR => REG_d_p_1_WR,
    REG_d_WE => REG_d_p_1_WE,
    REG_d_GD => REG_d_p_1_GD,
    SEMA_s_DOWN => SEMA_s_p_1_DOWN,
    SEMA_s_UP => SEMA_s_p_1_UP,
    SEMA_s_GD => SEMA_s_p_1_GD,
    REG_x_RD => REG_x_RD,
    REG_x_WR => REG_x_p_1_WR,
    REG_x_WE => REG_x_p_1_WE,
    REG_x_GD => REG_x_p_1_GD,
    REG_y_RD => REG_y_RD,
    REG_y_WR => REG_y_p_1_WR,
    REG_y_WE => REG_y_p_1_WE,
    REG_y_GD => REG_y_p_1_GD,
    REG_z_RD => REG_z_RD,
    REG_z_WR => REG_z_p_1_WR,
    REG_z_WE => REG_z_p_1_WE,
    REG_z_GD => REG_z_p_1_GD,
    PRO_p_1_ENABLE => PRO_p_1_ENABLE,
    PRO_p_1_END => PRO_p_1_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p_2: s_p_2 port map(
    REG_d_WR => REG_d_p_2_WR,
    REG_d_WE => REG_d_p_2_WE,
    REG_d_GD => REG_d_p_2_GD,
    SEMA_s_DOWN => SEMA_s_p_2_DOWN,
    SEMA_s_UP => SEMA_s_p_2_UP,
    SEMA_s_GD => SEMA_s_p_2_GD,
    REG_x_RD => REG_x_RD,
    REG_x_WR => REG_x_p_2_WR,
    REG_x_WE => REG_x_p_2_WE,
    REG_x_GD => REG_x_p_2_GD,
    REG_y_RD => REG_y_RD,
    REG_y_WR => REG_y_p_2_WR,
    REG_y_WE => REG_y_p_2_WE,
    REG_y_GD => REG_y_p_2_GD,
    REG_z_RD => REG_z_RD,
    REG_z_WR => REG_z_p_2_WR,
    REG_z_WE => REG_z_p_2_WE,
    REG_z_GD => REG_z_p_2_GD,
    PRO_p_2_ENABLE => PRO_p_2_ENABLE,
    PRO_p_2_END => PRO_p_2_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p_3: s_p_3 port map(
    REG_d_WR => REG_d_p_3_WR,
    REG_d_WE => REG_d_p_3_WE,
    REG_d_GD => REG_d_p_3_GD,
    SEMA_s_DOWN => SEMA_s_p_3_DOWN,
    SEMA_s_UP => SEMA_s_p_3_UP,
    SEMA_s_GD => SEMA_s_p_3_GD,
    REG_x_RD => REG_x_RD,
    REG_x_WR => REG_x_p_3_WR,
    REG_x_WE => REG_x_p_3_WE,
    REG_x_GD => REG_x_p_3_GD,
    REG_y_RD => REG_y_RD,
    REG_y_WR => REG_y_p_3_WR,
    REG_y_WE => REG_y_p_3_WE,
    REG_y_GD => REG_y_p_3_GD,
    REG_z_RD => REG_z_RD,
    REG_z_WR => REG_z_p_3_WR,
    REG_z_WE => REG_z_p_3_WE,
    REG_z_GD => REG_z_p_3_GD,
    PRO_p_3_ENABLE => PRO_p_3_ENABLE,
    PRO_p_3_END => PRO_p_3_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_main: s_main port map(
    PRO_p_START => PRO_p_main_START,
    PRO_p_GD => PRO_p_main_GD,
    PRO_p_SEL => PRO_p_main_SEL,
    SEMA_s_INIT => SEMA_s_main_INIT,
    SEMA_s_GD => SEMA_s_main_GD,
    REG_x_WR => REG_x_main_WR,
    REG_x_WE => REG_x_main_WE,
    REG_x_GD => REG_x_main_GD,
    REG_y_WR => REG_y_main_WR,
    REG_y_WE => REG_y_main_WE,
    REG_y_GD => REG_y_main_GD,
    REG_z_WR => REG_z_main_WR,
    REG_z_WE => REG_z_main_WE,
    REG_z_GD => REG_z_main_GD,
    PRO_main_ENABLE => PRO_main_ENABLE,
    PRO_main_END => PRO_main_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  
  -- Toplevel assignments
  -- Monitors
  x_RD <= std_logic_vector(REG_x);
  y_RD <= std_logic_vector(REG_y);
  z_RD <= std_logic_vector(REG_z);
  d_RD <= std_logic_vector(REG_d);
  conpro_system_clk <= CLK;
  conpro_system_reset <= RESET;
end main;
