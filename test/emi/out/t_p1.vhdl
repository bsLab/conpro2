--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D149 Genetic size: 2681183
--         Compile date: Wed Apr 28 16:29:24 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p1> from module <T>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity t_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_d_RD: in signed(9 downto 0);
  signal REG_d_WR: out signed(9 downto 0);
  signal REG_d_WE: out std_logic;
  signal x_WR: out signed(9 downto 0);
  signal y_WR: out signed(9 downto 0);
  signal F_f1_RE: out std_logic;
  signal F_f1_RD: in std_logic_vector(9 downto 0);
  signal F_f1_GD: in std_logic;
  signal F_f1_WE: out std_logic;
  signal F_f1_TIME_SET: out std_logic_vector(2 downto 0);
  signal RAM_b_WR: out std_logic_vector(7 downto 0);
  signal RAM_b_WE: out std_logic;
  signal RAM_b_RD: in std_logic_vector(7 downto 0);
  signal RAM_b_RE: out std_logic;
  signal RAM_b_ADDR: out std_logic_vector(1 downto 0);
  signal RAM_b_GD: in std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end t_p1;
architecture main of t_p1 is
  -- Local and temporary data objects
  signal TEMP_0: std_logic_vector(7 downto 0);
  signal LOOP_i_0: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, -- PROCESS0[:0]
    S_i1_fun, -- FUN99481[t.cp:28]
    S_i2_fun, -- FUN43856[t.cp:29]
    S_i3_fun, -- FUN58270[t.cp:30]
    S_i4_assign, -- ASSIGN17429[t.cp:31]
    S_i4_assign_1, -- ASSIGN17429[t.cp:31]
    S_i5_for_loop, -- COUNT_LOOP85449[t.cp:32]
    S_i5_for_loop_cond, -- COUNT_LOOP85449[t.cp:32]
    S_i6_fun, -- FUN41425[t.cp:34]
    S_i7_bind_to_8, -- ASSIGN58851[t.cp:37]
    S_i5_for_loop_incr, -- COUNT_LOOP85449[t.cp:32]
    S_p1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          RAM_b_GD,
          LOOP_i_0,
          F_f1_GD,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_fun;
      when S_i1_fun => -- FUN99481[t.cp:28]
        pro_state_next <= S_i2_fun;
      when S_i2_fun => -- FUN43856[t.cp:29]
        pro_state_next <= S_i3_fun;
      when S_i3_fun => -- FUN58270[t.cp:30]
        pro_state_next <= S_i4_assign;
      when S_i4_assign => -- ASSIGN17429[t.cp:31]
        if RAM_b_GD = '1' then
          pro_state_next <= S_i4_assign;
        else
          pro_state_next <= S_i4_assign_1;
        end if;
      when S_i4_assign_1 => -- ASSIGN17429[t.cp:31]
        if RAM_b_GD = '1' then
          pro_state_next <= S_i4_assign_1;
        else
          pro_state_next <= S_i5_for_loop;
        end if;
      when S_i5_for_loop => -- COUNT_LOOP85449[t.cp:32]
        pro_state_next <= S_i5_for_loop_cond;
      when S_i5_for_loop_cond => -- COUNT_LOOP85449[t.cp:32]
        if CONST_I5_10 >= LOOP_i_0 then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_p1_end;
        end if;
      when S_i6_fun => -- FUN41425[t.cp:34]
        if not((F_f1_GD) = ('1')) then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_i7_bind_to_8;
        end if;
      when S_i7_bind_to_8 => -- ASSIGN58851[t.cp:37]
        pro_state_next <= S_i5_for_loop_incr;
      when S_i5_for_loop_incr => -- COUNT_LOOP85449[t.cp:32]
        pro_state_next <= S_i5_for_loop_cond;
      when S_p1_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          TEMP_0,
          F_f1_RD,
          REG_d_RD,
          LOOP_i_0,
          pro_state
          )
  begin
    -- Default values
    F_f1_WE <= '0';
    F_f1_TIME_SET <= "000";
    RAM_b_RE <= '0';
    RAM_b_ADDR <= "00";
    RAM_b_WE <= '0';
    RAM_b_WR <= "00000000";
    F_f1_RE <= '0';
    REG_d_WR <= to_signed(0,10);
    REG_d_WE <= '0';
    y_WR <= to_signed(0,10);
    x_WR <= to_signed(0,10);
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        null;
      when S_i1_fun => -- FUN99481[t.cp:28]
        F_f1_WE <= '1';
        F_f1_TIME_SET <= "001";
      when S_i2_fun => -- FUN43856[t.cp:29]
        F_f1_WE <= '1';
        F_f1_TIME_SET <= "010";
      when S_i3_fun => -- FUN58270[t.cp:30]
        F_f1_WE <= '1';
        F_f1_TIME_SET <= "011";
      when S_i4_assign => -- ASSIGN17429[t.cp:31]
        RAM_b_RE <= RAM_b_GD;
        RAM_b_ADDR <= "00"; -- v
      when S_i4_assign_1 => -- ASSIGN17429[t.cp:31]
        RAM_b_WR <= TEMP_0 + "00000001";
        RAM_b_WE <= RAM_b_GD;
        RAM_b_ADDR <= "00"; -- v
      when S_i5_for_loop => -- COUNT_LOOP85449[t.cp:32]
        null;
      when S_i5_for_loop_cond => -- COUNT_LOOP85449[t.cp:32]
        null;
      when S_i6_fun => -- FUN41425[t.cp:34]
        F_f1_RE <= '1';
        REG_d_WR <= L_to_I((F_f1_RD));
        REG_d_WE <= not F_f1_GD;
      when S_i7_bind_to_8 => -- ASSIGN58851[t.cp:37]
        y_WR <= REG_d_RD;
        x_WR <= In_to_Im((LOOP_i_0),5,10);
      when S_i5_for_loop_incr => -- COUNT_LOOP85449[t.cp:32]
        null;
      when S_p1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          RAM_b_RD,
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        TEMP_0 <= "00000000";
        LOOP_i_0 <= to_signed(0,5);
      else
        case pro_state is
          when S_p1_start => -- PROCESS0[:0]
            null;
          when S_i1_fun => -- FUN99481[t.cp:28]
            null;
          when S_i2_fun => -- FUN43856[t.cp:29]
            null;
          when S_i3_fun => -- FUN58270[t.cp:30]
            null;
          when S_i4_assign => -- ASSIGN17429[t.cp:31]
            TEMP_0 <= RAM_b_RD;
          when S_i4_assign_1 => -- ASSIGN17429[t.cp:31]
            null;
          when S_i5_for_loop => -- COUNT_LOOP85449[t.cp:32]
            LOOP_i_0 <= CONST_I5_1;
          when S_i5_for_loop_cond => -- COUNT_LOOP85449[t.cp:32]
            null;
          when S_i6_fun => -- FUN41425[t.cp:34]
            null;
          when S_i7_bind_to_8 => -- ASSIGN58851[t.cp:37]
            null;
          when S_i5_for_loop_incr => -- COUNT_LOOP85449[t.cp:32]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_p1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
