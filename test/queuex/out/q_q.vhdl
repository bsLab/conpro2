--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2011 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D174 Genetic size: 2713135
--         Compile date: Fri Jan 21 09:49:21 CET 2011
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Implementation of Module <Q>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity MOD_q is
port(
  -- Connections to the outside world
  signal d2_RD: out std_logic_vector(7 downto 0);
  signal d1_RD: out std_logic_vector(7 downto 0);
  signal CLK: in std_logic;
  signal RESET: in std_logic
);
end MOD_q;
architecture main of MOD_q is
  -- Process instances
  component q_p1
  port(
    -- Connections to external objects, components and the outside world
    signal QUEUE_q_WR: out std_logic_vector(7 downto 0);
    signal QUEUE_q_WE: out std_logic;
    signal QUEUE_q_GD: in std_logic;
    signal REG_d1_WR: out std_logic_vector(7 downto 0);
    signal REG_d1_WE: out std_logic;
    signal PRO_p1_ENABLE: in std_logic;
    signal PRO_p1_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component q_p2
  port(
    -- Connections to external objects, components and the outside world
    signal QUEUE_q_RD: in std_logic_vector(7 downto 0);
    signal QUEUE_q_RE: out std_logic;
    signal QUEUE_q_GD: in std_logic;
    signal REG_d2_WR: out std_logic_vector(7 downto 0);
    signal REG_d2_WE: out std_logic;
    signal PRO_p2_ENABLE: in std_logic;
    signal PRO_p2_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component q_main
  port(
    -- Connections to external objects, components and the outside world
    signal PRO_p1_START: out std_logic;
    signal PRO_p1_GD: in std_logic;
    signal PRO_p2_START: out std_logic;
    signal PRO_p2_GD: in std_logic;
    signal PRO_main_ENABLE: in std_logic;
    signal PRO_main_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  -- Local and temporary data objects
  type QRAM_q_type is array(0 to 7)
    of std_logic_vector(7 downto 0);
  signal QRAM_q: QRAM_q_type;
  signal QUEUE_q_EMPTY: std_logic;
  signal QUEUE_q_FULL: std_logic;
  signal QUEUE_q_LOCKED: std_logic;
  signal QUEUE_q_ADDR_RD: std_logic_vector(2 downto 0);
  signal QUEUE_q_ADDR_WR: std_logic_vector(2 downto 0);
  signal QRAM_q_ADDR_AUX: std_logic_vector(2 downto 0);
  signal QRAM_q_RD_ADDR: std_logic_vector(2 downto 0);
  signal QRAM_q_DIN_AUX: std_logic_vector(7 downto 0);
  signal QRAM_q_DOUT_AUX: std_logic_vector(7 downto 0);
  signal QRAM_q_WE_AUX: std_logic;
  signal QUEUE_q_p1_WR: std_logic_vector(7 downto 0);
  signal QUEUE_q_p1_WE: std_logic;
  signal QUEUE_q_p2_RD: std_logic_vector(7 downto 0);
  signal QUEUE_q_p2_RE: std_logic;
  signal QUEUE_q_p1_GD: std_logic;
  signal QUEUE_q_p2_GD: std_logic;
  signal REG_d1: std_logic_vector(7 downto 0);
  signal REG_d1_p1_WR: std_logic_vector(7 downto 0);
  signal REG_d1_p1_WE: std_logic;
  signal REG_d2: std_logic_vector(7 downto 0);
  signal REG_d2_p2_WR: std_logic_vector(7 downto 0);
  signal REG_d2_p2_WE: std_logic;
  signal PRO_main_ENABLE: std_logic;
  signal PRO_main_END: std_logic;
  signal PRO_p1_ENABLE: std_logic;
  signal PRO_p1_END: std_logic;
  signal PRO_p1_main_START: std_logic;
  signal PRO_p1_main_GD: std_logic;
  signal PRO_p2_ENABLE: std_logic;
  signal PRO_p2_END: std_logic;
  signal PRO_p2_main_START: std_logic;
  signal PRO_p2_main_GD: std_logic;
  -- State Processing
  -- Aux. signals
  signal conpro_system_clk: std_logic;
  signal conpro_system_reset: std_logic;
begin
  -- Module implementation
  -- Single Port Queue-RAM Implementation
  IMPL_QRAM_q: process(
          QRAM_q_ADDR_AUX,
          QRAM_q_DIN_AUX,
          QRAM_q_WE_AUX,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if QRAM_q_WE_AUX = '1' then
      QRAM_q(L_to_N(QRAM_q_ADDR_AUX)) <= QRAM_q_DIN_AUX;
     end if;
     QRAM_q_RD_ADDR <= QRAM_q_ADDR_AUX;
    end if;
  end process IMPL_QRAM_q;
  QRAM_q_DOUT_AUX <= QRAM_q(L_to_N(QRAM_q_RD_ADDR));
  -- Queue scheduler
  IMPL_QUEUE_q: process(
          QUEUE_q_p2_RE,
          QUEUE_q_p1_WE,
          QUEUE_q_ADDR_RD,
          QUEUE_q_ADDR_WR,
          conpro_system_clk,
          conpro_system_reset
          )
    variable wr_next: std_logic_vector(2 downto 0);
    variable rd_next: std_logic_vector(2 downto 0);
  begin
    wr_next := QUEUE_q_ADDR_WR + 1;
    rd_next := QUEUE_q_ADDR_RD + 1;
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1'
      then
        QUEUE_q_p1_GD <= '1';
        QUEUE_q_p2_GD <= '1';
        QUEUE_q_EMPTY <= '1';
        QUEUE_q_FULL <= '0';
        QUEUE_q_ADDR_RD <= "000";
        QUEUE_q_ADDR_WR <= "000";
        QUEUE_q_LOCKED <= '0';
        QRAM_q_WE_AUX <= '0';
        QRAM_q_ADDR_AUX <= "000";
        QRAM_q_DIN_AUX <= "00000000";
      else
        QRAM_q_ADDR_AUX <= QUEUE_q_ADDR_RD;
        if QUEUE_q_LOCKED = '0' and QUEUE_q_p1_WE = '1' and QUEUE_q_FULL = '0' then
          if wr_next = QUEUE_q_ADDR_RD then QUEUE_q_FULL <= '1'; end if;
          QRAM_q_DIN_AUX <= QUEUE_q_p1_WR;
          QRAM_q_ADDR_AUX <= QUEUE_q_ADDR_WR;
          QRAM_q_WE_AUX <= '1';
          QUEUE_q_ADDR_WR <= wr_next;
          QUEUE_q_LOCKED <= '1';
          QUEUE_q_p1_GD <= '0';
          QUEUE_q_EMPTY <= '0';
        elsif QUEUE_q_LOCKED = '0' and QUEUE_q_p2_RE = '1' and QUEUE_q_EMPTY = '0' then
          if rd_next = QUEUE_q_ADDR_WR then QUEUE_q_EMPTY <= '1'; end if;
          QUEUE_q_ADDR_RD <= rd_next;
          QUEUE_q_LOCKED <= '1';
          QUEUE_q_p2_GD <= '0';
          QUEUE_q_FULL <= '0';
        elsif QUEUE_q_LOCKED = '1' then
          QUEUE_q_LOCKED <= '0';
          QRAM_q_WE_AUX <= '0';
          QUEUE_q_p1_GD <= '1';
          QUEUE_q_p2_GD <= '1';
          end if;
      end if;
    end if;
  end process IMPL_QUEUE_q;
  QUEUE_q_p2_RD <= QRAM_q_DOUT_AUX;
  
  -- Register
  IMPL_REG_d1: process(
          REG_d1_p1_WR,
          REG_d1_p1_WE,
          REG_d1,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d1 <= "00000000";
     elsif REG_d1_p1_WE='1' then
      REG_d1 <= REG_d1_p1_WR;
     end if;
    end if;
  end process IMPL_REG_d1;
  
  -- Register
  IMPL_REG_d2: process(
          REG_d2_p2_WR,
          REG_d2_p2_WE,
          REG_d2,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d2 <= "00000000";
     elsif REG_d2_p2_WE='1' then
      REG_d2 <= REG_d2_p2_WR;
     end if;
    end if;
  end process IMPL_REG_d2;
  
  -- Process control
  PRO_CONTROL_main: process(
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_main_ENABLE <= '1'; -- main process activated on reset
      end if;
    end if;
  end process PRO_CONTROL_main;
  
  -- Process control
  PRO_CONTROL_p1: process(
          PRO_p1_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p1_ENABLE <= '0';
        PRO_p1_main_GD <= '1';
      elsif PRO_p1_main_START = '1' then
        PRO_p1_ENABLE <= '1';
        PRO_p1_main_GD <= '0';
      else
        PRO_p1_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p1;
  
  -- Process control
  PRO_CONTROL_p2: process(
          PRO_p2_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p2_ENABLE <= '0';
        PRO_p2_main_GD <= '1';
      elsif PRO_p2_main_START = '1' then
        PRO_p2_ENABLE <= '1';
        PRO_p2_main_GD <= '0';
      else
        PRO_p2_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p2;
  
  
  -- Process instantiations
  PRO_MAP_p1: q_p1 port map(
    QUEUE_q_WR => QUEUE_q_p1_WR,
    QUEUE_q_WE => QUEUE_q_p1_WE,
    QUEUE_q_GD => QUEUE_q_p1_GD,
    REG_d1_WR => REG_d1_p1_WR,
    REG_d1_WE => REG_d1_p1_WE,
    PRO_p1_ENABLE => PRO_p1_ENABLE,
    PRO_p1_END => PRO_p1_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p2: q_p2 port map(
    QUEUE_q_RD => QUEUE_q_p2_RD,
    QUEUE_q_RE => QUEUE_q_p2_RE,
    QUEUE_q_GD => QUEUE_q_p2_GD,
    REG_d2_WR => REG_d2_p2_WR,
    REG_d2_WE => REG_d2_p2_WE,
    PRO_p2_ENABLE => PRO_p2_ENABLE,
    PRO_p2_END => PRO_p2_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_main: q_main port map(
    PRO_p1_START => PRO_p1_main_START,
    PRO_p1_GD => PRO_p1_main_GD,
    PRO_p2_START => PRO_p2_main_START,
    PRO_p2_GD => PRO_p2_main_GD,
    PRO_main_ENABLE => PRO_main_ENABLE,
    PRO_main_END => PRO_main_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  
  -- Toplevel assignments
  -- Monitors
  d2_RD <= REG_d2;
  d1_RD <= REG_d1;
  conpro_system_clk <= CLK;
  conpro_system_reset <= RESET;
end main;
