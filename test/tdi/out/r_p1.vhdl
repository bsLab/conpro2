--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (C) 2006-2008 ** BSSLAB, Dr. Stefan Bosse
--         Version 2.1 R1 **  1881579 total genes
--         Compiled on Wed Oct 15 17:09:53 CEST 2008
--         Compiled by sbosse
--         Compiled on SunOS sun203 5.10 Generic_118833-33 sun4u sparc SUNW,A70

-- Process implementation of process <p1> from module <R>.
--
libIEEE
useIEEE1
useIEEE2
useIEEE3
useIEEE4
useIEEE5
useIEEE6
useIEEE7
useIEEE8
entity r_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_d_RD: in signed(9 downto 0);
  signal REG_d_WR: out signed(9 downto 0);
  signal REG_d_WE: out std_logic;
  signal REG_e_RD: in std_logic_vector(11 downto 0);
  signal REG_e_WR: out std_logic_vector(11 downto 0);
  signal REG_e_WE: out std_logic;
  signal REG_f_RD: in signed(3 downto 0);
  signal REG_f_WR: out signed(3 downto 0);
  signal REG_f_WE: out std_logic;
  signal REG_g_RD: in std_logic_vector(3 downto 0);
  signal REG_g_WR: out std_logic_vector(3 downto 0);
  signal REG_g_WE: out std_logic;
  signal x_WR: out signed(9 downto 0);
  signal y_WR: out signed(9 downto 0);
  signal F_rnd1_RE: out std_logic;
  signal F_rnd1_RD: in std_logic_vector(9 downto 0);
  signal F_rnd1_GD: in std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end r_p1;
architecture main of r_p1 is
  -- Local and temporary data objects
  signal LOOP_i_0: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, -- PROCESS0[:0]
    S_i1_fun, -- FUN38352[r.cp:25]
    S_i2_assign, -- ASSIGN37244[r.cp:26]
    S_i3_fun, -- FUN46721[r.cp:27]
    S_i4_assign, -- ASSIGN53945[r.cp:28]
    S_i5_fun, -- FUN95378[r.cp:29]
    S_i6_assign, -- ASSIGN30493[r.cp:30]
    S_i7_for_loop, -- COUNT_LOOP91172[r.cp:33]
    S_i7_for_loop_cond, -- COUNT_LOOP91172[r.cp:33]
    S_i8_fun, -- FUN46811[r.cp:35]
    S_i9_bind_to_10, -- ASSIGN8650[r.cp:38]
    S_i7_for_loop_incr, -- COUNT_LOOP91172[r.cp:33]
    S_p1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I4_1: signed(3 downto 0) := "0001";
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
  signal LOOP_i_0_CONV_I10: signed(9 downto 0);
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          F_rnd1_GD,
          LOOP_i_0,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_fun;
      when S_i1_fun => -- FUN38352[r.cp:25]
        if not((F_rnd1_GD) = ('0')) then
          pro_state_next <= S_i1_fun;
        else
          pro_state_next <= S_i2_assign;
        end if;
      when S_i2_assign => -- ASSIGN37244[r.cp:26]
        pro_state_next <= S_i3_fun;
      when S_i3_fun => -- FUN46721[r.cp:27]
        if not((F_rnd1_GD) = ('0')) then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- ASSIGN53945[r.cp:28]
        pro_state_next <= S_i5_fun;
      when S_i5_fun => -- FUN95378[r.cp:29]
        if not((F_rnd1_GD) = ('0')) then
          pro_state_next <= S_i5_fun;
        else
          pro_state_next <= S_i6_assign;
        end if;
      when S_i6_assign => -- ASSIGN30493[r.cp:30]
        pro_state_next <= S_i7_for_loop;
      when S_i7_for_loop => -- COUNT_LOOP91172[r.cp:33]
        pro_state_next <= S_i7_for_loop_cond;
      when S_i7_for_loop_cond => -- COUNT_LOOP91172[r.cp:33]
        if CONST_I5_10 >= LOOP_i_0 then
          pro_state_next <= S_i8_fun;
        else
          pro_state_next <= S_p1_end;
        end if;
      when S_i8_fun => -- FUN46811[r.cp:35]
        if not((F_rnd1_GD) = ('0')) then
          pro_state_next <= S_i8_fun;
        else
          pro_state_next <= S_i9_bind_to_10;
        end if;
      when S_i9_bind_to_10 => -- ASSIGN8650[r.cp:38]
        pro_state_next <= S_i7_for_loop_incr;
      when S_i7_for_loop_incr => -- COUNT_LOOP91172[r.cp:33]
        pro_state_next <= S_i7_for_loop_cond;
      when S_p1_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          F_rnd1_RD,
          REG_e_RD,
          REG_f_RD,
          REG_g_RD,
          REG_d_RD,
          LOOP_i_0_CONV_I10,
          LOOP_i_0,
          pro_state
          )
  begin
    -- Default values
    F_rnd1_RE <= '0';
    REG_e_WR <= "000000000000";
    REG_e_WE <= '0';
    REG_f_WR <= to_signed(0,4);
    REG_f_WE <= '0';
    REG_g_WR <= "0000";
    REG_g_WE <= '0';
    REG_d_WR <= to_signed(0,10);
    REG_d_WE <= '0';
    y_WR <= to_signed(0,10);
    x_WR <= to_signed(0,10);
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        null;
      when S_i1_fun => -- FUN38352[r.cp:25]
        F_rnd1_RE <= '1';
        REG_e_WR <= ("00" & F_rnd1_RD);
        REG_e_WE <= not F_rnd1_GD;
      when S_i2_assign => -- ASSIGN37244[r.cp:26]
        REG_e_WR <= REG_e_RD + "000000000001";
        REG_e_WE <= '1';
      when S_i3_fun => -- FUN46721[r.cp:27]
        F_rnd1_RE <= '1';
        REG_f_WR <= resize(signed(F_rnd1_RD),4);
        REG_f_WE <= not F_rnd1_GD;
      when S_i4_assign => -- ASSIGN53945[r.cp:28]
        REG_f_WR <= REG_f_RD + CONST_I4_1;
        REG_f_WE <= '1';
      when S_i5_fun => -- FUN95378[r.cp:29]
        F_rnd1_RE <= '1';
        REG_g_WR <= F_rnd1_RD(3 downto 0);
        REG_g_WE <= not F_rnd1_GD;
      when S_i6_assign => -- ASSIGN30493[r.cp:30]
        REG_g_WR <= REG_g_RD + "0001";
        REG_g_WE <= '1';
      when S_i7_for_loop => -- COUNT_LOOP91172[r.cp:33]
        null;
      when S_i7_for_loop_cond => -- COUNT_LOOP91172[r.cp:33]
        null;
      when S_i8_fun => -- FUN46811[r.cp:35]
        F_rnd1_RE <= '1';
        REG_d_WR <= signed(F_rnd1_RD);
        REG_d_WE <= not F_rnd1_GD;
      when S_i9_bind_to_10 => -- ASSIGN8650[r.cp:38]
        y_WR <= REG_d_RD;
        x_WR <= LOOP_i_0_CONV_I10;
      when S_i7_for_loop_incr => -- COUNT_LOOP91172[r.cp:33]
        null;
      when S_p1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_0 <= to_signed(0,5);
      else
        case pro_state is
          when S_p1_start => -- PROCESS0[:0]
            null;
          when S_i1_fun => -- FUN38352[r.cp:25]
            null;
          when S_i2_assign => -- ASSIGN37244[r.cp:26]
            null;
          when S_i3_fun => -- FUN46721[r.cp:27]
            null;
          when S_i4_assign => -- ASSIGN53945[r.cp:28]
            null;
          when S_i5_fun => -- FUN95378[r.cp:29]
            null;
          when S_i6_assign => -- ASSIGN30493[r.cp:30]
            null;
          when S_i7_for_loop => -- COUNT_LOOP91172[r.cp:33]
            LOOP_i_0 <= CONST_I5_1;
          when S_i7_for_loop_cond => -- COUNT_LOOP91172[r.cp:33]
            null;
          when S_i8_fun => -- FUN46811[r.cp:35]
            null;
          when S_i9_bind_to_10 => -- ASSIGN8650[r.cp:38]
            null;
          when S_i7_for_loop_incr => -- COUNT_LOOP91172[r.cp:33]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_p1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
  LOOP_i_0_CONV_I10 <= resize(LOOP_i_0,10);
end main;
