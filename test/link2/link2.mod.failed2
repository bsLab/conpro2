--
--      ==================================
--      OOOO   OOOO OOOO  O      O   OOOO
--      O   O  O    O     O     O O  O   O
--      O   O  O    O     O     O O  O   O
--      OOOO   OOOO OOOO  O     OOO  OOOO
--      O   O     O    O  O    O   O O   O
--      O   O     O    O  O    O   O O   O
--      OOOO   OOOO OOOO  OOOO O   O OOOO
--      ==================================
--      BSSLAB, Dr. Stefan Bosse, http://www.bsslab.de
--
--      COPYRIGHT: THIS SOFTWARE, EXECUTABLE AND SOURCE CODE IS OWNED BY BSSLAB.
--                 THIS SOURCE CODE MAY NOT BE COPIED, EXTRACTED,
--                 MODIFIED, OR OTHERWISE USED IN A CONTEXT
--                 OUTSIDE OF THE SOFTWARE SYSTEM.
--
--    $AUTHORS:     Stefan Bosse
--    $INITIAL:     (C) 2006-2011 BSSLAB
--    $CREATED:     1.12.2010
--    $VERSION:     #version
--
--    $INFO:
--
--  CONPRO EMI library
--
--
-- A 4-phase dual-rail protocol:
--
--    STATE   D1 D2 ACK  COMPL
--    ---------------------
--    EMPTY   0  0  -0   0
--    DATA 1  1  0  +1   1   (VALID)
--    DATA 0  0  1  +1   1   (VALID)
--    --
--  
--    (+): rising, (-): falling event
--
--  |SENDER|                       |RECEIVER|
--                  => D1    
--                  => D2
--                  ACK <=
--
--  Basic behaviour with EMPTY/DATA tokens:
--  
--    1. Send EMPTY, wait for ACK=0       1. Wait for EMPTY, then set ACK := 0
--    2. Send DATA, wait for ACK=1        2. Wait for VALID, store DATA 
--    3. goto 1                           3. Set ACK := 1, goto 1
--
--      
--
--
--    $ENDOFINFO
--

#version "develop.3";

--
-- parameters used, allowed and default values
--
#parameter
begin
  $class["external","internal"] <= "internal";
  
  $datawidth <= 8;
  --
  -- External class signals
  --
  $link_data_in;
  $link_ack_in;
  $link_data_out;
  $link_ack_out;
  
  $ARRAY [0,1]<= 0;
end;

--
-- Supported object methods
--
#methods
begin
  init ();
  start ();
  stop ();
  --
  -- write(data,err)
  --
  write(#rhs:logic[$datawidth],#lhs:bool);
  --
  -- read(data,err)
  --
  read(#lhs:logic[$datawidth],#lhs:bool);
  --
  -- external port interface (data_in,data_in_ack,
  --                          data_out,data_out_ack)
  --
  interface(#rhs:logic[2],#lhs:logic,
            #lhs:logic[2],#rhs:logic);
end;

#assert
begin
  size($P.init) >= 1;
  size($P.start) >= 1;
end;

--
-- Interface for processes accessing methods of object (process port, local process context)
--
#interface
begin
  foreach $p in $P.init do
  begin
    signal LINK_$O_INIT: out std_logic;
  end;
  foreach $p in $P.start do
  begin
    signal LINK_$O_START: out std_logic;
  end;
  foreach $p in $P.stop do
  begin
    signal LINK_$O_STOP: out std_logic;
  end;
  foreach $p in $P.read do
  begin
    signal LINK_$O_RE: out std_logic;
    signal LINK_$O_RD: in std_logic_vector[$datawidth];
    signal LINK_$O_RD_ERR: in std_logic;
  end;
  foreach $p in $P.write do
  begin
    signal LINK_$O_WE: out std_logic;
    signal LINK_$O_WR: out std_logic_vector[$datawidth];
    signal LINK_$O_WR_ERR: in std_logic;
  end;
  foreach $p in $P do
  begin
    signal LINK_$O_GD: in std_logic;
  end;
end;

--
-- Process mapping of object signals (global module context)
--

#mapping
begin
  foreach $p in $P.init do
  begin
    LINK_$O_INIT => LINK_$O_$p_INIT;
  end;
  foreach $p in $P.start do
  begin
    LINK_$O_START => LINK_$O_$p_START;
  end;
  foreach $p in $P.stop do
  begin
    LINK_$O_STOP => LINK_$O_$p_STOP;
  end;
  foreach $p in $P.read do
  begin
    LINK_$O_RE => LINK_$O_$p_RE;
    LINK_$O_RD => LINK_$O_$p_RD;
    LINK_$O_RD_ERR => LINK_$O_$p_RD_ERR;
  end;
  foreach $p in $P.write do
  begin
    LINK_$O_WE => LINK_$O_$p_WE;
    LINK_$O_WR => LINK_$O_$p_WR;
    LINK_$O_WR_ERR => LINK_$O_$p_WR_ERR;
  end;
  foreach $p in $P do
  begin
    LINK_$O_GD => LINK_$O_$p_GD;
  end;
end;

--
-- Object method access (local process context)
-- for each method ...
--
init: #access
begin
  #data
  begin
    LINK_$O_INIT <= LINK_$O_GD when $ACC else '0';
  end;
  #control
  begin
    wait for LINK_$O_GD = '0';
  end;
end;

read: #access
begin
  #data
  begin
    LINK_$O_RE <= LINK_$O_GD when $ACC else '0';
    $ARG1 <= LINK_$O_RD when $ACC else 0;
    $ARG2 <= LINK_$O_RD_ERR when $ACC else '0';
  end;
  #control
  begin
    wait for LINK_$O_GD = '0';
  end;
end;

write: #access
begin
  #data
  begin
    LINK_$O_WE <= LINK_$O_GD when $ACC else '0';
    LINK_$O_WR <= $ARG1 when $ACC else 0;
    $ARG2 <= LINK_$O_WR_ERR when $ACC else '0';
  end;
  #control
  begin
    wait for LINK_$O_GD = '0';
  end;
end;


interface: #access
begin
  #set
  begin
    $link_data_in  <= $ARG1;
    $link_ack_in   <= $ARG2;
    $link_data_out <= $ARG3;
    $link_ack_out  <= $ARG4;
  end;
end;


start: #access
begin
  #data
  begin
    LINK_$O_START <= LINK_$O_GD when $ACC else '0';
  end;
  #control
  begin
    wait for LINK_$O_GD = '0';
  end;
end;

stop: #access
begin
  #data
  begin
    LINK_$O_STOP <= LINK_$O_GD when $ACC else '0';
  end;
  #control
  begin
    wait for LINK_$O_GD = '0';
  end;
end;

--
-- Implementation (global module context)
-- VHDL signals required, both for mapping processes
-- and auxilliary signals.
--
#signals
begin
  --
  -- Implementation signals
  --

  foreach $p in $P.init do
  begin
    signal LINK_$O_$p_INIT: std_logic;    
  end;
  foreach $p in $P.start do
  begin
    signal LINK_$O_$p_START: std_logic;    
  end;
  foreach $p in $P.stop do
  begin
    signal LINK_$O_$p_STOP: std_logic;    
  end;
  foreach $p in $P.read do
  begin
    signal LINK_$O_$p_RE: std_logic;
    signal LINK_$O_$p_RD: std_logic_vector[$datawidth];
    signal LINK_$O_$p_RD_ERR: std_logic;
  end;
  foreach $p in $P.write do
  begin
    signal LINK_$O_$p_WE: std_logic;
    signal LINK_$O_$p_WR: std_logic_vector[$datawidth];
    signal LINK_$O_$p_WR_ERR: std_logic;
  end;
  foreach $p in $P do
  begin
    signal LINK_$O_$p_GD: std_logic;    
    signal LINK_$O_$p_LOCKed: std_logic;
  end;
end;


#signals
begin
  signal LINK_$O_EN: std_logic;
  signal LINK_$O_RE: std_logic;
  signal LINK_$O_WE: std_logic;
  signal LINK_$O_AVAIL: std_logic;
  signal LINK_$O_BUSY: std_logic;
  signal LINK_$O_DIN_ACK: std_logic;
  signal LINK_$O_DIN_COMPL: std_logic;
  signal LINK_$O_DIN_EMPTY: std_logic;
  signal LINK_$O_DOUT_EMPTY: std_logic;
  signal LINK_$O_DOUT_ACK: std_logic;
  signal LINK_$O_DOUT_ACK_S1: std_logic;
  signal LINK_$O_DOUT_ACK_S2: std_logic;
  signal LINK_$O_DIN_REG: std_logic_vector[$datawidth];
  signal LINK_$O_DIN: std_logic;
  signal LINK_$O_DIN_CNT: std_logic_vector[8];
  signal LINK_$O_DIN2: std_logic_vector[2];
  signal LINK_$O_DIN_S1: std_logic_vector[2];
  signal LINK_$O_DIN_S2: std_logic_vector[2];
  signal LINK_$O_DOUT_REG: std_logic_vector[$datawidth];
  signal LINK_$O_DOUT_SHIFT: std_logic_vector[$datawidth];
  signal LINK_$O_DOUT_CNT: std_logic_vector[8];
  signal LINK_$O_DOUT2: std_logic_vector[2];
  signal LINK_$O_LOCKED: std_logic;
  type LINK_$O_STATES is {
    LINK_$O_S_RESET,
    LINK_$O_S_REQ,
    LINK_$O_S_SET,
    LINK_$O_S_ACK
  };
  signal LINK_$O_state_in: LINK_$O_STATES;
  signal LINK_$O_state_out: LINK_$O_STATES;
end;

LINK_$O_IN_PROC:#process
begin
  if $CLK then
  begin
    if $RES or LINK_$O_EN = '0' then
    begin
      LINK_$O_state_in <= LINK_$O_S_RESET;
      LINK_$O_DIN_REG <= to_logic(0,$datawidth);
      LINK_$O_DIN_ACK <= '0';
      LINK_$O_AVAIL <= '0';
      LINK_$O_DIN_CNT <= to_logic(0,8);
    end
    else
    begin
      case LINK_$O_state_in is
      begin
        when LINK_$O_S_RESET =>
        begin
          if LINK_$O_DIN_EMPTY = '1' then
          begin
            --
            -- Wait for empty token - reset state event
            -- Return to zero phase.
            --
            LINK_$O_DIN_ACK <= '0';
            if LINK_$O_AVAIL = '1' then
            begin
              LINK_$O_state_in <= LINK_$O_S_REQ;
            end
            else
            begin
              LINK_$O_state_in <= LINK_$O_S_SET;
            end;
          end;
        end;
        when LINK_$O_S_SET =>
        begin
          if LINK_$O_DIN_COMPL = '1' then
          begin
            --
            -- Valid data token received
            --
            

            --
            -- Shift left, MSB first, LSB last
            --
            LINK_$O_DIN_REG[0] <= LINK_$O_DIN;
            LINK_$O_DIN_REG[($datawidth-1) downto 1] <=
              LINK_$O_DIN_REG[($datawidth-2) downto 0];            
            LINK_$O_state_in <= LINK_$O_S_ACK;          
          end;
        end;
        when LINK_$O_S_ACK =>
        begin
          --
          -- Send acknowledge
          --
          LINK_$O_DIN_ACK <= '1';
          LINK_$O_DIN_CNT <= LINK_$O_DIN_CNT + 1;
          
          if LINK_$O_DIN_CNT = to_logic($datawidth-1,8) then
          begin
            LINK_$O_AVAIL <= '1';  -- read event
            LINK_$O_DIN_CNT <= to_logic(0,8);
          end;
          LINK_$O_state_in <= LINK_$O_S_RESET;
        end;
        when LINK_$O_S_REQ =>
        begin
          --
          -- Wait for object read request...
          --
          
          if LINK_$O_RE = '1' then
          begin
            LINK_$O_AVAIL <= '0';
            LINK_$O_state_in <= LINK_$O_S_SET;
          end;
        end;
      end;
    end;
  end;
end;

LINK_$O_OUT_PROC:#process
begin
  if $CLK then
  begin
    if $RES or LINK_$O_EN = '0' then
    begin
      LINK_$O_state_out <= LINK_$O_S_RESET;
      LINK_$O_BUSY <= '0';
      LINK_$O_DOUT_EMPTY <= '0';
      LINK_$O_DOUT_CNT <= to_logic(0,8);
      LINK_$O_DOUT_SHIFT <= to_logic(0,$datawidth);
    end
    else
    begin
      case LINK_$O_state_out is
      begin
        when LINK_$O_S_RESET =>
        begin
          LINK_$O_DOUT_EMPTY <= '1';
          if LINK_$O_DOUT_ACK_S2 = '0' then
          begin
            LINK_$O_state_out <= LINK_$O_S_REQ;
          end;
        end;
        when LINK_$O_S_REQ =>
        begin
          if LINK_$O_DOUT_CNT = to_logic(0,8) then
          begin
            LINK_$O_BUSY <= '0';
            if LINK_$O_WE = '1' then
            begin
              LINK_$O_DOUT_EMPTY <= '0';
              LINK_$O_DOUT_SHIFT <= LINK_$O_DOUT_REG;
              LINK_$O_BUSY <= '1';
              LINK_$O_state_out <= LINK_$O_S_SET;
            end;
          end
          else
           begin
             LINK_$O_DOUT_EMPTY <= '0';
             LINK_$O_state_out <= LINK_$O_S_SET;
           end;
        end;
        when LINK_$O_S_SET =>
        begin
          if LINK_$O_DOUT_ACK_S2 = '1' then
          begin
            --
            -- Got acknowledge from receiver, send empty token
            --
            LINK_$O_state_out <= LINK_$O_S_RESET;
            
            LINK_$O_DOUT_CNT <= LINK_$O_DOUT_CNT + 1;
            --
            -- Shift left, MSB first, LSB last
            --
            LINK_$O_DOUT_SHIFT[0] <= '0';
            LINK_$O_DOUT_SHIFT[($datawidth-1) downto 1] <=
              LINK_$O_DOUT_SHIFT[($datawidth-2) downto 0];            
            if LINK_$O_DOUT_CNT = to_logic($datawidth-1,8) then 
            begin
              LINK_$O_DOUT_CNT <= to_logic(0,8);
            end;
          end;
        end;
        when others => 
        begin
          LINK_$O_state_out <= LINK_$O_S_RESET;
        end;
      end;
    end;
  end;
end;


--
-- Implementation (global module context)
-- Scheduler process: access serialization
--
LINK_$O_SCHED: #process 
begin
  if $CLK then
  begin
    if $RES then
    begin
      foreach $p in $P do
      begin
        LINK_$O_$p_GD <= '1';
      end;
      foreach $p in $P do
      begin
        LINK_$O_$p_LOCKed <= '0';
      end;
      LINK_$O_EN <= '0';
      LINK_$O_RE <= '0';
      LINK_$O_WE <= '0';
      LINK_$O_LOCKED <= '0';
      LINK_$O_DOUT_REG <= to_logic(0,$datawidth);
    end
    else if LINK_$O_LOCKED = '0' then
    begin
      sequence
      begin
        foreach $p in $P.init do
        begin
          if LINK_$O_$p_INIT = '1'  then
          begin
            LINK_$O_$p_GD <= '0';
            LINK_$O_LOCKED <= '1';
            foreach $l in $P do
            begin
              if LINK_$O_$l_LOCKed = '1' then
              begin
                LINK_$O_$l_LOCKed <= '0';
                LINK_$O_$l_GD <= '0';
              end;
            end;
          end;
        end;
        foreach $p in $P.start do
        begin
          if LINK_$O_$p_START = '1' then
          begin
            LINK_$O_LOCKED <= '1';
            LINK_$O_$p_GD <= '0';
            LINK_$O_EN <= '1';
          end;
        end;
        foreach $p in $P.stop do
        begin
          if LINK_$O_$p_STOP = '1' then
          begin
            LINK_$O_LOCKED <= '1';
            LINK_$O_$p_GD <= '0';
            LINK_$O_EN <= '0';
          end;
        end;
        foreach $p in $P.read do
        begin
          if LINK_$O_$p_RE = '1' and LINK_$O_$p_LOCKed  = '1' and LINK_$O_AVAIL = '1' then
          begin
            LINK_$O_$p_RD <= LINK_$O_DIN_REG;
            LINK_$O_$p_RD_ERR <= '0';
            LINK_$O_$p_GD <= '0';
            LINK_$O_$p_LOCKed <= '0';
            LINK_$O_RE <= '1';
            LINK_$O_LOCKED <= '1';
          end;
        end;
        foreach $p in $P.write do
        begin
          if LINK_$O_$p_WE = '1' and LINK_$O_$p_LOCKed  = '1' and LINK_$O_BUSY = '0' then
          begin
            LINK_$O_$p_WR_ERR <= '0';
            LINK_$O_$p_GD <= '0';
            LINK_$O_$p_LOCKed <= '0';
            LINK_$O_LOCKED <= '1';
          end;
        end;
        foreach $p in $P.read do
        begin
          if LINK_$O_$p_RE = '1' and LINK_$O_$p_LOCKed  = '0'  then
          begin
            if LINK_$O_AVAIL = '1' then
            begin
              LINK_$O_$p_RD <= LINK_$O_DIN_REG;
              LINK_$O_$p_RD_ERR <= '0';
              LINK_$O_$p_GD <= '0';
              LINK_$O_RE <= '1'; 
              LINK_$O_LOCKED <= '1';         
            end
            else
            begin
              LINK_$O_$p_LOCKed <= '1';
            end;
          end;
        end;
        foreach $p in $P.write do
        begin
          if LINK_$O_$p_WE = '1' and LINK_$O_$p_LOCKed  = '0' and LINK_$O_BUSY = '0' then
          begin
            LINK_$O_DOUT_REG <= LINK_$O_$p_WR;
            LINK_$O_WE <= '1';
            LINK_$O_LOCKED <= '1';
            LINK_$O_$p_LOCKed <= '1';
          end;
        end;
      end;
    end
    else
    begin
      foreach $p in $P do
      begin
        LINK_$O_$p_GD <= '1';
      end;
      LINK_$O_RE <= '0';
      LINK_$O_WE <= '0';
      LINK_$O_LOCKED <= '0';
    end;
  end;
end;

LINK_$O_SAMPLER1:#process
begin
  if $CLK then
  begin
    if $RES then
    begin
      LINK_$O_DIN_S1[0] <= '0';
      LINK_$O_DIN_S1[1] <= '0';
      LINK_$O_DOUT_ACK_S1 <= '0';
    end
    else
    begin
      LINK_$O_DIN_S1[0] <= LINK_$O_DIN2[0];
      LINK_$O_DIN_S1[1] <= LINK_$O_DIN2[1];
      LINK_$O_DOUT_ACK_S1 <= LINK_$O_DOUT_ACK;
    end;
  end;
end;
LINK_$O_SAMPLER2:#process
begin
  if $CLK then
  begin
    if $RES then
    begin
      LINK_$O_DIN_S2[0] <= '0';
      LINK_$O_DIN_S2[1] <= '0';
      LINK_$O_DOUT_ACK_S2 <= '0';
    end
    else
    begin
      LINK_$O_DIN_S2[0] <= LINK_$O_DIN_S1[0];
      LINK_$O_DIN_S2[1] <= LINK_$O_DIN_S1[1];
      LINK_$O_DOUT_ACK_S2 <= LINK_$O_DOUT_ACK_S1;
    end;
  end;
end;

LINK_$O_DECODER:#process
begin
  LINK_$O_DIN_COMPL <= LINK_$O_DIN_S2[0] xor LINK_$O_DIN_S2[1];
  LINK_$O_DIN_EMPTY <= not LINK_$O_DIN_S2[0] and not LINK_$O_DIN_S2[1];
  LINK_$O_DIN <= LINK_$O_DIN_S2[0];
end;

LINK_$O_ENCODER:#process
begin
  if LINK_$O_DOUT_EMPTY = '1' then
  begin
    LINK_$O_DOUT2 <= to_logic(0,2);
  end
  else
  begin
    LINK_$O_DOUT2[0] <= LINK_$O_DOUT_SHIFT[$datawidth-1];
    LINK_$O_DOUT2[1] <= not LINK_$O_DOUT_SHIFT[$datawidth-1];
  end;
end;

#top
begin
  LINK_$O_DIN2 <= $link_data_in;
  $link_data_out <= LINK_$O_DOUT2;
  $link_ack_in <= LINK_$O_DIN_ACK;
  LINK_$O_DOUT_ACK <= $link_ack_out;
end;
