--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2011 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D174 Genetic size: 2713135
--         Compile date: Fri Jan 21 09:49:21 CET 2011
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p1> from module <L2>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity l2_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_PRO_p1_EXCEPTION_RD: in signed(7 downto 0);
  signal REG_PRO_p1_EXCEPTION_WR: out signed(7 downto 0);
  signal REG_PRO_p1_EXCEPTION_WE: out std_logic;
  signal REG_x_WR: out signed(11 downto 0);
  signal REG_x_WE: out std_logic;
  signal LINK_ln_STOP: out std_logic;
  signal LINK_ln_RE: out std_logic;
  signal LINK_ln_RD: in std_logic_vector(11 downto 0);
  signal LINK_ln_RD_ERR: in std_logic;
  signal LINK_ln_WE: out std_logic;
  signal LINK_ln_WR: out std_logic_vector(11 downto 0);
  signal LINK_ln_WR_ERR: in std_logic;
  signal LINK_ln_GD: in std_logic;
  signal REG_xa_WR: out signed(7 downto 0);
  signal REG_xa_WE: out std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end l2_p1;
architecture main of l2_p1 is
  -- Local and temporary data objects
  signal d: std_logic_vector(11 downto 0);
  signal err: std_logic;
  signal LOOP_i_0: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, -- PROCESS0[:0]
    S_i1_assign, -- ASSIGN16603[l2.cp:33]
    S_i6_for_loop, -- COUNT_LOOP23890[l2.cp:36]
    S_i6_for_loop_cond, -- COUNT_LOOP23890[l2.cp:36]
    S_i7_bind_to_8, -- ASSIGN47800[l2.cp:38]
    S_i9_fun, -- FUN38794[l2.cp:39]
    S_i10_branch, -- BRANCH58851[l2.cp:40]
    S_i11_raise, -- BRANCH_TRUE71138[:0]
    S_i13_assign, -- ASSIGN48484[l2.cp:41]
    S_i14_fun, -- FUN40275[l2.cp:42]
    S_i15_branch, -- BRANCH15578[l2.cp:43]
    S_i16_raise, -- BRANCH_TRUE96320[:0]
    S_i18_bind_to_19, -- ASSIGN46721[l2.cp:44]
    S_i6_for_loop_incr, -- COUNT_LOOP23890[l2.cp:36]
    S_i3_select, -- FUN8441[l2.cp:49]
    S_i4_fun, -- FUN8441[l2.cp:49]
    S_i5_assign, -- CASE_BODY98648[l2.cp:49]
    S_i20_assign, -- ASSIGN61374[l2.cp:51]
    S_p1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
  constant CONST_I8_119: signed(7 downto 0) := "01110111";
  constant CONST_I8_1: signed(7 downto 0) := "00000001";
  constant CONST_I8_114: signed(7 downto 0) := "01110010";
  constant CONST_I8_0: signed(7 downto 0) := "00000000";
  constant CONST_I8_46: signed(7 downto 0) := "00101110";
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_0,
          LINK_ln_GD,
          err,
          REG_PRO_p1_EXCEPTION_RD,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_assign;
      when S_i1_assign => -- ASSIGN16603[l2.cp:33]
        pro_state_next <= S_i6_for_loop;
      when S_i6_for_loop => -- COUNT_LOOP23890[l2.cp:36]
        pro_state_next <= S_i6_for_loop_cond;
      when S_i6_for_loop_cond => -- COUNT_LOOP23890[l2.cp:36]
        if CONST_I5_10 >= LOOP_i_0 then
          pro_state_next <= S_i7_bind_to_8;
        else
          pro_state_next <= S_i20_assign;
        end if;
      when S_i7_bind_to_8 => -- ASSIGN47800[l2.cp:38]
        pro_state_next <= S_i9_fun;
      when S_i9_fun => -- FUN38794[l2.cp:39]
        if not((LINK_ln_GD) = ('0')) then
          pro_state_next <= S_i9_fun;
        else
          pro_state_next <= S_i10_branch;
        end if;
      when S_i10_branch => -- BRANCH58851[l2.cp:40]
        if err = '1' then
          pro_state_next <= S_i11_raise;
        else
          pro_state_next <= S_i13_assign;
        end if;
      when S_i11_raise => -- BRANCH_TRUE71138[:0]
        pro_state_next <= S_i3_select;
      when S_i13_assign => -- ASSIGN48484[l2.cp:41]
        pro_state_next <= S_i14_fun;
      when S_i14_fun => -- FUN40275[l2.cp:42]
        if not((LINK_ln_GD) = ('0')) then
          pro_state_next <= S_i14_fun;
        else
          pro_state_next <= S_i15_branch;
        end if;
      when S_i15_branch => -- BRANCH15578[l2.cp:43]
        if err = '1' then
          pro_state_next <= S_i16_raise;
        else
          pro_state_next <= S_i18_bind_to_19;
        end if;
      when S_i16_raise => -- BRANCH_TRUE96320[:0]
        pro_state_next <= S_i3_select;
      when S_i18_bind_to_19 => -- ASSIGN46721[l2.cp:44]
        pro_state_next <= S_i6_for_loop_incr;
      when S_i6_for_loop_incr => -- COUNT_LOOP23890[l2.cp:36]
        pro_state_next <= S_i6_for_loop_cond;
      when S_i3_select => -- FUN8441[l2.cp:49]
        case REG_PRO_p1_EXCEPTION_RD  is
          when  CONST_I8_1 => pro_state_next <= S_i4_fun;
          when  others => pro_state_next <= S_i20_assign;
        end case;
      when S_i4_fun => -- FUN8441[l2.cp:49]
        if not((LINK_ln_GD) = ('0')) then
          pro_state_next <= S_i4_fun;
        else
          pro_state_next <= S_i5_assign;
        end if;
      when S_i5_assign => -- CASE_BODY98648[l2.cp:49]
        pro_state_next <= S_i20_assign;
      when S_i20_assign => -- ASSIGN61374[l2.cp:51]
        pro_state_next <= S_p1_end;
      when S_p1_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          d,
          pro_state
          )
  begin
    -- Default values
    REG_x_WR <= to_signed(0,12);
    REG_x_WE <= '0';
    REG_xa_WR <= to_signed(0,8);
    REG_xa_WE <= '0';
    LINK_ln_WE <= '0';
    LINK_ln_WR <= "000000000000";
    REG_PRO_p1_EXCEPTION_WR <= to_signed(0,8);
    REG_PRO_p1_EXCEPTION_WE <= '0';
    LINK_ln_RE <= '0';
    LINK_ln_STOP <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        null;
      when S_i1_assign => -- ASSIGN16603[l2.cp:33]
        null;
      when S_i6_for_loop => -- COUNT_LOOP23890[l2.cp:36]
        null;
      when S_i6_for_loop_cond => -- COUNT_LOOP23890[l2.cp:36]
        null;
      when S_i7_bind_to_8 => -- ASSIGN47800[l2.cp:38]
        REG_x_WR <= L_to_I((d));
        REG_x_WE <= '1';
        REG_xa_WR <= CONST_I8_119;
        REG_xa_WE <= '1';
      when S_i9_fun => -- FUN38794[l2.cp:39]
        LINK_ln_WE <= LINK_ln_GD;
        LINK_ln_WR <= d;
      when S_i10_branch => -- BRANCH58851[l2.cp:40]
        null;
      when S_i11_raise => -- BRANCH_TRUE71138[:0]
        REG_PRO_p1_EXCEPTION_WR <= CONST_I8_1;
        REG_PRO_p1_EXCEPTION_WE <= '1';
      when S_i13_assign => -- ASSIGN48484[l2.cp:41]
        REG_xa_WR <= CONST_I8_114;
        REG_xa_WE <= '1';
      when S_i14_fun => -- FUN40275[l2.cp:42]
        LINK_ln_RE <= LINK_ln_GD;
      when S_i15_branch => -- BRANCH15578[l2.cp:43]
        null;
      when S_i16_raise => -- BRANCH_TRUE96320[:0]
        REG_PRO_p1_EXCEPTION_WR <= CONST_I8_1;
        REG_PRO_p1_EXCEPTION_WE <= '1';
      when S_i18_bind_to_19 => -- ASSIGN46721[l2.cp:44]
        REG_x_WR <= L_to_I((d));
        REG_x_WE <= '1';
      when S_i6_for_loop_incr => -- COUNT_LOOP23890[l2.cp:36]
        null;
      when S_i3_select => -- FUN8441[l2.cp:49]
        null;
      when S_i4_fun => -- FUN8441[l2.cp:49]
        LINK_ln_STOP <= LINK_ln_GD;
      when S_i5_assign => -- CASE_BODY98648[l2.cp:49]
        REG_PRO_p1_EXCEPTION_WR <= CONST_I8_0;
        REG_PRO_p1_EXCEPTION_WE <= '1';
      when S_i20_assign => -- ASSIGN61374[l2.cp:51]
        REG_xa_WR <= CONST_I8_46;
        REG_xa_WE <= '1';
      when S_p1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          LINK_ln_WR_ERR,
          LINK_ln_RD,
          LINK_ln_RD_ERR,
          d,
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        d <= "000000000000";
        LOOP_i_0 <= to_signed(0,5);
        err <= '0';
      else
        case pro_state is
          when S_p1_start => -- PROCESS0[:0]
            null;
          when S_i1_assign => -- ASSIGN16603[l2.cp:33]
            d <= "001101001001";
          when S_i6_for_loop => -- COUNT_LOOP23890[l2.cp:36]
            LOOP_i_0 <= CONST_I5_1;
          when S_i6_for_loop_cond => -- COUNT_LOOP23890[l2.cp:36]
            null;
          when S_i7_bind_to_8 => -- ASSIGN47800[l2.cp:38]
            null;
          when S_i9_fun => -- FUN38794[l2.cp:39]
            err <= LINK_ln_WR_ERR;
          when S_i10_branch => -- BRANCH58851[l2.cp:40]
            null;
          when S_i11_raise => -- BRANCH_TRUE71138[:0]
            null;
          when S_i13_assign => -- ASSIGN48484[l2.cp:41]
            null;
          when S_i14_fun => -- FUN40275[l2.cp:42]
            d <= LINK_ln_RD;
            err <= LINK_ln_RD_ERR;
          when S_i15_branch => -- BRANCH15578[l2.cp:43]
            null;
          when S_i16_raise => -- BRANCH_TRUE96320[:0]
            null;
          when S_i18_bind_to_19 => -- ASSIGN46721[l2.cp:44]
            d <= d + "000000000001";
          when S_i6_for_loop_incr => -- COUNT_LOOP23890[l2.cp:36]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_i3_select => -- FUN8441[l2.cp:49]
            null;
          when S_i4_fun => -- FUN8441[l2.cp:49]
            null;
          when S_i5_assign => -- CASE_BODY98648[l2.cp:49]
            null;
          when S_i20_assign => -- ASSIGN61374[l2.cp:51]
            null;
          when S_p1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
