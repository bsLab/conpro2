--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D148 Genetic size: 2671415
--         Compile date: Tue Apr 27 15:45:04 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <echo> from module <Com>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
use work.ConPRO.all;
entity com_echo is
port(
  -- Connections to external objects, components and the outside world
  signal REG_act_RD: in std_logic;
  signal REG_act_WR: out std_logic;
  signal REG_act_WE: out std_logic;
  signal UART_u_INIT: out std_logic;
  signal UART_u_START: out std_logic;
  signal UART_u_RE: out std_logic;
  signal UART_u_RD: in std_logic_vector(7 downto 0);
  signal UART_u_RD_ERR: in std_logic;
  signal UART_u_WE: out std_logic;
  signal UART_u_WR: out std_logic_vector(7 downto 0);
  signal UART_u_WR_ERR: in std_logic;
  signal UART_u_GD: in std_logic;
  signal PRO_echo_ENABLE: in std_logic;
  signal PRO_echo_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end com_echo;
architecture main of com_echo is
  -- Local and temporary data objects
  signal d: std_logic_vector(7 downto 0);
  signal err: std_logic;
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_echo_start, -- PROCESS0[:0]
    S_i1_fun, -- FUN72721[com.cp:42]
    S_i2_fun, -- FUN98648[com.cp:43]
    S_i3_assign, -- ASSIGN16603[com.cp:44]
    S_i4_assign, -- ASSIGN44358[com.cp:45]
    S_i5_while_loop, -- COND_LOOP17429[com.cp:46]
    S_i6_fun, -- FUN71698[com.cp:48]
    S_i7_assign, -- ASSIGN2877[com.cp:49]
    S_i8_fun, -- FUN47800[com.cp:50]
    S_echo_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_echo_start;
  signal pro_state_next: pro_states := S_echo_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_echo_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='0' or PRO_echo_ENABLE='0' then
        pro_state <= S_echo_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          UART_u_GD,
          err,
          pro_state
          )
  begin
    PRO_echo_END <= '0';
    case pro_state is
      when S_echo_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_fun;
      when S_i1_fun => -- FUN72721[com.cp:42]
        if not((UART_u_GD) = ('0')) then
          pro_state_next <= S_i1_fun;
        else
          pro_state_next <= S_i2_fun;
        end if;
      when S_i2_fun => -- FUN98648[com.cp:43]
        if not((UART_u_GD) = ('0')) then
          pro_state_next <= S_i2_fun;
        else
          pro_state_next <= S_i3_assign;
        end if;
      when S_i3_assign => -- ASSIGN16603[com.cp:44]
        pro_state_next <= S_i4_assign;
      when S_i4_assign => -- ASSIGN44358[com.cp:45]
        pro_state_next <= S_i5_while_loop;
      when S_i5_while_loop => -- COND_LOOP17429[com.cp:46]
        if err = '0' then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_echo_end;
        end if;
      when S_i6_fun => -- FUN71698[com.cp:48]
        if not((UART_u_GD) = ('0')) then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_i7_assign;
        end if;
      when S_i7_assign => -- ASSIGN2877[com.cp:49]
        pro_state_next <= S_i8_fun;
      when S_i8_fun => -- FUN47800[com.cp:50]
        if not((UART_u_GD) = ('0')) then
          pro_state_next <= S_i8_fun;
        else
          pro_state_next <= S_i5_while_loop;
        end if;
      when S_echo_end => -- PROCESS0[:0]
        pro_state_next <= S_echo_end;
        PRO_echo_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          REG_act_RD,
          d,
          pro_state
          )
  begin
    -- Default values
    UART_u_INIT <= '0';
    UART_u_START <= '0';
    REG_act_WR <= '0';
    REG_act_WE <= '0';
    UART_u_RE <= '0';
    UART_u_WE <= '0';
    UART_u_WR <= "00000000";
    case pro_state is
      when S_echo_start => -- PROCESS0[:0]
        null;
      when S_i1_fun => -- FUN72721[com.cp:42]
        UART_u_INIT <= UART_u_GD;
      when S_i2_fun => -- FUN98648[com.cp:43]
        UART_u_START <= UART_u_GD;
      when S_i3_assign => -- ASSIGN16603[com.cp:44]
        null;
      when S_i4_assign => -- ASSIGN44358[com.cp:45]
        REG_act_WR <= '0';
        REG_act_WE <= '1';
      when S_i5_while_loop => -- COND_LOOP17429[com.cp:46]
        null;
      when S_i6_fun => -- FUN71698[com.cp:48]
        UART_u_RE <= UART_u_GD;
      when S_i7_assign => -- ASSIGN2877[com.cp:49]
        REG_act_WR <= not(REG_act_RD);
        REG_act_WE <= '1';
      when S_i8_fun => -- FUN47800[com.cp:50]
        UART_u_WE <= UART_u_GD;
        UART_u_WR <= d;
      when S_echo_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          UART_u_RD,
          UART_u_RD_ERR,
          UART_u_WR_ERR,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '0' then
        err <= '0';
        d <= "00000000";
      else
        case pro_state is
          when S_echo_start => -- PROCESS0[:0]
            null;
          when S_i1_fun => -- FUN72721[com.cp:42]
            null;
          when S_i2_fun => -- FUN98648[com.cp:43]
            null;
          when S_i3_assign => -- ASSIGN16603[com.cp:44]
            err <= '0';
          when S_i4_assign => -- ASSIGN44358[com.cp:45]
            null;
          when S_i5_while_loop => -- COND_LOOP17429[com.cp:46]
            null;
          when S_i6_fun => -- FUN71698[com.cp:48]
            d <= UART_u_RD;
            err <= UART_u_RD_ERR;
          when S_i7_assign => -- ASSIGN2877[com.cp:49]
            null;
          when S_i8_fun => -- FUN47800[com.cp:50]
            err <= UART_u_WR_ERR;
          when S_echo_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
