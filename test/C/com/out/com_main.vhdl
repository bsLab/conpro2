--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D149 Genetic size: 2681845
--         Compile date: Wed Apr 28 18:22:40 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <main> from module <Com>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
use work.ConPRO.all;
entity com_main is
port(
  -- Connections to external objects, components and the outside world
  signal PRO_interpreter_START: out std_logic;
  signal PRO_interpreter_GD: in std_logic;
  signal PRO_sys_status_proc_START: out std_logic;
  signal PRO_sys_status_proc_GD: in std_logic;
  signal REG_RET_FUN_request_d2_RD: in std_logic_vector(7 downto 0);
  signal REG_ARG_FUN_request_d1_WR: out std_logic_vector(7 downto 0);
  signal REG_ARG_FUN_request_d1_WE: out std_logic;
  signal MUTEX_LOCK_FUN_request_INIT: out std_logic;
  signal MUTEX_LOCK_FUN_request_LOCK: out std_logic;
  signal MUTEX_LOCK_FUN_request_UNLOCK: out std_logic;
  signal MUTEX_LOCK_FUN_request_GD: in std_logic;
  signal PRO_FUN_request_CALL: out std_logic;
  signal PRO_FUN_request_GD: in std_logic;
  signal PRO_main_ENABLE: in std_logic;
  signal PRO_main_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end com_main;
architecture main of com_main is
  -- Local and temporary data objects
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_main_start, -- PROCESS0[:0]
    S_i1_fun, -- FUN84536[:0]
    S_i2_fun, -- FUN84123[com.cp:251]
    S_i3_fun, -- FUN25737[com.cp:252]
    S_i4_fun, -- FUN48070[com.cp:253]
    S_i5_assign, -- ASSIGN73132[com.cp:253]
    S_i6_fun, -- FUN92261[com.cp:253]
    S_i7_fun, -- FUN36986[com.cp:253]
    S_main_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_main_start;
  signal pro_state_next: pro_states := S_main_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_main_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='0' or PRO_main_ENABLE='0' then
        pro_state <= S_main_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          MUTEX_LOCK_FUN_request_GD,
          PRO_sys_status_proc_GD,
          PRO_interpreter_GD,
          PRO_FUN_request_GD,
          pro_state
          )
  begin
    PRO_main_END <= '0';
    case pro_state is
      when S_main_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_fun;
      when S_i1_fun => -- FUN84536[:0]
        if not((MUTEX_LOCK_FUN_request_GD) = ('0')) then
          pro_state_next <= S_i1_fun;
        else
          pro_state_next <= S_i2_fun;
        end if;
      when S_i2_fun => -- FUN84123[com.cp:251]
        if PRO_sys_status_proc_GD = '1' then
          pro_state_next <= S_i2_fun;
        else
          pro_state_next <= S_i3_fun;
        end if;
      when S_i3_fun => -- FUN25737[com.cp:252]
        if PRO_interpreter_GD = '1' then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_fun;
        end if;
      when S_i4_fun => -- FUN48070[com.cp:253]
        if not((MUTEX_LOCK_FUN_request_GD) = ('0')) then
          pro_state_next <= S_i4_fun;
        else
          pro_state_next <= S_i5_assign;
        end if;
      when S_i5_assign => -- ASSIGN73132[com.cp:253]
        pro_state_next <= S_i6_fun;
      when S_i6_fun => -- FUN92261[com.cp:253]
        if PRO_FUN_request_GD = '1' then
          pro_state_next <= S_i6_fun;
        else
          pro_state_next <= S_i7_fun;
        end if;
      when S_i7_fun => -- FUN36986[com.cp:253]
        if not((MUTEX_LOCK_FUN_request_GD) = ('0')) then
          pro_state_next <= S_i7_fun;
        else
          pro_state_next <= S_main_end;
        end if;
      when S_main_end => -- PROCESS0[:0]
        pro_state_next <= S_main_end;
        PRO_main_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          pro_state
          )
  begin
    -- Default values
    MUTEX_LOCK_FUN_request_INIT <= '0';
    PRO_sys_status_proc_START <= '0';
    PRO_interpreter_START <= '0';
    MUTEX_LOCK_FUN_request_LOCK <= '0';
    REG_ARG_FUN_request_d1_WR <= "00000000";
    REG_ARG_FUN_request_d1_WE <= '0';
    PRO_FUN_request_CALL <= '0';
    MUTEX_LOCK_FUN_request_UNLOCK <= '0';
    case pro_state is
      when S_main_start => -- PROCESS0[:0]
        null;
      when S_i1_fun => -- FUN84536[:0]
        MUTEX_LOCK_FUN_request_INIT <= MUTEX_LOCK_FUN_request_GD;
      when S_i2_fun => -- FUN84123[com.cp:251]
        PRO_sys_status_proc_START <= '1';
      when S_i3_fun => -- FUN25737[com.cp:252]
        PRO_interpreter_START <= '1';
      when S_i4_fun => -- FUN48070[com.cp:253]
        MUTEX_LOCK_FUN_request_LOCK <= MUTEX_LOCK_FUN_request_GD;
      when S_i5_assign => -- ASSIGN73132[com.cp:253]
        REG_ARG_FUN_request_d1_WR <= "01111000";
        REG_ARG_FUN_request_d1_WE <= '1';
      when S_i6_fun => -- FUN92261[com.cp:253]
        PRO_FUN_request_CALL <= '1';
      when S_i7_fun => -- FUN36986[com.cp:253]
        MUTEX_LOCK_FUN_request_UNLOCK <= MUTEX_LOCK_FUN_request_GD;
      when S_main_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
