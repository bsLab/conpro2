--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D149 Genetic size: 2681845
--         Compile date: Wed Apr 28 18:22:40 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <interpreter> from module <Com>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
use work.ConPRO.all;
entity com_interpreter is
port(
  -- Connections to external objects, components and the outside world
  signal REG_sys_status_WR: out std_logic_vector(2 downto 0);
  signal REG_sys_status_WE: out std_logic;
  signal REG_sys_status_GD: in std_logic;
  signal REG_sys_status_next_WR: out std_logic_vector(2 downto 0);
  signal REG_sys_status_next_WE: out std_logic;
  signal REG_sys_status_next_GD: in std_logic;
  signal PRO_com_rx_START: out std_logic;
  signal PRO_com_rx_GD: in std_logic;
  signal REG_com_timeout_RD: in std_logic;
  signal UART_com_INIT: out std_logic;
  signal UART_com_START: out std_logic;
  signal UART_com_GD: in std_logic;
  signal PRO_com_tmo_START: out std_logic;
  signal PRO_com_tmo_STOP: out std_logic;
  signal PRO_com_tmo_GD: in std_logic;
  signal QUEUE_rx_q_RD: in std_logic_vector(7 downto 0);
  signal QUEUE_rx_q_RE: out std_logic;
  signal QUEUE_rx_q_GD: in std_logic;
  signal QUEUE_tx_q_WR: out std_logic_vector(7 downto 0);
  signal QUEUE_tx_q_WE: out std_logic;
  signal QUEUE_tx_q_GD: in std_logic;
  signal PRO_com_tx_START: out std_logic;
  signal PRO_com_tx_GD: in std_logic;
  signal EVENT_rep_INIT: out std_logic;
  signal EVENT_rep_WAKEUP: out std_logic;
  signal EVENT_rep_GD: in std_logic;
  signal REG_rep_d_WR: out std_logic_vector(7 downto 0);
  signal REG_rep_d_WE: out std_logic;
  signal PRO_interpreter_ENABLE: in std_logic;
  signal PRO_interpreter_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end com_interpreter;
architecture main of com_interpreter is
  -- Local and temporary data objects
  signal d: std_logic_vector(7 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_interpreter_start, -- PROCESS0[:0]
    S_i1_fun, -- FUN95870[com.cp:195]
    S_i2_fun, -- FUN71439[com.cp:196]
    S_i3_fun, -- FUN71304[com.cp:197]
    S_i4_fun, -- FUN85601[com.cp:198]
    S_i5_fun, -- FUN35932[com.cp:199]
    S_i6_assign, -- ASSIGN54265[com.cp:201]
    S_i8_assign, -- ASSIGN91716[com.cp:205]
    S_i9_assign, -- ASSIGN68501[com.cp:206]
    S_i10_select, -- SELECT_DEF1662[com.cp:228]
    S_i11_fun, -- FUN8226[com.cp:211]
    S_i12_assign, -- ASSIGN65215[com.cp:212]
    S_i13_fun, -- FUN18924[com.cp:213]
    S_i14_branch, -- BRANCH5683[com.cp:214]
    S_i15_assign, -- ASSIGN61831[com.cp:216]
    S_i16_assign, -- ASSIGN51668[com.cp:217]
    S_i17_assign, -- ASSIGN44627[com.cp:218]
    S_i18_fun, -- FUN98117[com.cp:222]
    S_i19_assign, -- ASSIGN34258[com.cp:223]
    S_i20_fun, -- FUN3585[com.cp:224]
    S_i21_branch, -- BRANCH8260[com.cp:225]
    S_i22_assign, -- ASSIGN69341[com.cp:227]
    S_i23_fun, -- FUN71675[com.cp:228]
    S_i24_assign, -- ASSIGN54384[com.cp:229]
    S_i25_assign, -- ASSIGN68203[com.cp:233]
    S_interpreter_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_interpreter_start;
  signal pro_state_next: pro_states := S_interpreter_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_interpreter_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='0' or PRO_interpreter_ENABLE='0' then
        pro_state <= S_interpreter_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          UART_com_GD,
          PRO_com_rx_GD,
          PRO_com_tx_GD,
          EVENT_rep_GD,
          REG_sys_status_GD,
          QUEUE_rx_q_GD,
          REG_sys_status_next_GD,
          d,
          PRO_com_tmo_GD,
          REG_com_timeout_RD,
          QUEUE_tx_q_GD,
          pro_state
          )
  begin
    PRO_interpreter_END <= '0';
    case pro_state is
      when S_interpreter_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_fun;
      when S_i1_fun => -- FUN95870[com.cp:195]
        if not((UART_com_GD) = ('0')) then
          pro_state_next <= S_i1_fun;
        else
          pro_state_next <= S_i2_fun;
        end if;
      when S_i2_fun => -- FUN71439[com.cp:196]
        if not((UART_com_GD) = ('0')) then
          pro_state_next <= S_i2_fun;
        else
          pro_state_next <= S_i3_fun;
        end if;
      when S_i3_fun => -- FUN71304[com.cp:197]
        if PRO_com_rx_GD = '1' then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_fun;
        end if;
      when S_i4_fun => -- FUN85601[com.cp:198]
        if PRO_com_tx_GD = '1' then
          pro_state_next <= S_i4_fun;
        else
          pro_state_next <= S_i5_fun;
        end if;
      when S_i5_fun => -- FUN35932[com.cp:199]
        if not((EVENT_rep_GD) = ('0')) then
          pro_state_next <= S_i5_fun;
        else
          pro_state_next <= S_i6_assign;
        end if;
      when S_i6_assign => -- ASSIGN54265[com.cp:201]
        if REG_sys_status_GD = '1' then
          pro_state_next <= S_i6_assign;
        else
          pro_state_next <= S_i8_assign;
        end if;
      when S_i8_assign => -- ASSIGN91716[com.cp:205]
        if QUEUE_rx_q_GD = '1' then
          pro_state_next <= S_i8_assign;
        else
          pro_state_next <= S_i9_assign;
        end if;
      when S_i9_assign => -- ASSIGN68501[com.cp:206]
        if REG_sys_status_next_GD = '1' then
          pro_state_next <= S_i9_assign;
        else
          pro_state_next <= S_i10_select;
        end if;
      when S_i10_select => -- SELECT_DEF1662[com.cp:228]
        case d  is
          when  "01010010" => pro_state_next <= S_i11_fun;
          when  "01010000" => pro_state_next <= S_i18_fun;
          when  others => pro_state_next <= S_i25_assign;
        end case;
      when S_i11_fun => -- FUN8226[com.cp:211]
        if PRO_com_tmo_GD = '1' then
          pro_state_next <= S_i11_fun;
        else
          pro_state_next <= S_i12_assign;
        end if;
      when S_i12_assign => -- ASSIGN65215[com.cp:212]
        if QUEUE_rx_q_GD = '1' then
          pro_state_next <= S_i12_assign;
        else
          pro_state_next <= S_i13_fun;
        end if;
      when S_i13_fun => -- FUN18924[com.cp:213]
        if PRO_com_tmo_GD = '1' then
          pro_state_next <= S_i13_fun;
        else
          pro_state_next <= S_i14_branch;
        end if;
      when S_i14_branch => -- BRANCH5683[com.cp:214]
        if REG_com_timeout_RD = '0' then
          pro_state_next <= S_i15_assign;
        else
          pro_state_next <= S_i17_assign;
        end if;
      when S_i15_assign => -- ASSIGN61831[com.cp:216]
        if QUEUE_tx_q_GD = '1' then
          pro_state_next <= S_i15_assign;
        else
          pro_state_next <= S_i16_assign;
        end if;
      when S_i16_assign => -- ASSIGN51668[com.cp:217]
        if QUEUE_tx_q_GD = '1' then
          pro_state_next <= S_i16_assign;
        else
          pro_state_next <= S_i8_assign;
        end if;
      when S_i17_assign => -- ASSIGN44627[com.cp:218]
        if REG_sys_status_GD = '1' then
          pro_state_next <= S_i17_assign;
        else
          pro_state_next <= S_i8_assign;
        end if;
      when S_i18_fun => -- FUN98117[com.cp:222]
        if PRO_com_tmo_GD = '1' then
          pro_state_next <= S_i18_fun;
        else
          pro_state_next <= S_i19_assign;
        end if;
      when S_i19_assign => -- ASSIGN34258[com.cp:223]
        if QUEUE_rx_q_GD = '1' then
          pro_state_next <= S_i19_assign;
        else
          pro_state_next <= S_i20_fun;
        end if;
      when S_i20_fun => -- FUN3585[com.cp:224]
        if PRO_com_tmo_GD = '1' then
          pro_state_next <= S_i20_fun;
        else
          pro_state_next <= S_i21_branch;
        end if;
      when S_i21_branch => -- BRANCH8260[com.cp:225]
        if REG_com_timeout_RD = '0' then
          pro_state_next <= S_i22_assign;
        else
          pro_state_next <= S_i24_assign;
        end if;
      when S_i22_assign => -- ASSIGN69341[com.cp:227]
        pro_state_next <= S_i23_fun;
      when S_i23_fun => -- FUN71675[com.cp:228]
        if not((EVENT_rep_GD) = ('0')) then
          pro_state_next <= S_i23_fun;
        else
          pro_state_next <= S_i8_assign;
        end if;
      when S_i24_assign => -- ASSIGN54384[com.cp:229]
        if REG_sys_status_GD = '1' then
          pro_state_next <= S_i24_assign;
        else
          pro_state_next <= S_i8_assign;
        end if;
      when S_i25_assign => -- ASSIGN68203[com.cp:233]
        if REG_sys_status_GD = '1' then
          pro_state_next <= S_i25_assign;
        else
          pro_state_next <= S_i8_assign;
        end if;
      when S_interpreter_end => -- PROCESS0[:0]
        pro_state_next <= S_interpreter_end;
        PRO_interpreter_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          QUEUE_tx_q_GD,
          d,
          pro_state
          )
  begin
    -- Default values
    UART_com_INIT <= '0';
    UART_com_START <= '0';
    PRO_com_rx_START <= '0';
    PRO_com_tx_START <= '0';
    EVENT_rep_INIT <= '0';
    REG_sys_status_WR <= "000";
    REG_sys_status_WE <= '0';
    QUEUE_rx_q_RE <= '0';
    REG_sys_status_next_WR <= "000";
    REG_sys_status_next_WE <= '0';
    PRO_com_tmo_START <= '0';
    PRO_com_tmo_STOP <= '0';
    QUEUE_tx_q_WR <= "00000000";
    QUEUE_tx_q_WE <= '0';
    REG_rep_d_WR <= "00000000";
    REG_rep_d_WE <= '0';
    EVENT_rep_WAKEUP <= '0';
    case pro_state is
      when S_interpreter_start => -- PROCESS0[:0]
        null;
      when S_i1_fun => -- FUN95870[com.cp:195]
        UART_com_INIT <= UART_com_GD;
      when S_i2_fun => -- FUN71439[com.cp:196]
        UART_com_START <= UART_com_GD;
      when S_i3_fun => -- FUN71304[com.cp:197]
        PRO_com_rx_START <= '1';
      when S_i4_fun => -- FUN85601[com.cp:198]
        PRO_com_tx_START <= '1';
      when S_i5_fun => -- FUN35932[com.cp:199]
        EVENT_rep_INIT <= EVENT_rep_GD;
      when S_i6_assign => -- ASSIGN54265[com.cp:201]
        REG_sys_status_WR <= "001";
        REG_sys_status_WE <= '1';
      when S_i8_assign => -- ASSIGN91716[com.cp:205]
        QUEUE_rx_q_RE <=  QUEUE_rx_q_GD;
      when S_i9_assign => -- ASSIGN68501[com.cp:206]
        REG_sys_status_next_WR <= "001";
        REG_sys_status_next_WE <= '1';
      when S_i10_select => -- SELECT_DEF1662[com.cp:228]
        null;
      when S_i11_fun => -- FUN8226[com.cp:211]
        PRO_com_tmo_START <= '1';
      when S_i12_assign => -- ASSIGN65215[com.cp:212]
        QUEUE_rx_q_RE <=  QUEUE_rx_q_GD;
      when S_i13_fun => -- FUN18924[com.cp:213]
        PRO_com_tmo_STOP <= '1';
      when S_i14_branch => -- BRANCH5683[com.cp:214]
        null;
      when S_i15_assign => -- ASSIGN61831[com.cp:216]
        QUEUE_tx_q_WR <= "01010000";
        QUEUE_tx_q_WE <=  QUEUE_tx_q_GD;
      when S_i16_assign => -- ASSIGN51668[com.cp:217]
        QUEUE_tx_q_WR <= d;
        QUEUE_tx_q_WE <=  QUEUE_tx_q_GD;
      when S_i17_assign => -- ASSIGN44627[com.cp:218]
        REG_sys_status_WR <= "010";
        REG_sys_status_WE <= '1';
      when S_i18_fun => -- FUN98117[com.cp:222]
        PRO_com_tmo_START <= '1';
      when S_i19_assign => -- ASSIGN34258[com.cp:223]
        QUEUE_rx_q_RE <=  QUEUE_rx_q_GD;
      when S_i20_fun => -- FUN3585[com.cp:224]
        PRO_com_tmo_STOP <= '1';
      when S_i21_branch => -- BRANCH8260[com.cp:225]
        null;
      when S_i22_assign => -- ASSIGN69341[com.cp:227]
        REG_rep_d_WR <= d;
        REG_rep_d_WE <= '1';
      when S_i23_fun => -- FUN71675[com.cp:228]
        EVENT_rep_WAKEUP <= EVENT_rep_GD;
      when S_i24_assign => -- ASSIGN54384[com.cp:229]
        REG_sys_status_WR <= "010";
        REG_sys_status_WE <= '1';
      when S_i25_assign => -- ASSIGN68203[com.cp:233]
        REG_sys_status_WR <= "010";
        REG_sys_status_WE <= '1';
      when S_interpreter_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          QUEUE_rx_q_GD,
          QUEUE_rx_q_RD,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '0' then
        d <= "00000000";
      else
        case pro_state is
          when S_interpreter_start => -- PROCESS0[:0]
            null;
          when S_i1_fun => -- FUN95870[com.cp:195]
            null;
          when S_i2_fun => -- FUN71439[com.cp:196]
            null;
          when S_i3_fun => -- FUN71304[com.cp:197]
            null;
          when S_i4_fun => -- FUN85601[com.cp:198]
            null;
          when S_i5_fun => -- FUN35932[com.cp:199]
            null;
          when S_i6_assign => -- ASSIGN54265[com.cp:201]
            null;
          when S_i8_assign => -- ASSIGN91716[com.cp:205]
            d <= QUEUE_rx_q_RD;
          when S_i9_assign => -- ASSIGN68501[com.cp:206]
            null;
          when S_i10_select => -- SELECT_DEF1662[com.cp:228]
            null;
          when S_i11_fun => -- FUN8226[com.cp:211]
            null;
          when S_i12_assign => -- ASSIGN65215[com.cp:212]
            d <= QUEUE_rx_q_RD;
          when S_i13_fun => -- FUN18924[com.cp:213]
            null;
          when S_i14_branch => -- BRANCH5683[com.cp:214]
            null;
          when S_i15_assign => -- ASSIGN61831[com.cp:216]
            null;
          when S_i16_assign => -- ASSIGN51668[com.cp:217]
            null;
          when S_i17_assign => -- ASSIGN44627[com.cp:218]
            null;
          when S_i18_fun => -- FUN98117[com.cp:222]
            null;
          when S_i19_assign => -- ASSIGN34258[com.cp:223]
            d <= QUEUE_rx_q_RD;
          when S_i20_fun => -- FUN3585[com.cp:224]
            null;
          when S_i21_branch => -- BRANCH8260[com.cp:225]
            null;
          when S_i22_assign => -- ASSIGN69341[com.cp:227]
            null;
          when S_i23_fun => -- FUN71675[com.cp:228]
            null;
          when S_i24_assign => -- ASSIGN54384[com.cp:229]
            null;
          when S_i25_assign => -- ASSIGN68203[com.cp:233]
            null;
          when S_interpreter_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
