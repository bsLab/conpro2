--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D149 Genetic size: 2681845
--         Compile date: Wed Apr 28 18:22:40 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <com_tx> from module <Com>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
use work.ConPRO.all;
entity com_com_tx is
port(
  -- Connections to external objects, components and the outside world
  signal UART_com_WE: out std_logic;
  signal UART_com_WR: out std_logic_vector(7 downto 0);
  signal UART_com_WR_ERR: in std_logic;
  signal UART_com_GD: in std_logic;
  signal QUEUE_tx_q_RD: in std_logic_vector(7 downto 0);
  signal QUEUE_tx_q_RE: out std_logic;
  signal QUEUE_tx_q_GD: in std_logic;
  signal PRO_com_tx_ENABLE: in std_logic;
  signal PRO_com_tx_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end com_com_tx;
architecture main of com_com_tx is
  -- Local and temporary data objects
  signal d: std_logic_vector(7 downto 0);
  signal err: std_logic;
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_com_tx_start, -- PROCESS0[:0]
    S_i1_assign, -- ASSIGN41945[com.cp:182]
    S_i2_while_loop, -- COND_LOOP83561[com.cp:184]
    S_i3_assign, -- ASSIGN56720[com.cp:186]
    S_i4_fun, -- FUN32748[com.cp:187]
    S_com_tx_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_com_tx_start;
  signal pro_state_next: pro_states := S_com_tx_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_com_tx_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='0' or PRO_com_tx_ENABLE='0' then
        pro_state <= S_com_tx_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          err,
          QUEUE_tx_q_GD,
          UART_com_GD,
          pro_state
          )
  begin
    PRO_com_tx_END <= '0';
    case pro_state is
      when S_com_tx_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_assign;
      when S_i1_assign => -- ASSIGN41945[com.cp:182]
        pro_state_next <= S_i2_while_loop;
      when S_i2_while_loop => -- COND_LOOP83561[com.cp:184]
        if err = '0' then
          pro_state_next <= S_i3_assign;
        else
          pro_state_next <= S_com_tx_end;
        end if;
      when S_i3_assign => -- ASSIGN56720[com.cp:186]
        if QUEUE_tx_q_GD = '1' then
          pro_state_next <= S_i3_assign;
        else
          pro_state_next <= S_i4_fun;
        end if;
      when S_i4_fun => -- FUN32748[com.cp:187]
        if not((UART_com_GD) = ('0')) then
          pro_state_next <= S_i4_fun;
        else
          pro_state_next <= S_i2_while_loop;
        end if;
      when S_com_tx_end => -- PROCESS0[:0]
        pro_state_next <= S_com_tx_end;
        PRO_com_tx_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          d,
          pro_state
          )
  begin
    -- Default values
    QUEUE_tx_q_RE <= '0';
    UART_com_WE <= '0';
    UART_com_WR <= "00000000";
    case pro_state is
      when S_com_tx_start => -- PROCESS0[:0]
        null;
      when S_i1_assign => -- ASSIGN41945[com.cp:182]
        null;
      when S_i2_while_loop => -- COND_LOOP83561[com.cp:184]
        null;
      when S_i3_assign => -- ASSIGN56720[com.cp:186]
        QUEUE_tx_q_RE <=  QUEUE_tx_q_GD;
      when S_i4_fun => -- FUN32748[com.cp:187]
        UART_com_WE <= UART_com_GD;
        UART_com_WR <= d;
      when S_com_tx_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          QUEUE_tx_q_GD,
          QUEUE_tx_q_RD,
          UART_com_WR_ERR,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '0' then
        err <= '0';
        d <= "00000000";
      else
        case pro_state is
          when S_com_tx_start => -- PROCESS0[:0]
            null;
          when S_i1_assign => -- ASSIGN41945[com.cp:182]
            err <= '0';
          when S_i2_while_loop => -- COND_LOOP83561[com.cp:184]
            null;
          when S_i3_assign => -- ASSIGN56720[com.cp:186]
            d <= QUEUE_tx_q_RD;
          when S_i4_fun => -- FUN32748[com.cp:187]
            err <= UART_com_WR_ERR;
          when S_com_tx_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
