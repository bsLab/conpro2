--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D149 Genetic size: 2681845
--         Compile date: Wed Apr 28 18:22:40 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <com_tmo> from module <Com>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;
use work.ConPRO.all;
entity com_com_tmo is
port(
  -- Connections to external objects, components and the outside world
  signal REG_com_timeout_WR: out std_logic;
  signal REG_com_timeout_WE: out std_logic;
  signal QUEUE_rx_q_UNLOCK: out std_logic;
  signal QUEUE_rx_q_GD: in std_logic;
  signal PRO_com_tmo_ENABLE: in std_logic;
  signal PRO_com_tmo_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end com_com_tmo;
architecture main of com_com_tmo is
  -- Local and temporary data objects
  signal TEMP_0: std_logic_vector(18 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_com_tmo_start, -- PROCESS0[:0]
    S_i1_assign, -- ASSIGN13048[com.cp:156]
    S_i2_delay, -- COND_LOOP7507[com.cp:157]
    S_i2_delay_loop, -- COND_LOOP7507[com.cp:157]
    S_i3_fun, -- FUN34075[com.cp:158]
    S_i4_assign, -- ASSIGN33362[com.cp:159]
    S_com_tmo_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_com_tmo_start;
  signal pro_state_next: pro_states := S_com_tmo_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_com_tmo_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='0' or PRO_com_tmo_ENABLE='0' then
        pro_state <= S_com_tmo_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          TEMP_0,
          QUEUE_rx_q_GD,
          pro_state
          )
  begin
    PRO_com_tmo_END <= '0';
    case pro_state is
      when S_com_tmo_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_assign;
      when S_i1_assign => -- ASSIGN13048[com.cp:156]
        pro_state_next <= S_i2_delay;
      when S_i2_delay => -- COND_LOOP7507[com.cp:157]
        pro_state_next <= S_i2_delay_loop;
      when S_i2_delay_loop => -- COND_LOOP7507[com.cp:157]
        if TEMP_0 = "0000000000000000000" then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i2_delay_loop;
        end if;
      when S_i3_fun => -- FUN34075[com.cp:158]
        if QUEUE_rx_q_GD = '1' then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- ASSIGN33362[com.cp:159]
        pro_state_next <= S_com_tmo_end;
      when S_com_tmo_end => -- PROCESS0[:0]
        pro_state_next <= S_com_tmo_end;
        PRO_com_tmo_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          pro_state
          )
  begin
    -- Default values
    REG_com_timeout_WR <= '0';
    REG_com_timeout_WE <= '0';
    QUEUE_rx_q_unlock <= '0';
    case pro_state is
      when S_com_tmo_start => -- PROCESS0[:0]
        null;
      when S_i1_assign => -- ASSIGN13048[com.cp:156]
        REG_com_timeout_WR <= '0';
        REG_com_timeout_WE <= '1';
      when S_i2_delay => -- COND_LOOP7507[com.cp:157]
        null;
      when S_i2_delay_loop => -- COND_LOOP7507[com.cp:157]
        null;
      when S_i3_fun => -- FUN34075[com.cp:158]
        QUEUE_rx_q_unlock <= '1';
      when S_i4_assign => -- ASSIGN33362[com.cp:159]
        REG_com_timeout_WR <= '1';
        REG_com_timeout_WE <= '1';
      when S_com_tmo_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          TEMP_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '0' then
        TEMP_0 <= "0000000000000000000";
      else
        case pro_state is
          when S_com_tmo_start => -- PROCESS0[:0]
            null;
          when S_i1_assign => -- ASSIGN13048[com.cp:156]
            null;
          when S_i2_delay => -- COND_LOOP7507[com.cp:157]
            TEMP_0 <= "0101101001101011111";
          when S_i2_delay_loop => -- COND_LOOP7507[com.cp:157]
            TEMP_0 <= TEMP_0 - "0000000000000000001";
          when S_i3_fun => -- FUN34075[com.cp:158]
            null;
          when S_i4_assign => -- ASSIGN33362[com.cp:159]
            null;
          when S_com_tmo_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
