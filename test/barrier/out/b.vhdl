--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (C) 2006-2008 ** BSSLAB, Dr. Stefan Bosse
--         Version 2.1 A16 **  2049142 total genes
--         Compiled on Thu Nov 27 11:07:26 CET 2008
--         Compiled by sbosse
--         Compiled on SunOS sun203 5.10 Generic_118833-33 sun4u sparc SUNW,A70

-- Implementation of Module <B>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity MOD_b is
port(
  -- Connections to the outside world
  signal d_0_RD: out std_logic_vector(7 downto 0);
  signal d_1_RD: out std_logic_vector(7 downto 0);
  signal d_2_RD: out std_logic_vector(7 downto 0);
  signal d_3_RD: out std_logic_vector(7 downto 0);
  signal CLK: in std_logic;
  signal RESET: in std_logic
);
end MOD_b;
architecture main of MOD_b is
  -- Process instances
  component b_p_0
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_0_WR: out signed(7 downto 0);
    signal REG_d_0_WE: out std_logic;
    signal BARRIER_b_AWAIT: out std_logic;
    signal BARRIER_b_GD: in std_logic;
    signal PRO_p_0_ENABLE: in std_logic;
    signal PRO_p_0_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component b_p_1
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_1_WR: out signed(7 downto 0);
    signal REG_d_1_WE: out std_logic;
    signal BARRIER_b_AWAIT: out std_logic;
    signal BARRIER_b_GD: in std_logic;
    signal PRO_p_1_ENABLE: in std_logic;
    signal PRO_p_1_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component b_p_2
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_2_WR: out signed(7 downto 0);
    signal REG_d_2_WE: out std_logic;
    signal BARRIER_b_AWAIT: out std_logic;
    signal BARRIER_b_GD: in std_logic;
    signal PRO_p_2_ENABLE: in std_logic;
    signal PRO_p_2_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component b_p_3
  port(
    -- Connections to external objects, components and the outside world
    signal REG_d_3_WR: out signed(7 downto 0);
    signal REG_d_3_WE: out std_logic;
    signal BARRIER_b_AWAIT: out std_logic;
    signal BARRIER_b_GD: in std_logic;
    signal PRO_p_3_ENABLE: in std_logic;
    signal PRO_p_3_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component b_main
  port(
    -- Connections to external objects, components and the outside world
    signal PRO_p_START: out std_logic;
    signal PRO_p_GD: in std_logic;
    signal PRO_p_SEL: out integer;
    signal BARRIER_b_INIT: out std_logic;
    signal BARRIER_b_GD: in std_logic;
    signal PRO_main_ENABLE: in std_logic;
    signal PRO_main_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  -- Local and temporary data objects
  signal REG_d_0: signed(7 downto 0);
  signal REG_d_0_p_0_WR: signed(7 downto 0);
  signal REG_d_0_p_0_WE: std_logic;
  signal REG_d_1: signed(7 downto 0);
  signal REG_d_1_p_1_WR: signed(7 downto 0);
  signal REG_d_1_p_1_WE: std_logic;
  signal REG_d_2: signed(7 downto 0);
  signal REG_d_2_p_2_WR: signed(7 downto 0);
  signal REG_d_2_p_2_WE: std_logic;
  signal REG_d_3: signed(7 downto 0);
  signal REG_d_3_p_3_WR: signed(7 downto 0);
  signal REG_d_3_p_3_WE: std_logic;
  signal PRO_main_ENABLE: std_logic;
  signal PRO_main_END: std_logic;
  signal PRO_p_main_START: std_logic;
  signal PRO_p_main_SEL: integer;
  signal PRO_p_main_GD: std_logic;
  signal PRO_p_0_ENABLE: std_logic;
  signal PRO_p_0_END: std_logic;
  signal PRO_p_0_main_START: std_logic;
  signal PRO_p_0_main_GD: std_logic;
  signal PRO_p_1_ENABLE: std_logic;
  signal PRO_p_1_END: std_logic;
  signal PRO_p_1_main_START: std_logic;
  signal PRO_p_1_main_GD: std_logic;
  signal PRO_p_2_ENABLE: std_logic;
  signal PRO_p_2_END: std_logic;
  signal PRO_p_2_main_START: std_logic;
  signal PRO_p_2_main_GD: std_logic;
  signal PRO_p_3_ENABLE: std_logic;
  signal PRO_p_3_END: std_logic;
  signal PRO_p_3_main_START: std_logic;
  signal PRO_p_3_main_GD: std_logic;
  signal BARRIER_b_LOCKed: std_logic;
  signal BARRIER_b_LEVEL: std_logic_vector(2 downto 0);
  signal BARRIER_b_p_3_AWAIT: std_logic;
  signal BARRIER_b_p_3_LOCKed: std_logic;
  signal BARRIER_b_p_2_AWAIT: std_logic;
  signal BARRIER_b_p_2_LOCKed: std_logic;
  signal BARRIER_b_p_1_AWAIT: std_logic;
  signal BARRIER_b_p_1_LOCKed: std_logic;
  signal BARRIER_b_p_0_AWAIT: std_logic;
  signal BARRIER_b_p_0_LOCKed: std_logic;
  signal BARRIER_b_main_INIT: std_logic;
  signal BARRIER_b_main_GD: std_logic;
  signal BARRIER_b_p_3_GD: std_logic;
  signal BARRIER_b_p_2_GD: std_logic;
  signal BARRIER_b_p_1_GD: std_logic;
  signal BARRIER_b_p_0_GD: std_logic;
  -- State Processing
  -- Aux. signals
  signal conpro_system_clk: std_logic;
  signal conpro_system_reset: std_logic;
begin
  -- Module implementation
  -- Register
  IMPL_REG_d_0: process(
          REG_d_0_p_0_WR,
          REG_d_0_p_0_WE,
          REG_d_0,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d_0 <= to_signed(0,8);
     elsif REG_d_0_p_0_WE='1' then
      REG_d_0 <= REG_d_0_p_0_WR;
     end if;
    end if;
  end process IMPL_REG_d_0;
  
  -- Register
  IMPL_REG_d_1: process(
          REG_d_1_p_1_WR,
          REG_d_1_p_1_WE,
          REG_d_1,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d_1 <= to_signed(0,8);
     elsif REG_d_1_p_1_WE='1' then
      REG_d_1 <= REG_d_1_p_1_WR;
     end if;
    end if;
  end process IMPL_REG_d_1;
  
  -- Register
  IMPL_REG_d_2: process(
          REG_d_2_p_2_WR,
          REG_d_2_p_2_WE,
          REG_d_2,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d_2 <= to_signed(0,8);
     elsif REG_d_2_p_2_WE='1' then
      REG_d_2 <= REG_d_2_p_2_WR;
     end if;
    end if;
  end process IMPL_REG_d_2;
  
  -- Register
  IMPL_REG_d_3: process(
          REG_d_3_p_3_WR,
          REG_d_3_p_3_WE,
          REG_d_3,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_d_3 <= to_signed(0,8);
     elsif REG_d_3_p_3_WE='1' then
      REG_d_3 <= REG_d_3_p_3_WR;
     end if;
    end if;
  end process IMPL_REG_d_3;
  
  -- Process control
  PRO_CONTROL_main: process(
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_main_ENABLE <= '1'; -- main process activated on reset
      end if;
    end if;
  end process PRO_CONTROL_main;
  
  -- Process control
  -- Process control multiplexer
  -- Blocking collectors
  PRO_p_main_GD <=
    PRO_p_0_main_GD and
    PRO_p_1_main_GD and
    PRO_p_2_main_GD and
    PRO_p_3_main_GD ;
  -- Operation selectors
  PRO_p_0_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=0 else '0';
  PRO_p_1_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=1 else '0';
  PRO_p_2_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=2 else '0';
  PRO_p_3_main_START <= '1' when PRO_p_main_START='1' and PRO_p_main_SEL=3 else '0';
  
  PRO_CONTROL_p_0: process(
          PRO_p_0_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_0_ENABLE <= '0';
        PRO_p_0_main_GD <= '1';
      elsif PRO_p_0_main_START = '1' then
        PRO_p_0_ENABLE <= '1';
        PRO_p_0_main_GD <= '0';
      else
        PRO_p_0_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_0;
  
  -- Process control
  PRO_CONTROL_p_1: process(
          PRO_p_1_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_1_ENABLE <= '0';
        PRO_p_1_main_GD <= '1';
      elsif PRO_p_1_main_START = '1' then
        PRO_p_1_ENABLE <= '1';
        PRO_p_1_main_GD <= '0';
      else
        PRO_p_1_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_1;
  
  -- Process control
  PRO_CONTROL_p_2: process(
          PRO_p_2_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_2_ENABLE <= '0';
        PRO_p_2_main_GD <= '1';
      elsif PRO_p_2_main_START = '1' then
        PRO_p_2_ENABLE <= '1';
        PRO_p_2_main_GD <= '0';
      else
        PRO_p_2_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_2;
  
  -- Process control
  PRO_CONTROL_p_3: process(
          PRO_p_3_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p_3_ENABLE <= '0';
        PRO_p_3_main_GD <= '1';
      elsif PRO_p_3_main_START = '1' then
        PRO_p_3_ENABLE <= '1';
        PRO_p_3_main_GD <= '0';
      else
        PRO_p_3_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p_3;
  
  --
  -- EMI <Barrier.barrier.b> Process
  --
  BARRIER_b_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    BARRIER_b_main_INIT,
    BARRIER_b_p_3_LOCKed,
    BARRIER_b_p_2_LOCKed,
    BARRIER_b_p_1_LOCKed,
    BARRIER_b_p_0_LOCKed,
    BARRIER_b_p_3_AWAIT,
    BARRIER_b_LEVEL,
    BARRIER_b_p_2_AWAIT,
    BARRIER_b_p_1_AWAIT,
    BARRIER_b_p_0_AWAIT)
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        BARRIER_b_LOCKed <= '1';
        BARRIER_b_LEVEL <= "100";
        BARRIER_b_main_GD <= '1';
        BARRIER_b_p_3_GD <= '1';
        BARRIER_b_p_2_GD <= '1';
        BARRIER_b_p_1_GD <= '1';
        BARRIER_b_p_0_GD <= '1';
        BARRIER_b_p_3_LOCKed <= '0';
        BARRIER_b_p_2_LOCKed <= '0';
        BARRIER_b_p_1_LOCKed <= '0';
        BARRIER_b_p_0_LOCKed <= '0';
      else
        BARRIER_b_main_GD <= '1';
        BARRIER_b_p_3_GD <= '1';
        BARRIER_b_p_2_GD <= '1';
        BARRIER_b_p_1_GD <= '1';
        BARRIER_b_p_0_GD <= '1';
        if (BARRIER_b_main_INIT) = ('1') then
          BARRIER_b_LOCKed <= '1';
          BARRIER_b_LEVEL <= "100";
          BARRIER_b_main_GD <= '0';
          if (BARRIER_b_p_3_LOCKed) = ('1') then
            BARRIER_b_p_3_LOCKed <= '0';
            BARRIER_b_p_3_GD <= '0';
          end if;
          if (BARRIER_b_p_2_LOCKed) = ('1') then
            BARRIER_b_p_2_LOCKed <= '0';
            BARRIER_b_p_2_GD <= '0';
          end if;
          if (BARRIER_b_p_1_LOCKed) = ('1') then
            BARRIER_b_p_1_LOCKed <= '0';
            BARRIER_b_p_1_GD <= '0';
          end if;
          if (BARRIER_b_p_0_LOCKed) = ('1') then
            BARRIER_b_p_0_LOCKed <= '0';
            BARRIER_b_p_0_GD <= '0';
          end if;
        elsif ((BARRIER_b_p_3_AWAIT) = ('1')) and ((BARRIER_b_p_3_LOCKed) = ('0')) then
          BARRIER_b_p_3_LOCKed <= '1';
          BARRIER_b_LEVEL <= (BARRIER_b_LEVEL) - (1);
        elsif ((BARRIER_b_p_2_AWAIT) = ('1')) and ((BARRIER_b_p_2_LOCKed) = ('0')) then
          BARRIER_b_p_2_LOCKed <= '1';
          BARRIER_b_LEVEL <= (BARRIER_b_LEVEL) - (1);
        elsif ((BARRIER_b_p_1_AWAIT) = ('1')) and ((BARRIER_b_p_1_LOCKed) = ('0')) then
          BARRIER_b_p_1_LOCKed <= '1';
          BARRIER_b_LEVEL <= (BARRIER_b_LEVEL) - (1);
        elsif ((BARRIER_b_p_0_AWAIT) = ('1')) and ((BARRIER_b_p_0_LOCKed) = ('0')) then
          BARRIER_b_p_0_LOCKed <= '1';
          BARRIER_b_LEVEL <= (BARRIER_b_LEVEL) - (1);
        else  
          if (BARRIER_b_LEVEL) = ("000") then
            BARRIER_b_LEVEL <= "100";
            BARRIER_b_LOCKed <= '0';
            BARRIER_b_p_3_LOCKed <= '0';
            BARRIER_b_p_3_GD <= '0';
            BARRIER_b_p_2_LOCKed <= '0';
            BARRIER_b_p_2_GD <= '0';
            BARRIER_b_p_1_LOCKed <= '0';
            BARRIER_b_p_1_GD <= '0';
            BARRIER_b_p_0_LOCKed <= '0';
            BARRIER_b_p_0_GD <= '0';
          else
            BARRIER_b_LOCKed <= '1';
          end if;
        end if;
      end if;
    end if;
  end process BARRIER_b_SCHED;
  
  -- Process instantiations
  PRO_MAP_p_0: b_p_0 port map(
    REG_d_0_WR => REG_d_0_p_0_WR,
    REG_d_0_WE => REG_d_0_p_0_WE,
    BARRIER_b_AWAIT => BARRIER_b_p_0_AWAIT,
    BARRIER_b_GD => BARRIER_b_p_0_GD,
    PRO_p_0_ENABLE => PRO_p_0_ENABLE,
    PRO_p_0_END => PRO_p_0_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p_1: b_p_1 port map(
    REG_d_1_WR => REG_d_1_p_1_WR,
    REG_d_1_WE => REG_d_1_p_1_WE,
    BARRIER_b_AWAIT => BARRIER_b_p_1_AWAIT,
    BARRIER_b_GD => BARRIER_b_p_1_GD,
    PRO_p_1_ENABLE => PRO_p_1_ENABLE,
    PRO_p_1_END => PRO_p_1_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p_2: b_p_2 port map(
    REG_d_2_WR => REG_d_2_p_2_WR,
    REG_d_2_WE => REG_d_2_p_2_WE,
    BARRIER_b_AWAIT => BARRIER_b_p_2_AWAIT,
    BARRIER_b_GD => BARRIER_b_p_2_GD,
    PRO_p_2_ENABLE => PRO_p_2_ENABLE,
    PRO_p_2_END => PRO_p_2_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p_3: b_p_3 port map(
    REG_d_3_WR => REG_d_3_p_3_WR,
    REG_d_3_WE => REG_d_3_p_3_WE,
    BARRIER_b_AWAIT => BARRIER_b_p_3_AWAIT,
    BARRIER_b_GD => BARRIER_b_p_3_GD,
    PRO_p_3_ENABLE => PRO_p_3_ENABLE,
    PRO_p_3_END => PRO_p_3_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_main: b_main port map(
    PRO_p_START => PRO_p_main_START,
    PRO_p_GD => PRO_p_main_GD,
    PRO_p_SEL => PRO_p_main_SEL,
    BARRIER_b_INIT => BARRIER_b_main_INIT,
    BARRIER_b_GD => BARRIER_b_main_GD,
    PRO_main_ENABLE => PRO_main_ENABLE,
    PRO_main_END => PRO_main_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  
  -- Toplevel assignments
  -- Monitors
  d_0_RD <= std_logic_vector(REG_d_0);
  d_1_RD <= std_logic_vector(REG_d_1);
  d_2_RD <= std_logic_vector(REG_d_2);
  d_3_RD <= std_logic_vector(REG_d_3);
  conpro_system_clk <= CLK;
  conpro_system_reset <= RESET;
end main;
