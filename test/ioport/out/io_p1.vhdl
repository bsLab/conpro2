--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D110 Genetic size: 2287819
--         Compile date: Sun Sep 20 15:22:22 CEST 2009
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunblk 5.9 Generic_118558-11 sun4u sparc SUNW,Sun-Blade-1500

-- Process implementation of process <p1> from module <Io>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity io_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal PORT_iop_WE: out std_logic;
  signal PORT_iop_WR: out std_logic_vector(7 downto 0);
  signal PORT_iop_GD: in std_logic;
  signal RND_rnd_RE: out std_logic;
  signal RND_rnd_RD: in std_logic_vector(7 downto 0);
  signal RND_rnd_GD: in std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end io_p1;
architecture main of io_p1 is
  -- Local and temporary data objects
  signal d: std_logic_vector(7 downto 0);
  signal LOOP_i_0: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, -- PROCESS0[:0]
    S_i1_for_loop, -- COUNT_LOOP59662[io.cp:21]
    S_i1_for_loop_cond, -- COUNT_LOOP59662[io.cp:21]
    S_i2_fun, -- FUN11607[io.cp:23]
    S_i3_fun, -- FUN42151[io.cp:24]
    S_i1_for_loop_incr, -- COUNT_LOOP59662[io.cp:21]
    S_p1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_8: signed(4 downto 0) := "01000";
  -- ConPro VHDL Library
  --
  -- ConPro2 library
  --
  --  Version 2.1.4
  --
  
  
  function min(n,m:natural) return natural is
    begin
      if n < m then return n;
      elsif m < n then return m;
      else return n; end if;
    end;
  function max(n,m:natural) return natural is
    begin
      if n > m then return n;
      elsif m > n then return m;
      else return n; end if;
    end;
  
  --
  -- multiplier with width_A=width_B=width_RES, type I
  --
  function mult(A,B: SIGNED) return SIGNED is
    variable BA: SIGNED((A'length+B'length-1) downto 0);
    variable BA_n: SIGNED((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := resize(BA,A'length);
      return (BA_n);
    end;
  --
  -- multiplier with width_A=width_B=width_RES, type L
  --
  function mult(A,B: STD_LOGIC_VECTOR) return STD_LOGIC_VECTOR is
    variable BA: STD_LOGIC_VECTOR((A'length+B'length-1) downto 0);
    variable BA_n: STD_LOGIC_VECTOR((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := BA((A'length-1) downto 0);
      return (BA_n);
    end;
  --
  -- Overloading of 1 bit adder, type L
  --
  function "+" (L: std_logic; R:integer) return std_logic is
    begin
      if R = 0 then return L; else return (L xor '1'); end if;
    end "+";
  
  --
  -- Type conversion
  -- ConPro types! L: logic(std_logic), I:integer(signed), N:natural(integer)
  -- Argument width relation: n <= m
  --
  function Ln_to_Lm(L_n:std_logic_vector;n,m:natural) return std_logic_vector is
    variable fill: std_logic_vector(max(1,m-n-1) downto 0) := (others => '0');
    variable L_m: std_logic_vector(m-1 downto 0);
    begin
      if (m-n) > 1 then L_m := fill & L_n;
      else L_m := '0' & L_n; end if;
      return L_m;
    end;
  function Lm_to_Ln(L_m:std_logic_vector;m,n:natural) return std_logic_vector is
    variable L_n: std_logic_vector(n-1 downto 0);
    begin
      L_n := L_m(n-1 downto 0);
      return L_n;
    end;
  function Ln_1_to_Lm(L_n:std_logic;n,m:natural) return std_logic_vector is
    variable fill: std_logic_vector(max(1,m-n-1) downto 0) := (others => '0');
    variable L_m: std_logic_vector(m-1 downto 0);
    begin
      if (m-n) > 1 then L_m := fill & L_n;
      else L_m := '0' & L_n; end if;
      return L_m;
    end;
  function Lm_to_Ln_1(L_m:std_logic_vector;m,n:natural) return std_logic is
    variable L_n: std_logic;
    begin
      L_n := L_m(0);
      return L_n;
    end;
  function Ln_to_Lm_1(L_n:std_logic_vector;n,m:natural) return std_logic_vector is
    variable L_m: std_logic_vector(m-1 downto 0);
    begin
      L_m := '1' & L_n;
      return L_m;
    end;
  function In_to_Im(I_n:signed;n,m:natural) return signed is
    variable I_m: signed(m-1 downto 0);
    begin
      I_m := resize(I_n,m);
      return I_m;
    end;
  function Im_to_In(I_m:signed;m,n:natural) return signed is
    variable I_n: signed(n-1 downto 0);
    begin
      I_n := resize(I_m,n);
      return I_n;
    end;
  function Im_to_Ln_1(I_m:signed;m,n:natural) return std_logic is
    variable L_n: std_logic;
    begin
      L_n := std_logic(I_m(0));
      return L_n;
    end;
  function I_to_L(I:signed) return std_logic_vector is
    variable L: std_logic_vector(I'length-1 downto 0);
    begin
      L := std_logic_vector(I);
      return L;
    end;
  function In_to_Lm(I_n:signed;n,m:natural) return std_logic_vector is
    variable L_m: std_logic_vector(m-1 downto 0);
    begin
      L_m := std_logic_vector(resize(I_n,m));
      return L_m;
    end;
  function Im_to_Ln(I_m:signed;m,n:natural) return std_logic_vector is
    variable L_n: std_logic_vector(n-1 downto 0);
    begin
      L_n := std_logic_vector(resize(I_m,n));
      return L_n;
    end;
  function L_to_I(L:std_logic_vector) return signed is
    variable I: signed(L'length-1 downto 0);
    begin
      I := signed(L);
      return I;
    end;
  function L_to_B(L:std_logic_vector) return boolean is
    variable comp: std_logic_vector(L'length-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (L = comp);
      return B;
    end;
  function Ln_to_B(L:std_logic_vector;n:natural) return boolean is
    variable comp: std_logic_vector(n-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (L = comp);
      return B;
    end;
  function I_to_B(I:signed) return boolean is
    variable comp: signed(I'length-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (I = comp);
      return B;
    end;
  function In_to_B(I:signed;n:natural) return boolean is
    variable comp: signed(n-1 downto 0) := (others => '1');
    variable B: boolean;
    begin
      B := (I = comp);
      return B;
    end;
  function Ln_to_Im(L_n:std_logic_vector;n,m:natural) return signed is
    variable I_m: signed(m-1 downto 0);
    begin
      I_m := resize(signed(L_n),m);
      return I_m;
    end;
  function Lm_to_In(L_m:std_logic_vector;m,n:natural) return signed is
    variable I_n: signed(n-1 downto 0);
    begin
      I_n := resize(signed(L_m),n);
      return I_n;
    end;
  function N_to_Im(N:natural;m:natural) return signed is
    variable I_m: signed(m-1 downto 0);
    begin
      I_m := to_signed(N,m);
      return I_m;
    end;
  function L_to_N(L:std_logic_vector) return integer is
    variable N: integer;
    begin
      N := conv_integer(L);
      return N;
    end;
  function L_1_to_N(L:std_logic) return integer is
    variable N: integer;
    variable L_2: std_logic_vector(1 downto 0); 
    begin
      L_2 := '0' & L;
      N := conv_integer(L_2);
      return N;
    end;
  function I_to_N(I:signed) return integer is
    variable N: integer;
    begin
      N := to_integer(I);
      return N;
    end;
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_0,
          RND_rnd_GD,
          PORT_iop_GD,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_for_loop;
      when S_i1_for_loop => -- COUNT_LOOP59662[io.cp:21]
        pro_state_next <= S_i1_for_loop_cond;
      when S_i1_for_loop_cond => -- COUNT_LOOP59662[io.cp:21]
        if CONST_I5_8 >= LOOP_i_0 then
          pro_state_next <= S_i2_fun;
        else
          pro_state_next <= S_p1_end;
        end if;
      when S_i2_fun => -- FUN11607[io.cp:23]
        if not((RND_rnd_GD) = ('0')) then
          pro_state_next <= S_i2_fun;
        else
          pro_state_next <= S_i3_fun;
        end if;
      when S_i3_fun => -- FUN42151[io.cp:24]
        if not((PORT_iop_GD) = ('0')) then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i1_for_loop_incr;
        end if;
      when S_i1_for_loop_incr => -- COUNT_LOOP59662[io.cp:21]
        pro_state_next <= S_i1_for_loop_cond;
      when S_p1_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          d,
          pro_state
          )
  begin
    -- Default values
    RND_rnd_RE <= '0';
    PORT_iop_WE <= '0';
    PORT_iop_WR <= "00000000";
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        null;
      when S_i1_for_loop => -- COUNT_LOOP59662[io.cp:21]
        null;
      when S_i1_for_loop_cond => -- COUNT_LOOP59662[io.cp:21]
        null;
      when S_i2_fun => -- FUN11607[io.cp:23]
        RND_rnd_RE <= RND_rnd_GD;
      when S_i3_fun => -- FUN42151[io.cp:24]
        PORT_iop_WE <= PORT_iop_GD;
        PORT_iop_WR <= d;
      when S_i1_for_loop_incr => -- COUNT_LOOP59662[io.cp:21]
        null;
      when S_p1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          RND_rnd_RD,
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_0 <= to_signed(0,5);
        d <= "00000000";
      else
        case pro_state is
          when S_p1_start => -- PROCESS0[:0]
            null;
          when S_i1_for_loop => -- COUNT_LOOP59662[io.cp:21]
            LOOP_i_0 <= CONST_I5_1;
          when S_i1_for_loop_cond => -- COUNT_LOOP59662[io.cp:21]
            null;
          when S_i2_fun => -- FUN11607[io.cp:23]
            d <= RND_rnd_RD;
          when S_i3_fun => -- FUN42151[io.cp:24]
            null;
          when S_i1_for_loop_incr => -- COUNT_LOOP59662[io.cp:21]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_p1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
