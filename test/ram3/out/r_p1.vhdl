--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D133 Genetic size: 2558806
--         Compile date: Fri Jan  8 10:17:58 CET 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p1> from module <R>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity r_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal MON_PRO_p1_state: out std_logic_vector(2 downto 0);
  signal RAM_ram1_WR: out std_logic_vector(7 downto 0);
  signal RAM_ram1_WE: out std_logic;
  signal RAM_ram1_ADDR: out std_logic_vector(3 downto 0);
  signal RAM_ram1_GD: in std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end r_p1;
architecture main of r_p1 is
  -- Local and temporary data objects
  signal TEMPS_0: signed(4 downto 0);
  signal LOOP_i_0: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, -- PROCESS0[:0]
    S_i1_for_loop, -- COUNT_LOOP59662[r.cp:13]
    S_i1_for_loop_cond, -- COUNT_LOOP59662[r.cp:13]
    S_i2_assign, -- ASSIGN8650[r.cp:15]
    S_i3_assign, -- ASSIGN8650[r.cp:15]
    S_i1_for_loop_incr, -- COUNT_LOOP59662[r.cp:13]
    S_p1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_0,
          RAM_ram1_GD,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_for_loop;
      when S_i1_for_loop => -- COUNT_LOOP59662[r.cp:13]
        pro_state_next <= S_i1_for_loop_cond;
      when S_i1_for_loop_cond => -- COUNT_LOOP59662[r.cp:13]
        if CONST_I5_10 >= LOOP_i_0 then
          pro_state_next <= S_i2_assign;
        else
          pro_state_next <= S_p1_end;
        end if;
      when S_i2_assign => -- ASSIGN8650[r.cp:15]
        pro_state_next <= S_i3_assign;
      when S_i3_assign => -- ASSIGN8650[r.cp:15]
        if RAM_ram1_GD = '1' then
          pro_state_next <= S_i3_assign;
        else
          pro_state_next <= S_i1_for_loop_incr;
        end if;
      when S_i1_for_loop_incr => -- COUNT_LOOP59662[r.cp:13]
        pro_state_next <= S_i1_for_loop_cond;
      when S_p1_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          LOOP_i_0,
          pro_state
          )
  begin
    -- Default values
    RAM_ram1_WE <= '0';
    RAM_ram1_ADDR <= "0000";
    RAM_ram1_WR <= "00000000";
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        null;
      when S_i1_for_loop => -- COUNT_LOOP59662[r.cp:13]
        null;
      when S_i1_for_loop_cond => -- COUNT_LOOP59662[r.cp:13]
        null;
      when S_i2_assign => -- ASSIGN8650[r.cp:15]
        null;
      when S_i3_assign => -- ASSIGN8650[r.cp:15]
        RAM_ram1_WR <= I_to_L(In_to_Im((LOOP_i_0),5,8));
        RAM_ram1_WE <= RAM_ram1_GD;
        RAM_ram1_ADDR <= (std_logic_vector(resize(unsigned(TEMPS_0),4))); -- ar
      when S_i1_for_loop_incr => -- COUNT_LOOP59662[r.cp:13]
        null;
      when S_p1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_0 <= to_signed(0,5);
        TEMPS_0 <= to_signed(0,5);
      else
        case pro_state is
          when S_p1_start => -- PROCESS0[:0]
            null;
          when S_i1_for_loop => -- COUNT_LOOP59662[r.cp:13]
            LOOP_i_0 <= CONST_I5_1;
          when S_i1_for_loop_cond => -- COUNT_LOOP59662[r.cp:13]
            null;
          when S_i2_assign => -- ASSIGN8650[r.cp:15]
            TEMPS_0 <= LOOP_i_0 - CONST_I5_1;
          when S_i3_assign => -- ASSIGN8650[r.cp:15]
            null;
          when S_i1_for_loop_incr => -- COUNT_LOOP59662[r.cp:13]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_p1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
  MON_PRO_p1_state <= 
      "001" when pro_state = S_p1_start else
      "010" when pro_state = S_i1_for_loop else
      "011" when pro_state = S_i1_for_loop_cond else
      "100" when pro_state = S_i2_assign else
      "101" when pro_state = S_i3_assign else
      "110" when pro_state = S_i1_for_loop_incr else
      "111" when pro_state = S_p1_end else
      "000";
end main;
