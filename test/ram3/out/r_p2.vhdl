--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D133 Genetic size: 2558806
--         Compile date: Fri Jan  8 10:17:58 CET 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p2> from module <R>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity r_p2 is
port(
  -- Connections to external objects, components and the outside world
  signal MON_PRO_p2_state: out std_logic_vector(3 downto 0);
  signal RAM_ram1_WR: out std_logic_vector(7 downto 0);
  signal RAM_ram1_WE: out std_logic;
  signal RAM_ram1_RD: in std_logic_vector(7 downto 0);
  signal RAM_ram1_RE: out std_logic;
  signal RAM_ram1_ADDR: out std_logic_vector(3 downto 0);
  signal RAM_ram1_GD: in std_logic;
  signal PRO_p2_ENABLE: in std_logic;
  signal PRO_p2_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end r_p2;
architecture main of r_p2 is
  -- Local and temporary data objects
  signal TEMPS_0: signed(4 downto 0);
  signal TEMPS_1: signed(4 downto 0);
  signal TEMP_0: signed(7 downto 0);
  signal LOOP_i_1: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p2_start, -- PROCESS0[:0]
    S_i1_for_loop, -- COUNT_LOOP65705[r.cp:21]
    S_i1_for_loop_cond, -- COUNT_LOOP65705[r.cp:21]
    S_i2_assign, -- ASSIGN17429[r.cp:23]
    S_i3_assign, -- ASSIGN17429[r.cp:23]
    S_i4_assign, -- ASSIGN17429[r.cp:23]
    S_i4_assign_1, -- ASSIGN17429[r.cp:23]
    S_i1_for_loop_incr, -- COUNT_LOOP65705[r.cp:21]
    S_p2_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p2_start;
  signal pro_state_next: pro_states := S_p2_start;
  -- Auxilliary toplevel definitions
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
  signal RAM_ram1_RD_CONV_I8: signed(7 downto 0);
  constant CONST_I8_1: signed(7 downto 0) := "00000001";
begin
  state_transition: process(
          PRO_p2_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p2_ENABLE='0' then
        pro_state <= S_p2_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_1,
          RAM_ram1_GD,
          pro_state
          )
  begin
    PRO_p2_END <= '0';
    case pro_state is
      when S_p2_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_for_loop;
      when S_i1_for_loop => -- COUNT_LOOP65705[r.cp:21]
        pro_state_next <= S_i1_for_loop_cond;
      when S_i1_for_loop_cond => -- COUNT_LOOP65705[r.cp:21]
        if CONST_I5_10 >= LOOP_i_1 then
          pro_state_next <= S_i2_assign;
        else
          pro_state_next <= S_p2_end;
        end if;
      when S_i2_assign => -- ASSIGN17429[r.cp:23]
        pro_state_next <= S_i3_assign;
      when S_i3_assign => -- ASSIGN17429[r.cp:23]
        pro_state_next <= S_i4_assign;
      when S_i4_assign => -- ASSIGN17429[r.cp:23]
        if RAM_ram1_GD = '1' then
          pro_state_next <= S_i4_assign;
        else
          pro_state_next <= S_i4_assign_1;
        end if;
      when S_i4_assign_1 => -- ASSIGN17429[r.cp:23]
        if RAM_ram1_GD = '1' then
          pro_state_next <= S_i4_assign_1;
        else
          pro_state_next <= S_i1_for_loop_incr;
        end if;
      when S_i1_for_loop_incr => -- COUNT_LOOP65705[r.cp:21]
        pro_state_next <= S_i1_for_loop_cond;
      when S_p2_end => -- PROCESS0[:0]
        pro_state_next <= S_p2_end;
        PRO_p2_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          TEMP_0,
          pro_state
          )
  begin
    -- Default values
    RAM_ram1_RE <= '0';
    RAM_ram1_ADDR <= "0000";
    RAM_ram1_WE <= '0';
    RAM_ram1_WR <= "00000000";
    case pro_state is
      when S_p2_start => -- PROCESS0[:0]
        null;
      when S_i1_for_loop => -- COUNT_LOOP65705[r.cp:21]
        null;
      when S_i1_for_loop_cond => -- COUNT_LOOP65705[r.cp:21]
        null;
      when S_i2_assign => -- ASSIGN17429[r.cp:23]
        null;
      when S_i3_assign => -- ASSIGN17429[r.cp:23]
        null;
      when S_i4_assign => -- ASSIGN17429[r.cp:23]
        RAM_ram1_RE <= RAM_ram1_GD;
        RAM_ram1_ADDR <= (std_logic_vector(resize(unsigned(TEMPS_1),4))); -- ar
      when S_i4_assign_1 => -- ASSIGN17429[r.cp:23]
        RAM_ram1_WR <= I_to_L(TEMP_0 - CONST_I8_1);
        RAM_ram1_WE <= RAM_ram1_GD;
        RAM_ram1_ADDR <= (std_logic_vector(resize(unsigned(TEMPS_0),4))); -- ar
      when S_i1_for_loop_incr => -- COUNT_LOOP65705[r.cp:21]
        null;
      when S_p2_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          LOOP_i_1,
          RAM_ram1_RD_CONV_I8,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        LOOP_i_1 <= to_signed(0,5);
        TEMPS_0 <= to_signed(0,5);
        TEMPS_1 <= to_signed(0,5);
        TEMP_0 <= to_signed(0,8);
      else
        case pro_state is
          when S_p2_start => -- PROCESS0[:0]
            null;
          when S_i1_for_loop => -- COUNT_LOOP65705[r.cp:21]
            LOOP_i_1 <= CONST_I5_1;
          when S_i1_for_loop_cond => -- COUNT_LOOP65705[r.cp:21]
            null;
          when S_i2_assign => -- ASSIGN17429[r.cp:23]
            TEMPS_0 <= LOOP_i_1 - CONST_I5_1;
          when S_i3_assign => -- ASSIGN17429[r.cp:23]
            TEMPS_1 <= LOOP_i_1 - CONST_I5_1;
          when S_i4_assign => -- ASSIGN17429[r.cp:23]
            TEMP_0 <= RAM_ram1_RD_CONV_I8;
          when S_i4_assign_1 => -- ASSIGN17429[r.cp:23]
            null;
          when S_i1_for_loop_incr => -- COUNT_LOOP65705[r.cp:21]
            LOOP_i_1 <= LOOP_i_1 + CONST_I5_1;
          when S_p2_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
  MON_PRO_p2_state <= 
      "0001" when pro_state = S_p2_start else
      "0010" when pro_state = S_i1_for_loop else
      "0011" when pro_state = S_i1_for_loop_cond else
      "0100" when pro_state = S_i2_assign else
      "0101" when pro_state = S_i3_assign else
      "0110" when pro_state = S_i4_assign else
      "0111" when pro_state = S_i4_assign_1 else
      "1000" when pro_state = S_i1_for_loop_incr else
      "1001" when pro_state = S_p2_end else
      "0000";
  RAM_ram1_RD_CONV_I8 <= L_to_I((RAM_ram1_RD));
end main;
