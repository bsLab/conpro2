--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D161 Genetic size: 2703860
--         Compile date: Wed Jun 30 14:12:50 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Implementation of Module <S>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity MOD_s is
port(
  -- Connections to the outside world
  signal CLK: in std_logic;
  signal RESET: in std_logic
);
end MOD_s;
architecture main of MOD_s is
  -- Process instances
  component s_p1_def
  port(
    -- Connections to external objects, components and the outside world
    signal REG_x_RD: in signed(7 downto 0);
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal PRO_p1_def_ENABLE: in std_logic;
    signal PRO_p1_def_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component s_p1_opt
  port(
    -- Connections to external objects, components and the outside world
    signal REG_x_RD: in signed(7 downto 0);
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal PRO_p1_opt_ENABLE: in std_logic;
    signal PRO_p1_opt_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component s_main
  port(
    -- Connections to external objects, components and the outside world
    signal REG_x_WR: out signed(7 downto 0);
    signal REG_x_WE: out std_logic;
    signal REG_x_GD: in std_logic;
    signal PRO_p1_opt_CALL: out std_logic;
    signal PRO_p1_opt_GD: in std_logic;
    signal PRO_p1_def_CALL: out std_logic;
    signal PRO_p1_def_GD: in std_logic;
    signal PRO_main_ENABLE: in std_logic;
    signal PRO_main_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  -- Local and temporary data objects
  signal REG_x: signed(7 downto 0);
  signal REG_x_LOCKED: std_logic;
  signal REG_x_RD: signed(7 downto 0);
  signal REG_x_p1_def_WR: signed(7 downto 0);
  signal REG_x_p1_def_WE: std_logic;
  signal REG_x_p1_opt_WR: signed(7 downto 0);
  signal REG_x_p1_opt_WE: std_logic;
  signal REG_x_main_WR: signed(7 downto 0);
  signal REG_x_main_WE: std_logic;
  signal REG_x_p1_def_GD: std_logic;
  signal REG_x_p1_opt_GD: std_logic;
  signal REG_x_main_GD: std_logic;
  signal PRO_main_ENABLE: std_logic;
  signal PRO_main_END: std_logic;
  signal PRO_p1_opt_ENABLE: std_logic;
  signal PRO_p1_opt_END: std_logic;
  signal PRO_p1_opt_main_CALL: std_logic;
  signal PRO_p1_opt_main_GD: std_logic;
  signal PRO_p1_def_ENABLE: std_logic;
  signal PRO_p1_def_END: std_logic;
  signal PRO_p1_def_main_CALL: std_logic;
  signal PRO_p1_def_main_GD: std_logic;
  -- State Processing
  -- Aux. signals
  signal conpro_system_clk: std_logic;
  signal conpro_system_reset: std_logic;
begin
  -- Module implementation
  -- Guarded Register
  IMPL_REG_x: process(
          REG_x_p1_def_WR,
          REG_x_p1_def_WE,
          REG_x_p1_opt_WR,
          REG_x_p1_opt_WE,
          REG_x_main_WR,
          REG_x_main_WE,
          REG_x_LOCKED,
          REG_x,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    REG_x_RD <= REG_x;
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_x <= to_signed(0,8);
      REG_x_LOCKED <= '0';
      REG_x_p1_def_GD <= '1';
      REG_x_p1_opt_GD <= '1';
      REG_x_main_GD <= '1';
     else
      REG_x_p1_def_GD <= '1';
      REG_x_p1_opt_GD <= '1';
      REG_x_main_GD <= '1';
      if REG_x_LOCKED = '0' and REG_x_p1_def_WE='1' then
       REG_x <= REG_x_p1_def_WR;
       REG_x_p1_def_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '0' and REG_x_p1_opt_WE='1' then
       REG_x <= REG_x_p1_opt_WR;
       REG_x_p1_opt_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '0' and REG_x_main_WE='1' then
       REG_x <= REG_x_main_WR;
       REG_x_main_GD <= '0';
       REG_x_LOCKED <= '1';
      elsif REG_x_LOCKED = '1' then
       REG_x_LOCKED <= '0';
       REG_x_p1_def_GD <= '1';
       REG_x_p1_opt_GD <= '1';
       REG_x_main_GD <= '1';
      end if;
     end if;
    end if;
  end process IMPL_REG_x;
  
  -- Process control
  PRO_CONTROL_main: process(
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_main_ENABLE <= '1'; -- main process activated on reset
      end if;
    end if;
  end process PRO_CONTROL_main;
  
  -- Process control
  PRO_CONTROL_p1_opt: process(
          PRO_p1_opt_main_CALL,
          PRO_p1_opt_END,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p1_opt_ENABLE <= '0';
        PRO_p1_opt_main_GD <= '1';
      elsif PRO_p1_opt_main_CALL = '1' and PRO_p1_opt_END = '1' then
        PRO_p1_opt_main_GD <= '0';
        PRO_p1_opt_ENABLE <= '0';
      elsif PRO_p1_opt_main_CALL = '1' and PRO_p1_opt_END = '0' then
        PRO_p1_opt_ENABLE <= '1';
      else
        PRO_p1_opt_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p1_opt;
  
  -- Process control
  PRO_CONTROL_p1_def: process(
          PRO_p1_def_main_CALL,
          PRO_p1_def_END,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_p1_def_ENABLE <= '0';
        PRO_p1_def_main_GD <= '1';
      elsif PRO_p1_def_main_CALL = '1' and PRO_p1_def_END = '1' then
        PRO_p1_def_main_GD <= '0';
        PRO_p1_def_ENABLE <= '0';
      elsif PRO_p1_def_main_CALL = '1' and PRO_p1_def_END = '0' then
        PRO_p1_def_ENABLE <= '1';
      else
        PRO_p1_def_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_p1_def;
  
  
  -- Process instantiations
  PRO_MAP_p1_def: s_p1_def port map(
    REG_x_RD => REG_x_RD,
    REG_x_WR => REG_x_p1_def_WR,
    REG_x_WE => REG_x_p1_def_WE,
    REG_x_GD => REG_x_p1_def_GD,
    PRO_p1_def_ENABLE => PRO_p1_def_ENABLE,
    PRO_p1_def_END => PRO_p1_def_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_p1_opt: s_p1_opt port map(
    REG_x_RD => REG_x_RD,
    REG_x_WR => REG_x_p1_opt_WR,
    REG_x_WE => REG_x_p1_opt_WE,
    REG_x_GD => REG_x_p1_opt_GD,
    PRO_p1_opt_ENABLE => PRO_p1_opt_ENABLE,
    PRO_p1_opt_END => PRO_p1_opt_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_main: s_main port map(
    REG_x_WR => REG_x_main_WR,
    REG_x_WE => REG_x_main_WE,
    REG_x_GD => REG_x_main_GD,
    PRO_p1_opt_CALL => PRO_p1_opt_main_CALL,
    PRO_p1_opt_GD => PRO_p1_opt_main_GD,
    PRO_p1_def_CALL => PRO_p1_def_main_CALL,
    PRO_p1_def_GD => PRO_p1_def_main_GD,
    PRO_main_ENABLE => PRO_main_ENABLE,
    PRO_main_END => PRO_main_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  
  -- Toplevel assignments
  -- Monitors
  conpro_system_clk <= CLK;
  conpro_system_reset <= RESET;
end main;
