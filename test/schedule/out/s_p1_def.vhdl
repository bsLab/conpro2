--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D161 Genetic size: 2703860
--         Compile date: Wed Jun 30 14:12:50 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p1_def> from module <S>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity s_p1_def is
port(
  -- Connections to external objects, components and the outside world
  signal REG_x_RD: in signed(7 downto 0);
  signal REG_x_WR: out signed(7 downto 0);
  signal REG_x_WE: out std_logic;
  signal REG_x_GD: in std_logic;
  signal PRO_p1_def_ENABLE: in std_logic;
  signal PRO_p1_def_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end s_p1_def;
architecture main of s_p1_def is
  -- Local and temporary data objects
  signal y: signed(7 downto 0);
  signal z: signed(7 downto 0);
  signal LOOP_i_0: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_def_start, -- PROCESS0[:0]
    S_i1_bind_to_2, -- ASSIGN65705[s.cp:11]
    S_i3_for_loop, -- COUNT_LOOP39314[s.cp:13]
    S_i3_for_loop_cond, -- COUNT_LOOP39314[s.cp:13]
    S_i4_assign, -- ASSIGN2877[s.cp:15]
    S_i5_assign, -- ASSIGN85449[s.cp:16]
    S_i3_for_loop_incr, -- COUNT_LOOP39314[s.cp:13]
    S_i6_assign, -- ASSIGN23890[s.cp:18]
    S_p1_def_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_def_start;
  signal pro_state_next: pro_states := S_p1_def_start;
  -- Auxilliary toplevel definitions
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
  constant CONST_I8_1: signed(7 downto 0) := "00000001";
begin
  state_transition: process(
          PRO_p1_def_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_def_ENABLE='0' then
        pro_state <= S_p1_def_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_0,
          REG_x_GD,
          pro_state
          )
  begin
    PRO_p1_def_END <= '0';
    case pro_state is
      when S_p1_def_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_bind_to_2;
      when S_i1_bind_to_2 => -- ASSIGN65705[s.cp:11]
        pro_state_next <= S_i3_for_loop;
      when S_i3_for_loop => -- COUNT_LOOP39314[s.cp:13]
        pro_state_next <= S_i3_for_loop_cond;
      when S_i3_for_loop_cond => -- COUNT_LOOP39314[s.cp:13]
        if CONST_I5_10 >= LOOP_i_0 then
          pro_state_next <= S_i4_assign;
        else
          pro_state_next <= S_i6_assign;
        end if;
      when S_i4_assign => -- ASSIGN2877[s.cp:15]
        pro_state_next <= S_i5_assign;
      when S_i5_assign => -- ASSIGN85449[s.cp:16]
        pro_state_next <= S_i3_for_loop_incr;
      when S_i3_for_loop_incr => -- COUNT_LOOP39314[s.cp:13]
        pro_state_next <= S_i3_for_loop_cond;
      when S_i6_assign => -- ASSIGN23890[s.cp:18]
        if REG_x_GD = '1' then
          pro_state_next <= S_i6_assign;
        else
          pro_state_next <= S_p1_def_end;
        end if;
      when S_p1_def_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_def_end;
        PRO_p1_def_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          y,
          z,
          pro_state
          )
  begin
    -- Default values
    REG_x_WR <= to_signed(0,8);
    REG_x_WE <= '0';
    case pro_state is
      when S_p1_def_start => -- PROCESS0[:0]
        null;
      when S_i1_bind_to_2 => -- ASSIGN65705[s.cp:11]
        null;
      when S_i3_for_loop => -- COUNT_LOOP39314[s.cp:13]
        null;
      when S_i3_for_loop_cond => -- COUNT_LOOP39314[s.cp:13]
        null;
      when S_i4_assign => -- ASSIGN2877[s.cp:15]
        null;
      when S_i5_assign => -- ASSIGN85449[s.cp:16]
        null;
      when S_i3_for_loop_incr => -- COUNT_LOOP39314[s.cp:13]
        null;
      when S_i6_assign => -- ASSIGN23890[s.cp:18]
        REG_x_WR <= y + z;
        REG_x_WE <= '1';
      when S_p1_def_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          REG_x_RD,
          y,
          z,
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        z <= to_signed(0,8);
        y <= to_signed(0,8);
        LOOP_i_0 <= to_signed(0,5);
      else
        case pro_state is
          when S_p1_def_start => -- PROCESS0[:0]
            null;
          when S_i1_bind_to_2 => -- ASSIGN65705[s.cp:11]
            z <= REG_x_RD;
            y <= REG_x_RD;
          when S_i3_for_loop => -- COUNT_LOOP39314[s.cp:13]
            LOOP_i_0 <= CONST_I5_1;
          when S_i3_for_loop_cond => -- COUNT_LOOP39314[s.cp:13]
            null;
          when S_i4_assign => -- ASSIGN2877[s.cp:15]
            y <= y + CONST_I8_1;
          when S_i5_assign => -- ASSIGN85449[s.cp:16]
            z <= z + CONST_I8_1;
          when S_i3_for_loop_incr => -- COUNT_LOOP39314[s.cp:13]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_i6_assign => -- ASSIGN23890[s.cp:18]
            null;
          when S_p1_def_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
