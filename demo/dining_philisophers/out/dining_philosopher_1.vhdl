--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D148 Genetic size: 2661823
--         Compile date: Fri Apr 23 17:13:19 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <philosopher_1> from module <Dining>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity dining_philosopher_1 is
port(
  -- Connections to external objects, components and the outside world
  signal EVENT_ev_AWAIT: out std_logic;
  signal EVENT_ev_GD: in std_logic;
  signal REG_thinking_1_WR: out std_logic;
  signal REG_thinking_1_WE: out std_logic;
  signal SEMA_fork_DOWN: out std_logic;
  signal SEMA_fork_UP: out std_logic;
  signal SEMA_fork_GD: in std_logic;
  signal SEMA_fork_SEL: out integer;
  signal REG_eating_1_WR: out std_logic;
  signal REG_eating_1_WE: out std_logic;
  signal PRO_philosopher_1_ENABLE: in std_logic;
  signal PRO_philosopher_1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end dining_philosopher_1;
architecture main of dining_philosopher_1 is
  -- Local and temporary data objects
  signal TEMP_0: std_logic_vector(3 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_philosopher_1_start, -- PROCESS0[:0]
    S_i1_fun, -- FUN9106[dining.cp:58]
    S_i3_fun, -- FUN73132[dining.cp:62]
    S_i4_fun, -- FUN52127[dining.cp:63]
    S_i5_bind_to_6, -- ASSIGN34847[dining.cp:45]
    S_i7_delay, -- COND_LOOP16077[dining.cp:47]
    S_i7_delay_loop, -- COND_LOOP16077[dining.cp:47]
    S_i8_bind_to_9, -- ASSIGN43856[dining.cp:50]
    S_i10_fun, -- FUN6952[dining.cp:65]
    S_i11_fun, -- FUN36757[dining.cp:66]
    S_philosopher_1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_philosopher_1_start;
  signal pro_state_next: pro_states := S_philosopher_1_start;
  -- Auxilliary toplevel definitions
begin
  state_transition: process(
          PRO_philosopher_1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_philosopher_1_ENABLE='0' then
        pro_state <= S_philosopher_1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          EVENT_ev_GD,
          SEMA_fork_GD,
          TEMP_0,
          pro_state
          )
  begin
    PRO_philosopher_1_END <= '0';
    case pro_state is
      when S_philosopher_1_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_fun;
      when S_i1_fun => -- FUN9106[dining.cp:58]
        if not((EVENT_ev_GD) = ('0')) then
          pro_state_next <= S_i1_fun;
        else
          pro_state_next <= S_i3_fun;
        end if;
      when S_i3_fun => -- FUN73132[dining.cp:62]
        if not((SEMA_fork_GD) = ('0')) then
          pro_state_next <= S_i3_fun;
        else
          pro_state_next <= S_i4_fun;
        end if;
      when S_i4_fun => -- FUN52127[dining.cp:63]
        if not((SEMA_fork_GD) = ('0')) then
          pro_state_next <= S_i4_fun;
        else
          pro_state_next <= S_i5_bind_to_6;
        end if;
      when S_i5_bind_to_6 => -- ASSIGN34847[dining.cp:45]
        pro_state_next <= S_i7_delay;
      when S_i7_delay => -- COND_LOOP16077[dining.cp:47]
        pro_state_next <= S_i7_delay_loop;
      when S_i7_delay_loop => -- COND_LOOP16077[dining.cp:47]
        if TEMP_0 = "0000" then
          pro_state_next <= S_i8_bind_to_9;
        else
          pro_state_next <= S_i7_delay_loop;
        end if;
      when S_i8_bind_to_9 => -- ASSIGN43856[dining.cp:50]
        pro_state_next <= S_i10_fun;
      when S_i10_fun => -- FUN6952[dining.cp:65]
        if not((SEMA_fork_GD) = ('0')) then
          pro_state_next <= S_i10_fun;
        else
          pro_state_next <= S_i11_fun;
        end if;
      when S_i11_fun => -- FUN36757[dining.cp:66]
        if not((SEMA_fork_GD) = ('0')) then
          pro_state_next <= S_i11_fun;
        else
          pro_state_next <= S_i3_fun;
        end if;
      when S_philosopher_1_end => -- PROCESS0[:0]
        pro_state_next <= S_philosopher_1_end;
        PRO_philosopher_1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          pro_state
          )
  begin
    -- Default values
    EVENT_ev_AWAIT <= '0';
    SEMA_fork_DOWN <= '0';
    SEMA_fork_SEL <= 0;
    REG_thinking_1_WR <= '0';
    REG_thinking_1_WE <= '0';
    REG_eating_1_WR <= '0';
    REG_eating_1_WE <= '0';
    SEMA_fork_UP <= '0';
    case pro_state is
      when S_philosopher_1_start => -- PROCESS0[:0]
        null;
      when S_i1_fun => -- FUN9106[dining.cp:58]
        EVENT_ev_AWAIT <= EVENT_ev_GD;
      when S_i3_fun => -- FUN73132[dining.cp:62]
        SEMA_fork_DOWN <= SEMA_fork_GD;
        SEMA_fork_SEL <= 1;
      when S_i4_fun => -- FUN52127[dining.cp:63]
        SEMA_fork_DOWN <= SEMA_fork_GD;
        SEMA_fork_SEL <= 2;
      when S_i5_bind_to_6 => -- ASSIGN34847[dining.cp:45]
        REG_thinking_1_WR <= '0';
        REG_thinking_1_WE <= '1';
        REG_eating_1_WR <= '1';
        REG_eating_1_WE <= '1';
      when S_i7_delay => -- COND_LOOP16077[dining.cp:47]
        null;
      when S_i7_delay_loop => -- COND_LOOP16077[dining.cp:47]
        null;
      when S_i8_bind_to_9 => -- ASSIGN43856[dining.cp:50]
        REG_thinking_1_WR <= '1';
        REG_thinking_1_WE <= '1';
        REG_eating_1_WR <= '0';
        REG_eating_1_WE <= '1';
      when S_i10_fun => -- FUN6952[dining.cp:65]
        SEMA_fork_UP <= SEMA_fork_GD;
        SEMA_fork_SEL <= 1;
      when S_i11_fun => -- FUN36757[dining.cp:66]
        SEMA_fork_UP <= SEMA_fork_GD;
        SEMA_fork_SEL <= 2;
      when S_philosopher_1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          TEMP_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        TEMP_0 <= "0000";
      else
        case pro_state is
          when S_philosopher_1_start => -- PROCESS0[:0]
            null;
          when S_i1_fun => -- FUN9106[dining.cp:58]
            null;
          when S_i3_fun => -- FUN73132[dining.cp:62]
            null;
          when S_i4_fun => -- FUN52127[dining.cp:63]
            null;
          when S_i5_bind_to_6 => -- ASSIGN34847[dining.cp:45]
            null;
          when S_i7_delay => -- COND_LOOP16077[dining.cp:47]
            TEMP_0 <= "0011";
          when S_i7_delay_loop => -- COND_LOOP16077[dining.cp:47]
            TEMP_0 <= TEMP_0 - "0001";
          when S_i8_bind_to_9 => -- ASSIGN43856[dining.cp:50]
            null;
          when S_i10_fun => -- FUN6952[dining.cp:65]
            null;
          when S_i11_fun => -- FUN36757[dining.cp:66]
            null;
          when S_philosopher_1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
