--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2010 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D148 Genetic size: 2661823
--         Compile date: Fri Apr 23 17:13:19 CEST 2010
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Implementation of Module <Dining>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
use work.ConPRO.all;
entity MOD_dining is
port(
  -- Connections to the outside world
  signal stat_RD: out std_logic_vector(7 downto 0);
  signal thinking_0_RD: out std_logic;
  signal thinking_1_RD: out std_logic;
  signal thinking_2_RD: out std_logic;
  signal thinking_3_RD: out std_logic;
  signal thinking_4_RD: out std_logic;
  signal eating_0_RD: out std_logic;
  signal eating_1_RD: out std_logic;
  signal eating_2_RD: out std_logic;
  signal eating_3_RD: out std_logic;
  signal eating_4_RD: out std_logic;
  signal CLK: in std_logic;
  signal RESET: in std_logic
);
end MOD_dining;
architecture main of MOD_dining is
  -- Process instances
  component dining_init
  port(
    -- Connections to external objects, components and the outside world
    signal EVENT_ev_INIT: out std_logic;
    signal EVENT_ev_GD: in std_logic;
    signal SEMA_fork_INIT: out std_logic;
    signal SEMA_fork_WR: out std_logic_vector(7 downto 0);
    signal SEMA_fork_GD: in std_logic;
    signal SEMA_fork_SEL: out integer;
    signal PRO_init_ENABLE: in std_logic;
    signal PRO_init_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component dining_philosopher_0
  port(
    -- Connections to external objects, components and the outside world
    signal EVENT_ev_AWAIT: out std_logic;
    signal EVENT_ev_GD: in std_logic;
    signal REG_thinking_0_WR: out std_logic;
    signal REG_thinking_0_WE: out std_logic;
    signal SEMA_fork_DOWN: out std_logic;
    signal SEMA_fork_UP: out std_logic;
    signal SEMA_fork_GD: in std_logic;
    signal SEMA_fork_SEL: out integer;
    signal REG_eating_0_WR: out std_logic;
    signal REG_eating_0_WE: out std_logic;
    signal PRO_philosopher_0_ENABLE: in std_logic;
    signal PRO_philosopher_0_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component dining_philosopher_1
  port(
    -- Connections to external objects, components and the outside world
    signal EVENT_ev_AWAIT: out std_logic;
    signal EVENT_ev_GD: in std_logic;
    signal REG_thinking_1_WR: out std_logic;
    signal REG_thinking_1_WE: out std_logic;
    signal SEMA_fork_DOWN: out std_logic;
    signal SEMA_fork_UP: out std_logic;
    signal SEMA_fork_GD: in std_logic;
    signal SEMA_fork_SEL: out integer;
    signal REG_eating_1_WR: out std_logic;
    signal REG_eating_1_WE: out std_logic;
    signal PRO_philosopher_1_ENABLE: in std_logic;
    signal PRO_philosopher_1_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component dining_philosopher_2
  port(
    -- Connections to external objects, components and the outside world
    signal EVENT_ev_AWAIT: out std_logic;
    signal EVENT_ev_GD: in std_logic;
    signal REG_thinking_2_WR: out std_logic;
    signal REG_thinking_2_WE: out std_logic;
    signal SEMA_fork_DOWN: out std_logic;
    signal SEMA_fork_UP: out std_logic;
    signal SEMA_fork_GD: in std_logic;
    signal SEMA_fork_SEL: out integer;
    signal REG_eating_2_WR: out std_logic;
    signal REG_eating_2_WE: out std_logic;
    signal PRO_philosopher_2_ENABLE: in std_logic;
    signal PRO_philosopher_2_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component dining_philosopher_3
  port(
    -- Connections to external objects, components and the outside world
    signal EVENT_ev_AWAIT: out std_logic;
    signal EVENT_ev_GD: in std_logic;
    signal REG_thinking_3_WR: out std_logic;
    signal REG_thinking_3_WE: out std_logic;
    signal SEMA_fork_DOWN: out std_logic;
    signal SEMA_fork_UP: out std_logic;
    signal SEMA_fork_GD: in std_logic;
    signal SEMA_fork_SEL: out integer;
    signal REG_eating_3_WR: out std_logic;
    signal REG_eating_3_WE: out std_logic;
    signal PRO_philosopher_3_ENABLE: in std_logic;
    signal PRO_philosopher_3_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component dining_philosopher_4
  port(
    -- Connections to external objects, components and the outside world
    signal REG_thinking_4_WR: out std_logic;
    signal REG_thinking_4_WE: out std_logic;
    signal SEMA_fork_DOWN: out std_logic;
    signal SEMA_fork_UP: out std_logic;
    signal SEMA_fork_GD: in std_logic;
    signal SEMA_fork_SEL: out integer;
    signal REG_eating_4_WR: out std_logic;
    signal REG_eating_4_WE: out std_logic;
    signal PRO_philosopher_4_ENABLE: in std_logic;
    signal PRO_philosopher_4_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  component dining_main
  port(
    -- Connections to external objects, components and the outside world
    signal PRO_init_CALL: out std_logic;
    signal PRO_init_GD: in std_logic;
    signal PRO_philosopher_START: out std_logic;
    signal PRO_philosopher_GD: in std_logic;
    signal PRO_philosopher_SEL: out integer;
    signal REG_stat_WR: out std_logic_vector(7 downto 0);
    signal REG_stat_WE: out std_logic;
    signal EVENT_ev_WAKEUP: out std_logic;
    signal EVENT_ev_GD: in std_logic;
    signal PRO_main_ENABLE: in std_logic;
    signal PRO_main_END: out std_logic;
    signal conpro_system_clk: in std_logic;
    signal conpro_system_reset: in std_logic
  );
  end component;
  -- Local and temporary data objects
  signal PRO_init_ENABLE: std_logic;
  signal PRO_init_END: std_logic;
  signal PRO_init_main_CALL: std_logic;
  signal PRO_init_main_GD: std_logic;
  signal REG_stat: std_logic_vector(7 downto 0);
  signal REG_stat_main_WR: std_logic_vector(7 downto 0);
  signal REG_stat_main_WE: std_logic;
  signal PRO_philosopher_main_START: std_logic;
  signal PRO_philosopher_main_SEL: integer;
  signal PRO_philosopher_main_GD: std_logic;
  signal PRO_philosopher_0_ENABLE: std_logic;
  signal PRO_philosopher_0_END: std_logic;
  signal PRO_philosopher_0_main_START: std_logic;
  signal PRO_philosopher_0_main_GD: std_logic;
  signal PRO_philosopher_1_ENABLE: std_logic;
  signal PRO_philosopher_1_END: std_logic;
  signal PRO_philosopher_1_main_START: std_logic;
  signal PRO_philosopher_1_main_GD: std_logic;
  signal PRO_philosopher_2_ENABLE: std_logic;
  signal PRO_philosopher_2_END: std_logic;
  signal PRO_philosopher_2_main_START: std_logic;
  signal PRO_philosopher_2_main_GD: std_logic;
  signal PRO_philosopher_3_ENABLE: std_logic;
  signal PRO_philosopher_3_END: std_logic;
  signal PRO_philosopher_3_main_START: std_logic;
  signal PRO_philosopher_3_main_GD: std_logic;
  signal PRO_philosopher_4_ENABLE: std_logic;
  signal PRO_philosopher_4_END: std_logic;
  signal PRO_philosopher_4_main_START: std_logic;
  signal PRO_philosopher_4_main_GD: std_logic;
  signal EVENT_ev_philosopher_3_AWAIT: std_logic;
  signal EVENT_ev_philosopher_3_LOCKed: std_logic;
  signal EVENT_ev_philosopher_2_AWAIT: std_logic;
  signal EVENT_ev_philosopher_2_LOCKed: std_logic;
  signal EVENT_ev_philosopher_1_AWAIT: std_logic;
  signal EVENT_ev_philosopher_1_LOCKed: std_logic;
  signal EVENT_ev_philosopher_0_AWAIT: std_logic;
  signal EVENT_ev_philosopher_0_LOCKed: std_logic;
  signal EVENT_ev_main_WAKEUP: std_logic;
  signal EVENT_ev_init_INIT: std_logic;
  signal EVENT_ev_main_GD: std_logic;
  signal EVENT_ev_init_GD: std_logic;
  signal EVENT_ev_philosopher_3_GD: std_logic;
  signal EVENT_ev_philosopher_2_GD: std_logic;
  signal EVENT_ev_philosopher_1_GD: std_logic;
  signal EVENT_ev_philosopher_0_GD: std_logic;
  signal REG_thinking_0: std_logic;
  signal REG_thinking_0_philosopher_0_WR: std_logic;
  signal REG_thinking_0_philosopher_0_WE: std_logic;
  signal REG_thinking_1: std_logic;
  signal REG_thinking_1_philosopher_1_WR: std_logic;
  signal REG_thinking_1_philosopher_1_WE: std_logic;
  signal REG_thinking_2: std_logic;
  signal REG_thinking_2_philosopher_2_WR: std_logic;
  signal REG_thinking_2_philosopher_2_WE: std_logic;
  signal REG_thinking_3: std_logic;
  signal REG_thinking_3_philosopher_3_WR: std_logic;
  signal REG_thinking_3_philosopher_3_WE: std_logic;
  signal REG_thinking_4: std_logic;
  signal REG_thinking_4_philosopher_4_WR: std_logic;
  signal REG_thinking_4_philosopher_4_WE: std_logic;
  signal PRO_main_ENABLE: std_logic;
  signal PRO_main_END: std_logic;
  signal SEMA_fork_0_philosopher_3_DOWN: std_logic;
  signal SEMA_fork_0_philosopher_2_DOWN: std_logic;
  signal SEMA_fork_0_philosopher_1_DOWN: std_logic;
  signal SEMA_fork_0_philosopher_4_DOWN: std_logic;
  signal SEMA_fork_0_philosopher_0_DOWN: std_logic;
  signal SEMA_fork_0_philosopher_3_UP: std_logic;
  signal SEMA_fork_0_philosopher_2_UP: std_logic;
  signal SEMA_fork_0_philosopher_1_UP: std_logic;
  signal SEMA_fork_0_philosopher_4_UP: std_logic;
  signal SEMA_fork_0_philosopher_0_UP: std_logic;
  signal SEMA_fork_0_init_INIT: std_logic;
  signal SEMA_fork_0_init_WR: std_logic_vector(7 downto 0);
  signal SEMA_fork_0_init_GD: std_logic;
  signal SEMA_fork_0_philosopher_3_GD: std_logic;
  signal SEMA_fork_0_philosopher_2_GD: std_logic;
  signal SEMA_fork_0_philosopher_1_GD: std_logic;
  signal SEMA_fork_0_philosopher_4_GD: std_logic;
  signal SEMA_fork_0_philosopher_0_GD: std_logic;
  signal SEMA_fork_0_LEVEL: std_logic_vector(7 downto 0);
  signal SEMA_fork_0_init_QUEUED: std_logic;
  signal SEMA_fork_0_init_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_philosopher_3_QUEUED: std_logic;
  signal SEMA_fork_0_philosopher_3_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_philosopher_2_QUEUED: std_logic;
  signal SEMA_fork_0_philosopher_2_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_philosopher_1_QUEUED: std_logic;
  signal SEMA_fork_0_philosopher_1_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_philosopher_4_QUEUED: std_logic;
  signal SEMA_fork_0_philosopher_4_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_philosopher_0_QUEUED: std_logic;
  signal SEMA_fork_0_philosopher_0_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_HEAD: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_TAIL: std_logic_vector(2 downto 0);
  signal SEMA_fork_0_OWNER: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_philosopher_3_DOWN: std_logic;
  signal SEMA_fork_1_philosopher_2_DOWN: std_logic;
  signal SEMA_fork_1_philosopher_4_DOWN: std_logic;
  signal SEMA_fork_1_philosopher_1_DOWN: std_logic;
  signal SEMA_fork_1_philosopher_0_DOWN: std_logic;
  signal SEMA_fork_1_philosopher_3_UP: std_logic;
  signal SEMA_fork_1_philosopher_2_UP: std_logic;
  signal SEMA_fork_1_philosopher_4_UP: std_logic;
  signal SEMA_fork_1_philosopher_1_UP: std_logic;
  signal SEMA_fork_1_philosopher_0_UP: std_logic;
  signal SEMA_fork_1_init_INIT: std_logic;
  signal SEMA_fork_1_init_WR: std_logic_vector(7 downto 0);
  signal SEMA_fork_1_init_GD: std_logic;
  signal SEMA_fork_1_philosopher_3_GD: std_logic;
  signal SEMA_fork_1_philosopher_2_GD: std_logic;
  signal SEMA_fork_1_philosopher_4_GD: std_logic;
  signal SEMA_fork_1_philosopher_1_GD: std_logic;
  signal SEMA_fork_1_philosopher_0_GD: std_logic;
  signal SEMA_fork_1_LEVEL: std_logic_vector(7 downto 0);
  signal SEMA_fork_1_init_QUEUED: std_logic;
  signal SEMA_fork_1_init_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_philosopher_3_QUEUED: std_logic;
  signal SEMA_fork_1_philosopher_3_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_philosopher_2_QUEUED: std_logic;
  signal SEMA_fork_1_philosopher_2_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_philosopher_4_QUEUED: std_logic;
  signal SEMA_fork_1_philosopher_4_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_philosopher_1_QUEUED: std_logic;
  signal SEMA_fork_1_philosopher_1_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_philosopher_0_QUEUED: std_logic;
  signal SEMA_fork_1_philosopher_0_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_HEAD: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_TAIL: std_logic_vector(2 downto 0);
  signal SEMA_fork_1_OWNER: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_philosopher_3_DOWN: std_logic;
  signal SEMA_fork_2_philosopher_0_DOWN: std_logic;
  signal SEMA_fork_2_philosopher_4_DOWN: std_logic;
  signal SEMA_fork_2_philosopher_2_DOWN: std_logic;
  signal SEMA_fork_2_philosopher_1_DOWN: std_logic;
  signal SEMA_fork_2_philosopher_3_UP: std_logic;
  signal SEMA_fork_2_philosopher_0_UP: std_logic;
  signal SEMA_fork_2_philosopher_4_UP: std_logic;
  signal SEMA_fork_2_philosopher_2_UP: std_logic;
  signal SEMA_fork_2_philosopher_1_UP: std_logic;
  signal SEMA_fork_2_init_INIT: std_logic;
  signal SEMA_fork_2_init_WR: std_logic_vector(7 downto 0);
  signal SEMA_fork_2_init_GD: std_logic;
  signal SEMA_fork_2_philosopher_3_GD: std_logic;
  signal SEMA_fork_2_philosopher_0_GD: std_logic;
  signal SEMA_fork_2_philosopher_4_GD: std_logic;
  signal SEMA_fork_2_philosopher_2_GD: std_logic;
  signal SEMA_fork_2_philosopher_1_GD: std_logic;
  signal SEMA_fork_2_LEVEL: std_logic_vector(7 downto 0);
  signal SEMA_fork_2_init_QUEUED: std_logic;
  signal SEMA_fork_2_init_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_philosopher_3_QUEUED: std_logic;
  signal SEMA_fork_2_philosopher_3_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_philosopher_0_QUEUED: std_logic;
  signal SEMA_fork_2_philosopher_0_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_philosopher_4_QUEUED: std_logic;
  signal SEMA_fork_2_philosopher_4_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_philosopher_2_QUEUED: std_logic;
  signal SEMA_fork_2_philosopher_2_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_philosopher_1_QUEUED: std_logic;
  signal SEMA_fork_2_philosopher_1_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_HEAD: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_TAIL: std_logic_vector(2 downto 0);
  signal SEMA_fork_2_OWNER: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_philosopher_1_DOWN: std_logic;
  signal SEMA_fork_3_philosopher_0_DOWN: std_logic;
  signal SEMA_fork_3_philosopher_4_DOWN: std_logic;
  signal SEMA_fork_3_philosopher_3_DOWN: std_logic;
  signal SEMA_fork_3_philosopher_2_DOWN: std_logic;
  signal SEMA_fork_3_philosopher_1_UP: std_logic;
  signal SEMA_fork_3_philosopher_0_UP: std_logic;
  signal SEMA_fork_3_philosopher_4_UP: std_logic;
  signal SEMA_fork_3_philosopher_3_UP: std_logic;
  signal SEMA_fork_3_philosopher_2_UP: std_logic;
  signal SEMA_fork_3_init_INIT: std_logic;
  signal SEMA_fork_3_init_WR: std_logic_vector(7 downto 0);
  signal SEMA_fork_3_init_GD: std_logic;
  signal SEMA_fork_3_philosopher_1_GD: std_logic;
  signal SEMA_fork_3_philosopher_0_GD: std_logic;
  signal SEMA_fork_3_philosopher_4_GD: std_logic;
  signal SEMA_fork_3_philosopher_3_GD: std_logic;
  signal SEMA_fork_3_philosopher_2_GD: std_logic;
  signal SEMA_fork_3_LEVEL: std_logic_vector(7 downto 0);
  signal SEMA_fork_3_init_QUEUED: std_logic;
  signal SEMA_fork_3_init_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_philosopher_1_QUEUED: std_logic;
  signal SEMA_fork_3_philosopher_1_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_philosopher_0_QUEUED: std_logic;
  signal SEMA_fork_3_philosopher_0_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_philosopher_4_QUEUED: std_logic;
  signal SEMA_fork_3_philosopher_4_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_philosopher_3_QUEUED: std_logic;
  signal SEMA_fork_3_philosopher_3_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_philosopher_2_QUEUED: std_logic;
  signal SEMA_fork_3_philosopher_2_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_HEAD: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_TAIL: std_logic_vector(2 downto 0);
  signal SEMA_fork_3_OWNER: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_philosopher_2_DOWN: std_logic;
  signal SEMA_fork_4_philosopher_1_DOWN: std_logic;
  signal SEMA_fork_4_philosopher_0_DOWN: std_logic;
  signal SEMA_fork_4_philosopher_4_DOWN: std_logic;
  signal SEMA_fork_4_philosopher_3_DOWN: std_logic;
  signal SEMA_fork_4_philosopher_2_UP: std_logic;
  signal SEMA_fork_4_philosopher_1_UP: std_logic;
  signal SEMA_fork_4_philosopher_0_UP: std_logic;
  signal SEMA_fork_4_philosopher_4_UP: std_logic;
  signal SEMA_fork_4_philosopher_3_UP: std_logic;
  signal SEMA_fork_4_init_INIT: std_logic;
  signal SEMA_fork_4_init_WR: std_logic_vector(7 downto 0);
  signal SEMA_fork_4_init_GD: std_logic;
  signal SEMA_fork_4_philosopher_2_GD: std_logic;
  signal SEMA_fork_4_philosopher_1_GD: std_logic;
  signal SEMA_fork_4_philosopher_0_GD: std_logic;
  signal SEMA_fork_4_philosopher_4_GD: std_logic;
  signal SEMA_fork_4_philosopher_3_GD: std_logic;
  signal SEMA_fork_4_LEVEL: std_logic_vector(7 downto 0);
  signal SEMA_fork_4_init_QUEUED: std_logic;
  signal SEMA_fork_4_init_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_philosopher_2_QUEUED: std_logic;
  signal SEMA_fork_4_philosopher_2_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_philosopher_1_QUEUED: std_logic;
  signal SEMA_fork_4_philosopher_1_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_philosopher_0_QUEUED: std_logic;
  signal SEMA_fork_4_philosopher_0_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_philosopher_4_QUEUED: std_logic;
  signal SEMA_fork_4_philosopher_4_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_philosopher_3_QUEUED: std_logic;
  signal SEMA_fork_4_philosopher_3_PRIO: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_HEAD: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_TAIL: std_logic_vector(2 downto 0);
  signal SEMA_fork_4_OWNER: std_logic_vector(2 downto 0);
  signal SEMA_fork_init_SEL: integer;
  signal SEMA_fork_philosopher_3_SEL: integer;
  signal SEMA_fork_philosopher_2_SEL: integer;
  signal SEMA_fork_philosopher_1_SEL: integer;
  signal SEMA_fork_philosopher_4_SEL: integer;
  signal SEMA_fork_philosopher_0_SEL: integer;
  signal SEMA_fork_philosopher_3_DOWN: std_logic;
  signal SEMA_fork_philosopher_2_DOWN: std_logic;
  signal SEMA_fork_philosopher_1_DOWN: std_logic;
  signal SEMA_fork_philosopher_4_DOWN: std_logic;
  signal SEMA_fork_philosopher_0_DOWN: std_logic;
  signal SEMA_fork_philosopher_3_UP: std_logic;
  signal SEMA_fork_philosopher_2_UP: std_logic;
  signal SEMA_fork_philosopher_1_UP: std_logic;
  signal SEMA_fork_philosopher_4_UP: std_logic;
  signal SEMA_fork_philosopher_0_UP: std_logic;
  signal SEMA_fork_init_INIT: std_logic;
  signal SEMA_fork_init_WR: std_logic_vector(7 downto 0);
  signal SEMA_fork_init_GD: std_logic;
  signal SEMA_fork_philosopher_3_GD: std_logic;
  signal SEMA_fork_philosopher_2_GD: std_logic;
  signal SEMA_fork_philosopher_1_GD: std_logic;
  signal SEMA_fork_philosopher_4_GD: std_logic;
  signal SEMA_fork_philosopher_0_GD: std_logic;
  signal REG_eating_0: std_logic;
  signal REG_eating_0_philosopher_0_WR: std_logic;
  signal REG_eating_0_philosopher_0_WE: std_logic;
  signal REG_eating_1: std_logic;
  signal REG_eating_1_philosopher_1_WR: std_logic;
  signal REG_eating_1_philosopher_1_WE: std_logic;
  signal REG_eating_2: std_logic;
  signal REG_eating_2_philosopher_2_WR: std_logic;
  signal REG_eating_2_philosopher_2_WE: std_logic;
  signal REG_eating_3: std_logic;
  signal REG_eating_3_philosopher_3_WR: std_logic;
  signal REG_eating_3_philosopher_3_WE: std_logic;
  signal REG_eating_4: std_logic;
  signal REG_eating_4_philosopher_4_WR: std_logic;
  signal REG_eating_4_philosopher_4_WE: std_logic;
  -- State Processing
  -- Aux. signals
  signal conpro_system_clk: std_logic;
  signal conpro_system_reset: std_logic;
begin
  -- Module implementation
  -- Process control
  PRO_CONTROL_init: process(
          PRO_init_main_CALL,
          PRO_init_END,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_init_ENABLE <= '0';
        PRO_init_main_GD <= '1';
      elsif PRO_init_main_CALL = '1' and PRO_init_END = '1' then
        PRO_init_main_GD <= '0';
        PRO_init_ENABLE <= '0';
      elsif PRO_init_main_CALL = '1' and PRO_init_END = '0' then
        PRO_init_ENABLE <= '1';
      else
        PRO_init_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_init;
  
  -- Register
  IMPL_REG_stat: process(
          REG_stat_main_WR,
          REG_stat_main_WE,
          REG_stat,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_stat <= "00000000";
     elsif REG_stat_main_WE='1' then
      REG_stat <= REG_stat_main_WR;
     end if;
    end if;
  end process IMPL_REG_stat;
  
  -- Process control
  -- Process control multiplexer
  -- Blocking collectors
  PRO_philosopher_main_GD <=
    PRO_philosopher_0_main_GD and
    PRO_philosopher_1_main_GD and
    PRO_philosopher_2_main_GD and
    PRO_philosopher_3_main_GD and
    PRO_philosopher_4_main_GD ;
  -- Operation selectors
  PRO_philosopher_0_main_START <= '1' when PRO_philosopher_main_START='1' and PRO_philosopher_main_SEL=0 else '0';
  PRO_philosopher_1_main_START <= '1' when PRO_philosopher_main_START='1' and PRO_philosopher_main_SEL=1 else '0';
  PRO_philosopher_2_main_START <= '1' when PRO_philosopher_main_START='1' and PRO_philosopher_main_SEL=2 else '0';
  PRO_philosopher_3_main_START <= '1' when PRO_philosopher_main_START='1' and PRO_philosopher_main_SEL=3 else '0';
  PRO_philosopher_4_main_START <= '1' when PRO_philosopher_main_START='1' and PRO_philosopher_main_SEL=4 else '0';
  
  PRO_CONTROL_philosopher_0: process(
          PRO_philosopher_0_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_philosopher_0_ENABLE <= '0';
        PRO_philosopher_0_main_GD <= '1';
      elsif PRO_philosopher_0_main_START = '1' then
        PRO_philosopher_0_ENABLE <= '1';
        PRO_philosopher_0_main_GD <= '0';
      else
        PRO_philosopher_0_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_philosopher_0;
  
  -- Process control
  PRO_CONTROL_philosopher_1: process(
          PRO_philosopher_1_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_philosopher_1_ENABLE <= '0';
        PRO_philosopher_1_main_GD <= '1';
      elsif PRO_philosopher_1_main_START = '1' then
        PRO_philosopher_1_ENABLE <= '1';
        PRO_philosopher_1_main_GD <= '0';
      else
        PRO_philosopher_1_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_philosopher_1;
  
  -- Process control
  PRO_CONTROL_philosopher_2: process(
          PRO_philosopher_2_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_philosopher_2_ENABLE <= '0';
        PRO_philosopher_2_main_GD <= '1';
      elsif PRO_philosopher_2_main_START = '1' then
        PRO_philosopher_2_ENABLE <= '1';
        PRO_philosopher_2_main_GD <= '0';
      else
        PRO_philosopher_2_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_philosopher_2;
  
  -- Process control
  PRO_CONTROL_philosopher_3: process(
          PRO_philosopher_3_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_philosopher_3_ENABLE <= '0';
        PRO_philosopher_3_main_GD <= '1';
      elsif PRO_philosopher_3_main_START = '1' then
        PRO_philosopher_3_ENABLE <= '1';
        PRO_philosopher_3_main_GD <= '0';
      else
        PRO_philosopher_3_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_philosopher_3;
  
  -- Process control
  PRO_CONTROL_philosopher_4: process(
          PRO_philosopher_4_main_START,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_philosopher_4_ENABLE <= '0';
        PRO_philosopher_4_main_GD <= '1';
      elsif PRO_philosopher_4_main_START = '1' then
        PRO_philosopher_4_ENABLE <= '1';
        PRO_philosopher_4_main_GD <= '0';
      else
        PRO_philosopher_4_main_GD <= '1';
      end if;
    end if;
  end process PRO_CONTROL_philosopher_4;
  
  --
  --  ConPro V2.1.D148 EMI Event.event V2.06
  --
  
  --
  -- EMI <Object Event.event.ev> Process
  --
  EVENT_ev_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    EVENT_ev_init_INIT,
    EVENT_ev_philosopher_3_LOCKed,
    EVENT_ev_philosopher_2_LOCKed,
    EVENT_ev_philosopher_1_LOCKed,
    EVENT_ev_philosopher_0_LOCKed,
    EVENT_ev_philosopher_3_AWAIT,
    EVENT_ev_philosopher_2_AWAIT,
    EVENT_ev_philosopher_1_AWAIT,
    EVENT_ev_philosopher_0_AWAIT,
    EVENT_ev_main_WAKEUP)
  begin
    if (conpro_system_clk'event) and ((conpro_system_clk) = ('1')) then
      if (conpro_system_reset) = ('1') then
        EVENT_ev_main_GD <= '1';
        EVENT_ev_init_GD <= '1';
        EVENT_ev_philosopher_3_GD <= '1';
        EVENT_ev_philosopher_2_GD <= '1';
        EVENT_ev_philosopher_1_GD <= '1';
        EVENT_ev_philosopher_0_GD <= '1';
        EVENT_ev_philosopher_3_LOCKed <= '0';
        EVENT_ev_philosopher_2_LOCKed <= '0';
        EVENT_ev_philosopher_1_LOCKed <= '0';
        EVENT_ev_philosopher_0_LOCKed <= '0';
      else
        EVENT_ev_main_GD <= '1';
        EVENT_ev_init_GD <= '1';
        EVENT_ev_philosopher_3_GD <= '1';
        EVENT_ev_philosopher_2_GD <= '1';
        EVENT_ev_philosopher_1_GD <= '1';
        EVENT_ev_philosopher_0_GD <= '1';
        if (EVENT_ev_init_INIT) = ('1') then
          EVENT_ev_init_GD <= '0';
          if (EVENT_ev_philosopher_3_LOCKed) = ('1') then
            EVENT_ev_philosopher_3_LOCKed <= '0';
            EVENT_ev_philosopher_3_GD <= '0';
          end if;
          if (EVENT_ev_philosopher_2_LOCKed) = ('1') then
            EVENT_ev_philosopher_2_LOCKed <= '0';
            EVENT_ev_philosopher_2_GD <= '0';
          end if;
          if (EVENT_ev_philosopher_1_LOCKed) = ('1') then
            EVENT_ev_philosopher_1_LOCKed <= '0';
            EVENT_ev_philosopher_1_GD <= '0';
          end if;
          if (EVENT_ev_philosopher_0_LOCKed) = ('1') then
            EVENT_ev_philosopher_0_LOCKed <= '0';
            EVENT_ev_philosopher_0_GD <= '0';
          end if;
        elsif ((EVENT_ev_philosopher_3_AWAIT) = ('1')) and ((EVENT_ev_philosopher_3_LOCKed) = ('0')) then
          EVENT_ev_philosopher_3_LOCKed <= '1';
        elsif ((EVENT_ev_philosopher_2_AWAIT) = ('1')) and ((EVENT_ev_philosopher_2_LOCKed) = ('0')) then
          EVENT_ev_philosopher_2_LOCKed <= '1';
        elsif ((EVENT_ev_philosopher_1_AWAIT) = ('1')) and ((EVENT_ev_philosopher_1_LOCKed) = ('0')) then
          EVENT_ev_philosopher_1_LOCKed <= '1';
        elsif ((EVENT_ev_philosopher_0_AWAIT) = ('1')) and ((EVENT_ev_philosopher_0_LOCKed) = ('0')) then
          EVENT_ev_philosopher_0_LOCKed <= '1';
        elsif (EVENT_ev_main_WAKEUP) = ('1') then
          if (EVENT_ev_main_WAKEUP) = ('1') then
            EVENT_ev_main_GD <= '0';
          end if;
          if (EVENT_ev_philosopher_3_LOCKed) = ('1') then
            EVENT_ev_philosopher_3_LOCKed <= '0';
            EVENT_ev_philosopher_3_GD <= '0';
          end if;
          if (EVENT_ev_philosopher_2_LOCKed) = ('1') then
            EVENT_ev_philosopher_2_LOCKed <= '0';
            EVENT_ev_philosopher_2_GD <= '0';
          end if;
          if (EVENT_ev_philosopher_1_LOCKed) = ('1') then
            EVENT_ev_philosopher_1_LOCKed <= '0';
            EVENT_ev_philosopher_1_GD <= '0';
          end if;
          if (EVENT_ev_philosopher_0_LOCKed) = ('1') then
            EVENT_ev_philosopher_0_LOCKed <= '0';
            EVENT_ev_philosopher_0_GD <= '0';
          end if;
        end if;
      end if;
    end if;
  end process EVENT_ev_SCHED;
  --
  -- End of <Object Event.event.ev>
  --
  
  -- Register
  IMPL_REG_thinking_0: process(
          REG_thinking_0_philosopher_0_WR,
          REG_thinking_0_philosopher_0_WE,
          REG_thinking_0,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_thinking_0 <= '0';
     elsif REG_thinking_0_philosopher_0_WE='1' then
      REG_thinking_0 <= REG_thinking_0_philosopher_0_WR;
     end if;
    end if;
  end process IMPL_REG_thinking_0;
  
  -- Register
  IMPL_REG_thinking_1: process(
          REG_thinking_1_philosopher_1_WR,
          REG_thinking_1_philosopher_1_WE,
          REG_thinking_1,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_thinking_1 <= '0';
     elsif REG_thinking_1_philosopher_1_WE='1' then
      REG_thinking_1 <= REG_thinking_1_philosopher_1_WR;
     end if;
    end if;
  end process IMPL_REG_thinking_1;
  
  -- Register
  IMPL_REG_thinking_2: process(
          REG_thinking_2_philosopher_2_WR,
          REG_thinking_2_philosopher_2_WE,
          REG_thinking_2,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_thinking_2 <= '0';
     elsif REG_thinking_2_philosopher_2_WE='1' then
      REG_thinking_2 <= REG_thinking_2_philosopher_2_WR;
     end if;
    end if;
  end process IMPL_REG_thinking_2;
  
  -- Register
  IMPL_REG_thinking_3: process(
          REG_thinking_3_philosopher_3_WR,
          REG_thinking_3_philosopher_3_WE,
          REG_thinking_3,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_thinking_3 <= '0';
     elsif REG_thinking_3_philosopher_3_WE='1' then
      REG_thinking_3 <= REG_thinking_3_philosopher_3_WR;
     end if;
    end if;
  end process IMPL_REG_thinking_3;
  
  -- Register
  IMPL_REG_thinking_4: process(
          REG_thinking_4_philosopher_4_WR,
          REG_thinking_4_philosopher_4_WE,
          REG_thinking_4,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_thinking_4 <= '0';
     elsif REG_thinking_4_philosopher_4_WE='1' then
      REG_thinking_4 <= REG_thinking_4_philosopher_4_WR;
     end if;
    end if;
  end process IMPL_REG_thinking_4;
  
  -- Process control
  PRO_CONTROL_main: process(
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk = '1' then
      if conpro_system_reset = '1' then
        PRO_main_ENABLE <= '1'; -- main process activated on reset
      end if;
    end if;
  end process PRO_CONTROL_main;
  
  --
  --  ConPro V2.1.D148 EMI Semaphore.semaphore V2.06
  --
  
  --
  -- EMI <Object Semaphore.semaphore.fork_0> Process
  --
  SEMA_fork_0_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    SEMA_fork_0_init_INIT,
    SEMA_fork_0_init_WR,
    SEMA_fork_0_philosopher_3_DOWN,
    SEMA_fork_0_LEVEL,
    SEMA_fork_0_philosopher_2_DOWN,
    SEMA_fork_0_philosopher_1_DOWN,
    SEMA_fork_0_philosopher_4_DOWN,
    SEMA_fork_0_philosopher_0_DOWN,
    SEMA_fork_0_philosopher_3_QUEUED,
    SEMA_fork_0_OWNER,
    SEMA_fork_0_HEAD,
    SEMA_fork_0_philosopher_2_QUEUED,
    SEMA_fork_0_philosopher_1_QUEUED,
    SEMA_fork_0_philosopher_4_QUEUED,
    SEMA_fork_0_philosopher_0_QUEUED,
    SEMA_fork_0_philosopher_3_PRIO,
    SEMA_fork_0_TAIL,
    SEMA_fork_0_philosopher_2_PRIO,
    SEMA_fork_0_philosopher_1_PRIO,
    SEMA_fork_0_philosopher_4_PRIO,
    SEMA_fork_0_philosopher_0_PRIO,
    SEMA_fork_0_philosopher_3_UP,
    SEMA_fork_0_philosopher_2_UP,
    SEMA_fork_0_philosopher_1_UP,
    SEMA_fork_0_philosopher_4_UP,
    SEMA_fork_0_philosopher_0_UP)
  begin
    if (conpro_system_clk'event) and ((conpro_system_clk) = ('1')) then
      if (conpro_system_reset) = ('1') then
        SEMA_fork_0_LEVEL <= "00000000";
        SEMA_fork_0_init_GD <= '1';
        SEMA_fork_0_init_QUEUED <= '0';
        SEMA_fork_0_init_PRIO <= "000";
        SEMA_fork_0_philosopher_3_GD <= '1';
        SEMA_fork_0_philosopher_3_QUEUED <= '0';
        SEMA_fork_0_philosopher_3_PRIO <= "000";
        SEMA_fork_0_philosopher_2_GD <= '1';
        SEMA_fork_0_philosopher_2_QUEUED <= '0';
        SEMA_fork_0_philosopher_2_PRIO <= "000";
        SEMA_fork_0_philosopher_1_GD <= '1';
        SEMA_fork_0_philosopher_1_QUEUED <= '0';
        SEMA_fork_0_philosopher_1_PRIO <= "000";
        SEMA_fork_0_philosopher_4_GD <= '1';
        SEMA_fork_0_philosopher_4_QUEUED <= '0';
        SEMA_fork_0_philosopher_4_PRIO <= "000";
        SEMA_fork_0_philosopher_0_GD <= '1';
        SEMA_fork_0_philosopher_0_QUEUED <= '0';
        SEMA_fork_0_philosopher_0_PRIO <= "000";
        SEMA_fork_0_HEAD <= "000";
        SEMA_fork_0_TAIL <= "000";
        SEMA_fork_0_OWNER <= "000";
      else
        SEMA_fork_0_init_GD <= '1';
        SEMA_fork_0_philosopher_3_GD <= '1';
        SEMA_fork_0_philosopher_2_GD <= '1';
        SEMA_fork_0_philosopher_1_GD <= '1';
        SEMA_fork_0_philosopher_4_GD <= '1';
        SEMA_fork_0_philosopher_0_GD <= '1';
        if (SEMA_fork_0_init_INIT) = ('1') then
          SEMA_fork_0_LEVEL <= SEMA_fork_0_init_WR;
          SEMA_fork_0_init_GD <= '0';
          SEMA_fork_0_init_QUEUED <= '0';
          SEMA_fork_0_init_PRIO <= "000";
          SEMA_fork_0_philosopher_3_QUEUED <= '0';
          SEMA_fork_0_philosopher_3_PRIO <= "000";
          SEMA_fork_0_philosopher_2_QUEUED <= '0';
          SEMA_fork_0_philosopher_2_PRIO <= "000";
          SEMA_fork_0_philosopher_1_QUEUED <= '0';
          SEMA_fork_0_philosopher_1_PRIO <= "000";
          SEMA_fork_0_philosopher_4_QUEUED <= '0';
          SEMA_fork_0_philosopher_4_PRIO <= "000";
          SEMA_fork_0_philosopher_0_QUEUED <= '0';
          SEMA_fork_0_philosopher_0_PRIO <= "000";
          SEMA_fork_0_HEAD <= "000";
          SEMA_fork_0_TAIL <= "000";
          SEMA_fork_0_OWNER <= "000";
        elsif ((SEMA_fork_0_philosopher_3_DOWN) = ('1')) and (not ((SEMA_fork_0_LEVEL) = ("00000000"))) then
          SEMA_fork_0_philosopher_3_GD <= '0';
          SEMA_fork_0_LEVEL <= (SEMA_fork_0_LEVEL) - (1);
          SEMA_fork_0_OWNER <= "101";
        elsif ((SEMA_fork_0_philosopher_2_DOWN) = ('1')) and (not ((SEMA_fork_0_LEVEL) = ("00000000"))) then
          SEMA_fork_0_philosopher_2_GD <= '0';
          SEMA_fork_0_LEVEL <= (SEMA_fork_0_LEVEL) - (1);
          SEMA_fork_0_OWNER <= "100";
        elsif ((SEMA_fork_0_philosopher_1_DOWN) = ('1')) and (not ((SEMA_fork_0_LEVEL) = ("00000000"))) then
          SEMA_fork_0_philosopher_1_GD <= '0';
          SEMA_fork_0_LEVEL <= (SEMA_fork_0_LEVEL) - (1);
          SEMA_fork_0_OWNER <= "011";
        elsif ((SEMA_fork_0_philosopher_4_DOWN) = ('1')) and (not ((SEMA_fork_0_LEVEL) = ("00000000"))) then
          SEMA_fork_0_philosopher_4_GD <= '0';
          SEMA_fork_0_LEVEL <= (SEMA_fork_0_LEVEL) - (1);
          SEMA_fork_0_OWNER <= "010";
        elsif ((SEMA_fork_0_philosopher_0_DOWN) = ('1')) and (not ((SEMA_fork_0_LEVEL) = ("00000000"))) then
          SEMA_fork_0_philosopher_0_GD <= '0';
          SEMA_fork_0_LEVEL <= (SEMA_fork_0_LEVEL) - (1);
          SEMA_fork_0_OWNER <= "001";
        elsif (((SEMA_fork_0_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_3_QUEUED) = ('0'))) and ((SEMA_fork_0_OWNER) /= ("101")) then
          SEMA_fork_0_philosopher_3_PRIO <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_HEAD <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_philosopher_3_QUEUED <= '1';
        elsif (((SEMA_fork_0_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_2_QUEUED) = ('0'))) and ((SEMA_fork_0_OWNER) /= ("100")) then
          SEMA_fork_0_philosopher_2_PRIO <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_HEAD <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_philosopher_2_QUEUED <= '1';
        elsif (((SEMA_fork_0_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_1_QUEUED) = ('0'))) and ((SEMA_fork_0_OWNER) /= ("011")) then
          SEMA_fork_0_philosopher_1_PRIO <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_HEAD <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_philosopher_1_QUEUED <= '1';
        elsif (((SEMA_fork_0_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_4_QUEUED) = ('0'))) and ((SEMA_fork_0_OWNER) /= ("010")) then
          SEMA_fork_0_philosopher_4_PRIO <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_HEAD <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_philosopher_4_QUEUED <= '1';
        elsif (((SEMA_fork_0_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_0_QUEUED) = ('0'))) and ((SEMA_fork_0_OWNER) /= ("001")) then
          SEMA_fork_0_philosopher_0_PRIO <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_HEAD <= (SEMA_fork_0_HEAD) + (1);
          SEMA_fork_0_philosopher_0_QUEUED <= '1';
        elsif (((SEMA_fork_0_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_3_QUEUED) = ('1'))) and ((SEMA_fork_0_philosopher_3_PRIO) = (SEMA_fork_0_TAIL)) then
          SEMA_fork_0_philosopher_3_GD <= '0';
          SEMA_fork_0_philosopher_3_QUEUED <= '0';
          SEMA_fork_0_OWNER <= "101";
        elsif (((SEMA_fork_0_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_2_QUEUED) = ('1'))) and ((SEMA_fork_0_philosopher_2_PRIO) = (SEMA_fork_0_TAIL)) then
          SEMA_fork_0_philosopher_2_GD <= '0';
          SEMA_fork_0_philosopher_2_QUEUED <= '0';
          SEMA_fork_0_OWNER <= "100";
        elsif (((SEMA_fork_0_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_1_QUEUED) = ('1'))) and ((SEMA_fork_0_philosopher_1_PRIO) = (SEMA_fork_0_TAIL)) then
          SEMA_fork_0_philosopher_1_GD <= '0';
          SEMA_fork_0_philosopher_1_QUEUED <= '0';
          SEMA_fork_0_OWNER <= "011";
        elsif (((SEMA_fork_0_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_4_QUEUED) = ('1'))) and ((SEMA_fork_0_philosopher_4_PRIO) = (SEMA_fork_0_TAIL)) then
          SEMA_fork_0_philosopher_4_GD <= '0';
          SEMA_fork_0_philosopher_4_QUEUED <= '0';
          SEMA_fork_0_OWNER <= "010";
        elsif (((SEMA_fork_0_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_0_philosopher_0_QUEUED) = ('1'))) and ((SEMA_fork_0_philosopher_0_PRIO) = (SEMA_fork_0_TAIL)) then
          SEMA_fork_0_philosopher_0_GD <= '0';
          SEMA_fork_0_philosopher_0_QUEUED <= '0';
          SEMA_fork_0_OWNER <= "001";
        elsif ((SEMA_fork_0_philosopher_3_UP) = ('1')) or ((SEMA_fork_0_philosopher_2_UP) = ('1')) or ((SEMA_fork_0_philosopher_1_UP) = ('1')) or ((SEMA_fork_0_philosopher_4_UP) = ('1')) or (SEMA_fork_0_philosopher_0_UP) = ('1') then
          if (SEMA_fork_0_philosopher_3_UP) = ('1') then
            SEMA_fork_0_philosopher_3_GD <= '0';
          elsif (SEMA_fork_0_philosopher_2_UP) = ('1') then
            SEMA_fork_0_philosopher_2_GD <= '0';
          elsif (SEMA_fork_0_philosopher_1_UP) = ('1') then
            SEMA_fork_0_philosopher_1_GD <= '0';
          elsif (SEMA_fork_0_philosopher_4_UP) = ('1') then
            SEMA_fork_0_philosopher_4_GD <= '0';
          elsif (SEMA_fork_0_philosopher_0_UP) = ('1') then
            SEMA_fork_0_philosopher_0_GD <= '0';
          end if;
          if (SEMA_fork_0_HEAD) = (SEMA_fork_0_TAIL) then
            SEMA_fork_0_OWNER <= "000";
            SEMA_fork_0_LEVEL <= (SEMA_fork_0_LEVEL) + (1);
          else
            SEMA_fork_0_TAIL <= (SEMA_fork_0_TAIL) + (1);
          end if;
        end if;
      end if;
    end if;
  end process SEMA_fork_0_SCHED;
  --
  -- End of <Object Semaphore.semaphore.fork_0>
  --
  
  --
  --  ConPro V2.1.D148 EMI Semaphore.semaphore V2.06
  --
  
  --
  -- EMI <Object Semaphore.semaphore.fork_1> Process
  --
  SEMA_fork_1_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    SEMA_fork_1_init_INIT,
    SEMA_fork_1_init_WR,
    SEMA_fork_1_philosopher_3_DOWN,
    SEMA_fork_1_LEVEL,
    SEMA_fork_1_philosopher_2_DOWN,
    SEMA_fork_1_philosopher_4_DOWN,
    SEMA_fork_1_philosopher_1_DOWN,
    SEMA_fork_1_philosopher_0_DOWN,
    SEMA_fork_1_philosopher_3_QUEUED,
    SEMA_fork_1_OWNER,
    SEMA_fork_1_HEAD,
    SEMA_fork_1_philosopher_2_QUEUED,
    SEMA_fork_1_philosopher_4_QUEUED,
    SEMA_fork_1_philosopher_1_QUEUED,
    SEMA_fork_1_philosopher_0_QUEUED,
    SEMA_fork_1_philosopher_3_PRIO,
    SEMA_fork_1_TAIL,
    SEMA_fork_1_philosopher_2_PRIO,
    SEMA_fork_1_philosopher_4_PRIO,
    SEMA_fork_1_philosopher_1_PRIO,
    SEMA_fork_1_philosopher_0_PRIO,
    SEMA_fork_1_philosopher_3_UP,
    SEMA_fork_1_philosopher_2_UP,
    SEMA_fork_1_philosopher_4_UP,
    SEMA_fork_1_philosopher_1_UP,
    SEMA_fork_1_philosopher_0_UP)
  begin
    if (conpro_system_clk'event) and ((conpro_system_clk) = ('1')) then
      if (conpro_system_reset) = ('1') then
        SEMA_fork_1_LEVEL <= "00000000";
        SEMA_fork_1_init_GD <= '1';
        SEMA_fork_1_init_QUEUED <= '0';
        SEMA_fork_1_init_PRIO <= "000";
        SEMA_fork_1_philosopher_3_GD <= '1';
        SEMA_fork_1_philosopher_3_QUEUED <= '0';
        SEMA_fork_1_philosopher_3_PRIO <= "000";
        SEMA_fork_1_philosopher_2_GD <= '1';
        SEMA_fork_1_philosopher_2_QUEUED <= '0';
        SEMA_fork_1_philosopher_2_PRIO <= "000";
        SEMA_fork_1_philosopher_4_GD <= '1';
        SEMA_fork_1_philosopher_4_QUEUED <= '0';
        SEMA_fork_1_philosopher_4_PRIO <= "000";
        SEMA_fork_1_philosopher_1_GD <= '1';
        SEMA_fork_1_philosopher_1_QUEUED <= '0';
        SEMA_fork_1_philosopher_1_PRIO <= "000";
        SEMA_fork_1_philosopher_0_GD <= '1';
        SEMA_fork_1_philosopher_0_QUEUED <= '0';
        SEMA_fork_1_philosopher_0_PRIO <= "000";
        SEMA_fork_1_HEAD <= "000";
        SEMA_fork_1_TAIL <= "000";
        SEMA_fork_1_OWNER <= "000";
      else
        SEMA_fork_1_init_GD <= '1';
        SEMA_fork_1_philosopher_3_GD <= '1';
        SEMA_fork_1_philosopher_2_GD <= '1';
        SEMA_fork_1_philosopher_4_GD <= '1';
        SEMA_fork_1_philosopher_1_GD <= '1';
        SEMA_fork_1_philosopher_0_GD <= '1';
        if (SEMA_fork_1_init_INIT) = ('1') then
          SEMA_fork_1_LEVEL <= SEMA_fork_1_init_WR;
          SEMA_fork_1_init_GD <= '0';
          SEMA_fork_1_init_QUEUED <= '0';
          SEMA_fork_1_init_PRIO <= "000";
          SEMA_fork_1_philosopher_3_QUEUED <= '0';
          SEMA_fork_1_philosopher_3_PRIO <= "000";
          SEMA_fork_1_philosopher_2_QUEUED <= '0';
          SEMA_fork_1_philosopher_2_PRIO <= "000";
          SEMA_fork_1_philosopher_4_QUEUED <= '0';
          SEMA_fork_1_philosopher_4_PRIO <= "000";
          SEMA_fork_1_philosopher_1_QUEUED <= '0';
          SEMA_fork_1_philosopher_1_PRIO <= "000";
          SEMA_fork_1_philosopher_0_QUEUED <= '0';
          SEMA_fork_1_philosopher_0_PRIO <= "000";
          SEMA_fork_1_HEAD <= "000";
          SEMA_fork_1_TAIL <= "000";
          SEMA_fork_1_OWNER <= "000";
        elsif ((SEMA_fork_1_philosopher_3_DOWN) = ('1')) and (not ((SEMA_fork_1_LEVEL) = ("00000000"))) then
          SEMA_fork_1_philosopher_3_GD <= '0';
          SEMA_fork_1_LEVEL <= (SEMA_fork_1_LEVEL) - (1);
          SEMA_fork_1_OWNER <= "101";
        elsif ((SEMA_fork_1_philosopher_2_DOWN) = ('1')) and (not ((SEMA_fork_1_LEVEL) = ("00000000"))) then
          SEMA_fork_1_philosopher_2_GD <= '0';
          SEMA_fork_1_LEVEL <= (SEMA_fork_1_LEVEL) - (1);
          SEMA_fork_1_OWNER <= "100";
        elsif ((SEMA_fork_1_philosopher_4_DOWN) = ('1')) and (not ((SEMA_fork_1_LEVEL) = ("00000000"))) then
          SEMA_fork_1_philosopher_4_GD <= '0';
          SEMA_fork_1_LEVEL <= (SEMA_fork_1_LEVEL) - (1);
          SEMA_fork_1_OWNER <= "011";
        elsif ((SEMA_fork_1_philosopher_1_DOWN) = ('1')) and (not ((SEMA_fork_1_LEVEL) = ("00000000"))) then
          SEMA_fork_1_philosopher_1_GD <= '0';
          SEMA_fork_1_LEVEL <= (SEMA_fork_1_LEVEL) - (1);
          SEMA_fork_1_OWNER <= "010";
        elsif ((SEMA_fork_1_philosopher_0_DOWN) = ('1')) and (not ((SEMA_fork_1_LEVEL) = ("00000000"))) then
          SEMA_fork_1_philosopher_0_GD <= '0';
          SEMA_fork_1_LEVEL <= (SEMA_fork_1_LEVEL) - (1);
          SEMA_fork_1_OWNER <= "001";
        elsif (((SEMA_fork_1_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_3_QUEUED) = ('0'))) and ((SEMA_fork_1_OWNER) /= ("101")) then
          SEMA_fork_1_philosopher_3_PRIO <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_HEAD <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_philosopher_3_QUEUED <= '1';
        elsif (((SEMA_fork_1_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_2_QUEUED) = ('0'))) and ((SEMA_fork_1_OWNER) /= ("100")) then
          SEMA_fork_1_philosopher_2_PRIO <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_HEAD <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_philosopher_2_QUEUED <= '1';
        elsif (((SEMA_fork_1_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_4_QUEUED) = ('0'))) and ((SEMA_fork_1_OWNER) /= ("011")) then
          SEMA_fork_1_philosopher_4_PRIO <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_HEAD <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_philosopher_4_QUEUED <= '1';
        elsif (((SEMA_fork_1_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_1_QUEUED) = ('0'))) and ((SEMA_fork_1_OWNER) /= ("010")) then
          SEMA_fork_1_philosopher_1_PRIO <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_HEAD <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_philosopher_1_QUEUED <= '1';
        elsif (((SEMA_fork_1_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_0_QUEUED) = ('0'))) and ((SEMA_fork_1_OWNER) /= ("001")) then
          SEMA_fork_1_philosopher_0_PRIO <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_HEAD <= (SEMA_fork_1_HEAD) + (1);
          SEMA_fork_1_philosopher_0_QUEUED <= '1';
        elsif (((SEMA_fork_1_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_3_QUEUED) = ('1'))) and ((SEMA_fork_1_philosopher_3_PRIO) = (SEMA_fork_1_TAIL)) then
          SEMA_fork_1_philosopher_3_GD <= '0';
          SEMA_fork_1_philosopher_3_QUEUED <= '0';
          SEMA_fork_1_OWNER <= "101";
        elsif (((SEMA_fork_1_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_2_QUEUED) = ('1'))) and ((SEMA_fork_1_philosopher_2_PRIO) = (SEMA_fork_1_TAIL)) then
          SEMA_fork_1_philosopher_2_GD <= '0';
          SEMA_fork_1_philosopher_2_QUEUED <= '0';
          SEMA_fork_1_OWNER <= "100";
        elsif (((SEMA_fork_1_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_4_QUEUED) = ('1'))) and ((SEMA_fork_1_philosopher_4_PRIO) = (SEMA_fork_1_TAIL)) then
          SEMA_fork_1_philosopher_4_GD <= '0';
          SEMA_fork_1_philosopher_4_QUEUED <= '0';
          SEMA_fork_1_OWNER <= "011";
        elsif (((SEMA_fork_1_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_1_QUEUED) = ('1'))) and ((SEMA_fork_1_philosopher_1_PRIO) = (SEMA_fork_1_TAIL)) then
          SEMA_fork_1_philosopher_1_GD <= '0';
          SEMA_fork_1_philosopher_1_QUEUED <= '0';
          SEMA_fork_1_OWNER <= "010";
        elsif (((SEMA_fork_1_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_1_philosopher_0_QUEUED) = ('1'))) and ((SEMA_fork_1_philosopher_0_PRIO) = (SEMA_fork_1_TAIL)) then
          SEMA_fork_1_philosopher_0_GD <= '0';
          SEMA_fork_1_philosopher_0_QUEUED <= '0';
          SEMA_fork_1_OWNER <= "001";
        elsif ((SEMA_fork_1_philosopher_3_UP) = ('1')) or ((SEMA_fork_1_philosopher_2_UP) = ('1')) or ((SEMA_fork_1_philosopher_4_UP) = ('1')) or ((SEMA_fork_1_philosopher_1_UP) = ('1')) or (SEMA_fork_1_philosopher_0_UP) = ('1') then
          if (SEMA_fork_1_philosopher_3_UP) = ('1') then
            SEMA_fork_1_philosopher_3_GD <= '0';
          elsif (SEMA_fork_1_philosopher_2_UP) = ('1') then
            SEMA_fork_1_philosopher_2_GD <= '0';
          elsif (SEMA_fork_1_philosopher_4_UP) = ('1') then
            SEMA_fork_1_philosopher_4_GD <= '0';
          elsif (SEMA_fork_1_philosopher_1_UP) = ('1') then
            SEMA_fork_1_philosopher_1_GD <= '0';
          elsif (SEMA_fork_1_philosopher_0_UP) = ('1') then
            SEMA_fork_1_philosopher_0_GD <= '0';
          end if;
          if (SEMA_fork_1_HEAD) = (SEMA_fork_1_TAIL) then
            SEMA_fork_1_OWNER <= "000";
            SEMA_fork_1_LEVEL <= (SEMA_fork_1_LEVEL) + (1);
          else
            SEMA_fork_1_TAIL <= (SEMA_fork_1_TAIL) + (1);
          end if;
        end if;
      end if;
    end if;
  end process SEMA_fork_1_SCHED;
  --
  -- End of <Object Semaphore.semaphore.fork_1>
  --
  
  --
  --  ConPro V2.1.D148 EMI Semaphore.semaphore V2.06
  --
  
  --
  -- EMI <Object Semaphore.semaphore.fork_2> Process
  --
  SEMA_fork_2_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    SEMA_fork_2_init_INIT,
    SEMA_fork_2_init_WR,
    SEMA_fork_2_philosopher_3_DOWN,
    SEMA_fork_2_LEVEL,
    SEMA_fork_2_philosopher_0_DOWN,
    SEMA_fork_2_philosopher_4_DOWN,
    SEMA_fork_2_philosopher_2_DOWN,
    SEMA_fork_2_philosopher_1_DOWN,
    SEMA_fork_2_philosopher_3_QUEUED,
    SEMA_fork_2_OWNER,
    SEMA_fork_2_HEAD,
    SEMA_fork_2_philosopher_0_QUEUED,
    SEMA_fork_2_philosopher_4_QUEUED,
    SEMA_fork_2_philosopher_2_QUEUED,
    SEMA_fork_2_philosopher_1_QUEUED,
    SEMA_fork_2_philosopher_3_PRIO,
    SEMA_fork_2_TAIL,
    SEMA_fork_2_philosopher_0_PRIO,
    SEMA_fork_2_philosopher_4_PRIO,
    SEMA_fork_2_philosopher_2_PRIO,
    SEMA_fork_2_philosopher_1_PRIO,
    SEMA_fork_2_philosopher_3_UP,
    SEMA_fork_2_philosopher_0_UP,
    SEMA_fork_2_philosopher_4_UP,
    SEMA_fork_2_philosopher_2_UP,
    SEMA_fork_2_philosopher_1_UP)
  begin
    if (conpro_system_clk'event) and ((conpro_system_clk) = ('1')) then
      if (conpro_system_reset) = ('1') then
        SEMA_fork_2_LEVEL <= "00000000";
        SEMA_fork_2_init_GD <= '1';
        SEMA_fork_2_init_QUEUED <= '0';
        SEMA_fork_2_init_PRIO <= "000";
        SEMA_fork_2_philosopher_3_GD <= '1';
        SEMA_fork_2_philosopher_3_QUEUED <= '0';
        SEMA_fork_2_philosopher_3_PRIO <= "000";
        SEMA_fork_2_philosopher_0_GD <= '1';
        SEMA_fork_2_philosopher_0_QUEUED <= '0';
        SEMA_fork_2_philosopher_0_PRIO <= "000";
        SEMA_fork_2_philosopher_4_GD <= '1';
        SEMA_fork_2_philosopher_4_QUEUED <= '0';
        SEMA_fork_2_philosopher_4_PRIO <= "000";
        SEMA_fork_2_philosopher_2_GD <= '1';
        SEMA_fork_2_philosopher_2_QUEUED <= '0';
        SEMA_fork_2_philosopher_2_PRIO <= "000";
        SEMA_fork_2_philosopher_1_GD <= '1';
        SEMA_fork_2_philosopher_1_QUEUED <= '0';
        SEMA_fork_2_philosopher_1_PRIO <= "000";
        SEMA_fork_2_HEAD <= "000";
        SEMA_fork_2_TAIL <= "000";
        SEMA_fork_2_OWNER <= "000";
      else
        SEMA_fork_2_init_GD <= '1';
        SEMA_fork_2_philosopher_3_GD <= '1';
        SEMA_fork_2_philosopher_0_GD <= '1';
        SEMA_fork_2_philosopher_4_GD <= '1';
        SEMA_fork_2_philosopher_2_GD <= '1';
        SEMA_fork_2_philosopher_1_GD <= '1';
        if (SEMA_fork_2_init_INIT) = ('1') then
          SEMA_fork_2_LEVEL <= SEMA_fork_2_init_WR;
          SEMA_fork_2_init_GD <= '0';
          SEMA_fork_2_init_QUEUED <= '0';
          SEMA_fork_2_init_PRIO <= "000";
          SEMA_fork_2_philosopher_3_QUEUED <= '0';
          SEMA_fork_2_philosopher_3_PRIO <= "000";
          SEMA_fork_2_philosopher_0_QUEUED <= '0';
          SEMA_fork_2_philosopher_0_PRIO <= "000";
          SEMA_fork_2_philosopher_4_QUEUED <= '0';
          SEMA_fork_2_philosopher_4_PRIO <= "000";
          SEMA_fork_2_philosopher_2_QUEUED <= '0';
          SEMA_fork_2_philosopher_2_PRIO <= "000";
          SEMA_fork_2_philosopher_1_QUEUED <= '0';
          SEMA_fork_2_philosopher_1_PRIO <= "000";
          SEMA_fork_2_HEAD <= "000";
          SEMA_fork_2_TAIL <= "000";
          SEMA_fork_2_OWNER <= "000";
        elsif ((SEMA_fork_2_philosopher_3_DOWN) = ('1')) and (not ((SEMA_fork_2_LEVEL) = ("00000000"))) then
          SEMA_fork_2_philosopher_3_GD <= '0';
          SEMA_fork_2_LEVEL <= (SEMA_fork_2_LEVEL) - (1);
          SEMA_fork_2_OWNER <= "101";
        elsif ((SEMA_fork_2_philosopher_0_DOWN) = ('1')) and (not ((SEMA_fork_2_LEVEL) = ("00000000"))) then
          SEMA_fork_2_philosopher_0_GD <= '0';
          SEMA_fork_2_LEVEL <= (SEMA_fork_2_LEVEL) - (1);
          SEMA_fork_2_OWNER <= "100";
        elsif ((SEMA_fork_2_philosopher_4_DOWN) = ('1')) and (not ((SEMA_fork_2_LEVEL) = ("00000000"))) then
          SEMA_fork_2_philosopher_4_GD <= '0';
          SEMA_fork_2_LEVEL <= (SEMA_fork_2_LEVEL) - (1);
          SEMA_fork_2_OWNER <= "011";
        elsif ((SEMA_fork_2_philosopher_2_DOWN) = ('1')) and (not ((SEMA_fork_2_LEVEL) = ("00000000"))) then
          SEMA_fork_2_philosopher_2_GD <= '0';
          SEMA_fork_2_LEVEL <= (SEMA_fork_2_LEVEL) - (1);
          SEMA_fork_2_OWNER <= "010";
        elsif ((SEMA_fork_2_philosopher_1_DOWN) = ('1')) and (not ((SEMA_fork_2_LEVEL) = ("00000000"))) then
          SEMA_fork_2_philosopher_1_GD <= '0';
          SEMA_fork_2_LEVEL <= (SEMA_fork_2_LEVEL) - (1);
          SEMA_fork_2_OWNER <= "001";
        elsif (((SEMA_fork_2_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_3_QUEUED) = ('0'))) and ((SEMA_fork_2_OWNER) /= ("101")) then
          SEMA_fork_2_philosopher_3_PRIO <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_HEAD <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_philosopher_3_QUEUED <= '1';
        elsif (((SEMA_fork_2_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_0_QUEUED) = ('0'))) and ((SEMA_fork_2_OWNER) /= ("100")) then
          SEMA_fork_2_philosopher_0_PRIO <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_HEAD <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_philosopher_0_QUEUED <= '1';
        elsif (((SEMA_fork_2_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_4_QUEUED) = ('0'))) and ((SEMA_fork_2_OWNER) /= ("011")) then
          SEMA_fork_2_philosopher_4_PRIO <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_HEAD <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_philosopher_4_QUEUED <= '1';
        elsif (((SEMA_fork_2_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_2_QUEUED) = ('0'))) and ((SEMA_fork_2_OWNER) /= ("010")) then
          SEMA_fork_2_philosopher_2_PRIO <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_HEAD <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_philosopher_2_QUEUED <= '1';
        elsif (((SEMA_fork_2_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_1_QUEUED) = ('0'))) and ((SEMA_fork_2_OWNER) /= ("001")) then
          SEMA_fork_2_philosopher_1_PRIO <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_HEAD <= (SEMA_fork_2_HEAD) + (1);
          SEMA_fork_2_philosopher_1_QUEUED <= '1';
        elsif (((SEMA_fork_2_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_3_QUEUED) = ('1'))) and ((SEMA_fork_2_philosopher_3_PRIO) = (SEMA_fork_2_TAIL)) then
          SEMA_fork_2_philosopher_3_GD <= '0';
          SEMA_fork_2_philosopher_3_QUEUED <= '0';
          SEMA_fork_2_OWNER <= "101";
        elsif (((SEMA_fork_2_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_0_QUEUED) = ('1'))) and ((SEMA_fork_2_philosopher_0_PRIO) = (SEMA_fork_2_TAIL)) then
          SEMA_fork_2_philosopher_0_GD <= '0';
          SEMA_fork_2_philosopher_0_QUEUED <= '0';
          SEMA_fork_2_OWNER <= "100";
        elsif (((SEMA_fork_2_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_4_QUEUED) = ('1'))) and ((SEMA_fork_2_philosopher_4_PRIO) = (SEMA_fork_2_TAIL)) then
          SEMA_fork_2_philosopher_4_GD <= '0';
          SEMA_fork_2_philosopher_4_QUEUED <= '0';
          SEMA_fork_2_OWNER <= "011";
        elsif (((SEMA_fork_2_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_2_QUEUED) = ('1'))) and ((SEMA_fork_2_philosopher_2_PRIO) = (SEMA_fork_2_TAIL)) then
          SEMA_fork_2_philosopher_2_GD <= '0';
          SEMA_fork_2_philosopher_2_QUEUED <= '0';
          SEMA_fork_2_OWNER <= "010";
        elsif (((SEMA_fork_2_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_2_philosopher_1_QUEUED) = ('1'))) and ((SEMA_fork_2_philosopher_1_PRIO) = (SEMA_fork_2_TAIL)) then
          SEMA_fork_2_philosopher_1_GD <= '0';
          SEMA_fork_2_philosopher_1_QUEUED <= '0';
          SEMA_fork_2_OWNER <= "001";
        elsif ((SEMA_fork_2_philosopher_3_UP) = ('1')) or ((SEMA_fork_2_philosopher_0_UP) = ('1')) or ((SEMA_fork_2_philosopher_4_UP) = ('1')) or ((SEMA_fork_2_philosopher_2_UP) = ('1')) or (SEMA_fork_2_philosopher_1_UP) = ('1') then
          if (SEMA_fork_2_philosopher_3_UP) = ('1') then
            SEMA_fork_2_philosopher_3_GD <= '0';
          elsif (SEMA_fork_2_philosopher_0_UP) = ('1') then
            SEMA_fork_2_philosopher_0_GD <= '0';
          elsif (SEMA_fork_2_philosopher_4_UP) = ('1') then
            SEMA_fork_2_philosopher_4_GD <= '0';
          elsif (SEMA_fork_2_philosopher_2_UP) = ('1') then
            SEMA_fork_2_philosopher_2_GD <= '0';
          elsif (SEMA_fork_2_philosopher_1_UP) = ('1') then
            SEMA_fork_2_philosopher_1_GD <= '0';
          end if;
          if (SEMA_fork_2_HEAD) = (SEMA_fork_2_TAIL) then
            SEMA_fork_2_OWNER <= "000";
            SEMA_fork_2_LEVEL <= (SEMA_fork_2_LEVEL) + (1);
          else
            SEMA_fork_2_TAIL <= (SEMA_fork_2_TAIL) + (1);
          end if;
        end if;
      end if;
    end if;
  end process SEMA_fork_2_SCHED;
  --
  -- End of <Object Semaphore.semaphore.fork_2>
  --
  
  --
  --  ConPro V2.1.D148 EMI Semaphore.semaphore V2.06
  --
  
  --
  -- EMI <Object Semaphore.semaphore.fork_3> Process
  --
  SEMA_fork_3_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    SEMA_fork_3_init_INIT,
    SEMA_fork_3_init_WR,
    SEMA_fork_3_philosopher_1_DOWN,
    SEMA_fork_3_LEVEL,
    SEMA_fork_3_philosopher_0_DOWN,
    SEMA_fork_3_philosopher_4_DOWN,
    SEMA_fork_3_philosopher_3_DOWN,
    SEMA_fork_3_philosopher_2_DOWN,
    SEMA_fork_3_philosopher_1_QUEUED,
    SEMA_fork_3_OWNER,
    SEMA_fork_3_HEAD,
    SEMA_fork_3_philosopher_0_QUEUED,
    SEMA_fork_3_philosopher_4_QUEUED,
    SEMA_fork_3_philosopher_3_QUEUED,
    SEMA_fork_3_philosopher_2_QUEUED,
    SEMA_fork_3_philosopher_1_PRIO,
    SEMA_fork_3_TAIL,
    SEMA_fork_3_philosopher_0_PRIO,
    SEMA_fork_3_philosopher_4_PRIO,
    SEMA_fork_3_philosopher_3_PRIO,
    SEMA_fork_3_philosopher_2_PRIO,
    SEMA_fork_3_philosopher_1_UP,
    SEMA_fork_3_philosopher_0_UP,
    SEMA_fork_3_philosopher_4_UP,
    SEMA_fork_3_philosopher_3_UP,
    SEMA_fork_3_philosopher_2_UP)
  begin
    if (conpro_system_clk'event) and ((conpro_system_clk) = ('1')) then
      if (conpro_system_reset) = ('1') then
        SEMA_fork_3_LEVEL <= "00000000";
        SEMA_fork_3_init_GD <= '1';
        SEMA_fork_3_init_QUEUED <= '0';
        SEMA_fork_3_init_PRIO <= "000";
        SEMA_fork_3_philosopher_1_GD <= '1';
        SEMA_fork_3_philosopher_1_QUEUED <= '0';
        SEMA_fork_3_philosopher_1_PRIO <= "000";
        SEMA_fork_3_philosopher_0_GD <= '1';
        SEMA_fork_3_philosopher_0_QUEUED <= '0';
        SEMA_fork_3_philosopher_0_PRIO <= "000";
        SEMA_fork_3_philosopher_4_GD <= '1';
        SEMA_fork_3_philosopher_4_QUEUED <= '0';
        SEMA_fork_3_philosopher_4_PRIO <= "000";
        SEMA_fork_3_philosopher_3_GD <= '1';
        SEMA_fork_3_philosopher_3_QUEUED <= '0';
        SEMA_fork_3_philosopher_3_PRIO <= "000";
        SEMA_fork_3_philosopher_2_GD <= '1';
        SEMA_fork_3_philosopher_2_QUEUED <= '0';
        SEMA_fork_3_philosopher_2_PRIO <= "000";
        SEMA_fork_3_HEAD <= "000";
        SEMA_fork_3_TAIL <= "000";
        SEMA_fork_3_OWNER <= "000";
      else
        SEMA_fork_3_init_GD <= '1';
        SEMA_fork_3_philosopher_1_GD <= '1';
        SEMA_fork_3_philosopher_0_GD <= '1';
        SEMA_fork_3_philosopher_4_GD <= '1';
        SEMA_fork_3_philosopher_3_GD <= '1';
        SEMA_fork_3_philosopher_2_GD <= '1';
        if (SEMA_fork_3_init_INIT) = ('1') then
          SEMA_fork_3_LEVEL <= SEMA_fork_3_init_WR;
          SEMA_fork_3_init_GD <= '0';
          SEMA_fork_3_init_QUEUED <= '0';
          SEMA_fork_3_init_PRIO <= "000";
          SEMA_fork_3_philosopher_1_QUEUED <= '0';
          SEMA_fork_3_philosopher_1_PRIO <= "000";
          SEMA_fork_3_philosopher_0_QUEUED <= '0';
          SEMA_fork_3_philosopher_0_PRIO <= "000";
          SEMA_fork_3_philosopher_4_QUEUED <= '0';
          SEMA_fork_3_philosopher_4_PRIO <= "000";
          SEMA_fork_3_philosopher_3_QUEUED <= '0';
          SEMA_fork_3_philosopher_3_PRIO <= "000";
          SEMA_fork_3_philosopher_2_QUEUED <= '0';
          SEMA_fork_3_philosopher_2_PRIO <= "000";
          SEMA_fork_3_HEAD <= "000";
          SEMA_fork_3_TAIL <= "000";
          SEMA_fork_3_OWNER <= "000";
        elsif ((SEMA_fork_3_philosopher_1_DOWN) = ('1')) and (not ((SEMA_fork_3_LEVEL) = ("00000000"))) then
          SEMA_fork_3_philosopher_1_GD <= '0';
          SEMA_fork_3_LEVEL <= (SEMA_fork_3_LEVEL) - (1);
          SEMA_fork_3_OWNER <= "101";
        elsif ((SEMA_fork_3_philosopher_0_DOWN) = ('1')) and (not ((SEMA_fork_3_LEVEL) = ("00000000"))) then
          SEMA_fork_3_philosopher_0_GD <= '0';
          SEMA_fork_3_LEVEL <= (SEMA_fork_3_LEVEL) - (1);
          SEMA_fork_3_OWNER <= "100";
        elsif ((SEMA_fork_3_philosopher_4_DOWN) = ('1')) and (not ((SEMA_fork_3_LEVEL) = ("00000000"))) then
          SEMA_fork_3_philosopher_4_GD <= '0';
          SEMA_fork_3_LEVEL <= (SEMA_fork_3_LEVEL) - (1);
          SEMA_fork_3_OWNER <= "011";
        elsif ((SEMA_fork_3_philosopher_3_DOWN) = ('1')) and (not ((SEMA_fork_3_LEVEL) = ("00000000"))) then
          SEMA_fork_3_philosopher_3_GD <= '0';
          SEMA_fork_3_LEVEL <= (SEMA_fork_3_LEVEL) - (1);
          SEMA_fork_3_OWNER <= "010";
        elsif ((SEMA_fork_3_philosopher_2_DOWN) = ('1')) and (not ((SEMA_fork_3_LEVEL) = ("00000000"))) then
          SEMA_fork_3_philosopher_2_GD <= '0';
          SEMA_fork_3_LEVEL <= (SEMA_fork_3_LEVEL) - (1);
          SEMA_fork_3_OWNER <= "001";
        elsif (((SEMA_fork_3_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_1_QUEUED) = ('0'))) and ((SEMA_fork_3_OWNER) /= ("101")) then
          SEMA_fork_3_philosopher_1_PRIO <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_HEAD <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_philosopher_1_QUEUED <= '1';
        elsif (((SEMA_fork_3_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_0_QUEUED) = ('0'))) and ((SEMA_fork_3_OWNER) /= ("100")) then
          SEMA_fork_3_philosopher_0_PRIO <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_HEAD <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_philosopher_0_QUEUED <= '1';
        elsif (((SEMA_fork_3_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_4_QUEUED) = ('0'))) and ((SEMA_fork_3_OWNER) /= ("011")) then
          SEMA_fork_3_philosopher_4_PRIO <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_HEAD <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_philosopher_4_QUEUED <= '1';
        elsif (((SEMA_fork_3_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_3_QUEUED) = ('0'))) and ((SEMA_fork_3_OWNER) /= ("010")) then
          SEMA_fork_3_philosopher_3_PRIO <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_HEAD <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_philosopher_3_QUEUED <= '1';
        elsif (((SEMA_fork_3_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_2_QUEUED) = ('0'))) and ((SEMA_fork_3_OWNER) /= ("001")) then
          SEMA_fork_3_philosopher_2_PRIO <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_HEAD <= (SEMA_fork_3_HEAD) + (1);
          SEMA_fork_3_philosopher_2_QUEUED <= '1';
        elsif (((SEMA_fork_3_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_1_QUEUED) = ('1'))) and ((SEMA_fork_3_philosopher_1_PRIO) = (SEMA_fork_3_TAIL)) then
          SEMA_fork_3_philosopher_1_GD <= '0';
          SEMA_fork_3_philosopher_1_QUEUED <= '0';
          SEMA_fork_3_OWNER <= "101";
        elsif (((SEMA_fork_3_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_0_QUEUED) = ('1'))) and ((SEMA_fork_3_philosopher_0_PRIO) = (SEMA_fork_3_TAIL)) then
          SEMA_fork_3_philosopher_0_GD <= '0';
          SEMA_fork_3_philosopher_0_QUEUED <= '0';
          SEMA_fork_3_OWNER <= "100";
        elsif (((SEMA_fork_3_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_4_QUEUED) = ('1'))) and ((SEMA_fork_3_philosopher_4_PRIO) = (SEMA_fork_3_TAIL)) then
          SEMA_fork_3_philosopher_4_GD <= '0';
          SEMA_fork_3_philosopher_4_QUEUED <= '0';
          SEMA_fork_3_OWNER <= "011";
        elsif (((SEMA_fork_3_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_3_QUEUED) = ('1'))) and ((SEMA_fork_3_philosopher_3_PRIO) = (SEMA_fork_3_TAIL)) then
          SEMA_fork_3_philosopher_3_GD <= '0';
          SEMA_fork_3_philosopher_3_QUEUED <= '0';
          SEMA_fork_3_OWNER <= "010";
        elsif (((SEMA_fork_3_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_3_philosopher_2_QUEUED) = ('1'))) and ((SEMA_fork_3_philosopher_2_PRIO) = (SEMA_fork_3_TAIL)) then
          SEMA_fork_3_philosopher_2_GD <= '0';
          SEMA_fork_3_philosopher_2_QUEUED <= '0';
          SEMA_fork_3_OWNER <= "001";
        elsif ((SEMA_fork_3_philosopher_1_UP) = ('1')) or ((SEMA_fork_3_philosopher_0_UP) = ('1')) or ((SEMA_fork_3_philosopher_4_UP) = ('1')) or ((SEMA_fork_3_philosopher_3_UP) = ('1')) or (SEMA_fork_3_philosopher_2_UP) = ('1') then
          if (SEMA_fork_3_philosopher_1_UP) = ('1') then
            SEMA_fork_3_philosopher_1_GD <= '0';
          elsif (SEMA_fork_3_philosopher_0_UP) = ('1') then
            SEMA_fork_3_philosopher_0_GD <= '0';
          elsif (SEMA_fork_3_philosopher_4_UP) = ('1') then
            SEMA_fork_3_philosopher_4_GD <= '0';
          elsif (SEMA_fork_3_philosopher_3_UP) = ('1') then
            SEMA_fork_3_philosopher_3_GD <= '0';
          elsif (SEMA_fork_3_philosopher_2_UP) = ('1') then
            SEMA_fork_3_philosopher_2_GD <= '0';
          end if;
          if (SEMA_fork_3_HEAD) = (SEMA_fork_3_TAIL) then
            SEMA_fork_3_OWNER <= "000";
            SEMA_fork_3_LEVEL <= (SEMA_fork_3_LEVEL) + (1);
          else
            SEMA_fork_3_TAIL <= (SEMA_fork_3_TAIL) + (1);
          end if;
        end if;
      end if;
    end if;
  end process SEMA_fork_3_SCHED;
  --
  -- End of <Object Semaphore.semaphore.fork_3>
  --
  
  --
  --  ConPro V2.1.D148 EMI Semaphore.semaphore V2.06
  --
  
  --
  -- EMI <Object Semaphore.semaphore.fork_4> Process
  --
  SEMA_fork_4_SCHED: process(conpro_system_clk,
    conpro_system_reset,
    SEMA_fork_4_init_INIT,
    SEMA_fork_4_init_WR,
    SEMA_fork_4_philosopher_2_DOWN,
    SEMA_fork_4_LEVEL,
    SEMA_fork_4_philosopher_1_DOWN,
    SEMA_fork_4_philosopher_0_DOWN,
    SEMA_fork_4_philosopher_4_DOWN,
    SEMA_fork_4_philosopher_3_DOWN,
    SEMA_fork_4_philosopher_2_QUEUED,
    SEMA_fork_4_OWNER,
    SEMA_fork_4_HEAD,
    SEMA_fork_4_philosopher_1_QUEUED,
    SEMA_fork_4_philosopher_0_QUEUED,
    SEMA_fork_4_philosopher_4_QUEUED,
    SEMA_fork_4_philosopher_3_QUEUED,
    SEMA_fork_4_philosopher_2_PRIO,
    SEMA_fork_4_TAIL,
    SEMA_fork_4_philosopher_1_PRIO,
    SEMA_fork_4_philosopher_0_PRIO,
    SEMA_fork_4_philosopher_4_PRIO,
    SEMA_fork_4_philosopher_3_PRIO,
    SEMA_fork_4_philosopher_2_UP,
    SEMA_fork_4_philosopher_1_UP,
    SEMA_fork_4_philosopher_0_UP,
    SEMA_fork_4_philosopher_4_UP,
    SEMA_fork_4_philosopher_3_UP)
  begin
    if (conpro_system_clk'event) and ((conpro_system_clk) = ('1')) then
      if (conpro_system_reset) = ('1') then
        SEMA_fork_4_LEVEL <= "00000000";
        SEMA_fork_4_init_GD <= '1';
        SEMA_fork_4_init_QUEUED <= '0';
        SEMA_fork_4_init_PRIO <= "000";
        SEMA_fork_4_philosopher_2_GD <= '1';
        SEMA_fork_4_philosopher_2_QUEUED <= '0';
        SEMA_fork_4_philosopher_2_PRIO <= "000";
        SEMA_fork_4_philosopher_1_GD <= '1';
        SEMA_fork_4_philosopher_1_QUEUED <= '0';
        SEMA_fork_4_philosopher_1_PRIO <= "000";
        SEMA_fork_4_philosopher_0_GD <= '1';
        SEMA_fork_4_philosopher_0_QUEUED <= '0';
        SEMA_fork_4_philosopher_0_PRIO <= "000";
        SEMA_fork_4_philosopher_4_GD <= '1';
        SEMA_fork_4_philosopher_4_QUEUED <= '0';
        SEMA_fork_4_philosopher_4_PRIO <= "000";
        SEMA_fork_4_philosopher_3_GD <= '1';
        SEMA_fork_4_philosopher_3_QUEUED <= '0';
        SEMA_fork_4_philosopher_3_PRIO <= "000";
        SEMA_fork_4_HEAD <= "000";
        SEMA_fork_4_TAIL <= "000";
        SEMA_fork_4_OWNER <= "000";
      else
        SEMA_fork_4_init_GD <= '1';
        SEMA_fork_4_philosopher_2_GD <= '1';
        SEMA_fork_4_philosopher_1_GD <= '1';
        SEMA_fork_4_philosopher_0_GD <= '1';
        SEMA_fork_4_philosopher_4_GD <= '1';
        SEMA_fork_4_philosopher_3_GD <= '1';
        if (SEMA_fork_4_init_INIT) = ('1') then
          SEMA_fork_4_LEVEL <= SEMA_fork_4_init_WR;
          SEMA_fork_4_init_GD <= '0';
          SEMA_fork_4_init_QUEUED <= '0';
          SEMA_fork_4_init_PRIO <= "000";
          SEMA_fork_4_philosopher_2_QUEUED <= '0';
          SEMA_fork_4_philosopher_2_PRIO <= "000";
          SEMA_fork_4_philosopher_1_QUEUED <= '0';
          SEMA_fork_4_philosopher_1_PRIO <= "000";
          SEMA_fork_4_philosopher_0_QUEUED <= '0';
          SEMA_fork_4_philosopher_0_PRIO <= "000";
          SEMA_fork_4_philosopher_4_QUEUED <= '0';
          SEMA_fork_4_philosopher_4_PRIO <= "000";
          SEMA_fork_4_philosopher_3_QUEUED <= '0';
          SEMA_fork_4_philosopher_3_PRIO <= "000";
          SEMA_fork_4_HEAD <= "000";
          SEMA_fork_4_TAIL <= "000";
          SEMA_fork_4_OWNER <= "000";
        elsif ((SEMA_fork_4_philosopher_2_DOWN) = ('1')) and (not ((SEMA_fork_4_LEVEL) = ("00000000"))) then
          SEMA_fork_4_philosopher_2_GD <= '0';
          SEMA_fork_4_LEVEL <= (SEMA_fork_4_LEVEL) - (1);
          SEMA_fork_4_OWNER <= "101";
        elsif ((SEMA_fork_4_philosopher_1_DOWN) = ('1')) and (not ((SEMA_fork_4_LEVEL) = ("00000000"))) then
          SEMA_fork_4_philosopher_1_GD <= '0';
          SEMA_fork_4_LEVEL <= (SEMA_fork_4_LEVEL) - (1);
          SEMA_fork_4_OWNER <= "100";
        elsif ((SEMA_fork_4_philosopher_0_DOWN) = ('1')) and (not ((SEMA_fork_4_LEVEL) = ("00000000"))) then
          SEMA_fork_4_philosopher_0_GD <= '0';
          SEMA_fork_4_LEVEL <= (SEMA_fork_4_LEVEL) - (1);
          SEMA_fork_4_OWNER <= "011";
        elsif ((SEMA_fork_4_philosopher_4_DOWN) = ('1')) and (not ((SEMA_fork_4_LEVEL) = ("00000000"))) then
          SEMA_fork_4_philosopher_4_GD <= '0';
          SEMA_fork_4_LEVEL <= (SEMA_fork_4_LEVEL) - (1);
          SEMA_fork_4_OWNER <= "010";
        elsif ((SEMA_fork_4_philosopher_3_DOWN) = ('1')) and (not ((SEMA_fork_4_LEVEL) = ("00000000"))) then
          SEMA_fork_4_philosopher_3_GD <= '0';
          SEMA_fork_4_LEVEL <= (SEMA_fork_4_LEVEL) - (1);
          SEMA_fork_4_OWNER <= "001";
        elsif (((SEMA_fork_4_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_2_QUEUED) = ('0'))) and ((SEMA_fork_4_OWNER) /= ("101")) then
          SEMA_fork_4_philosopher_2_PRIO <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_HEAD <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_philosopher_2_QUEUED <= '1';
        elsif (((SEMA_fork_4_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_1_QUEUED) = ('0'))) and ((SEMA_fork_4_OWNER) /= ("100")) then
          SEMA_fork_4_philosopher_1_PRIO <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_HEAD <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_philosopher_1_QUEUED <= '1';
        elsif (((SEMA_fork_4_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_0_QUEUED) = ('0'))) and ((SEMA_fork_4_OWNER) /= ("011")) then
          SEMA_fork_4_philosopher_0_PRIO <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_HEAD <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_philosopher_0_QUEUED <= '1';
        elsif (((SEMA_fork_4_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_4_QUEUED) = ('0'))) and ((SEMA_fork_4_OWNER) /= ("010")) then
          SEMA_fork_4_philosopher_4_PRIO <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_HEAD <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_philosopher_4_QUEUED <= '1';
        elsif (((SEMA_fork_4_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_3_QUEUED) = ('0'))) and ((SEMA_fork_4_OWNER) /= ("001")) then
          SEMA_fork_4_philosopher_3_PRIO <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_HEAD <= (SEMA_fork_4_HEAD) + (1);
          SEMA_fork_4_philosopher_3_QUEUED <= '1';
        elsif (((SEMA_fork_4_philosopher_2_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_2_QUEUED) = ('1'))) and ((SEMA_fork_4_philosopher_2_PRIO) = (SEMA_fork_4_TAIL)) then
          SEMA_fork_4_philosopher_2_GD <= '0';
          SEMA_fork_4_philosopher_2_QUEUED <= '0';
          SEMA_fork_4_OWNER <= "101";
        elsif (((SEMA_fork_4_philosopher_1_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_1_QUEUED) = ('1'))) and ((SEMA_fork_4_philosopher_1_PRIO) = (SEMA_fork_4_TAIL)) then
          SEMA_fork_4_philosopher_1_GD <= '0';
          SEMA_fork_4_philosopher_1_QUEUED <= '0';
          SEMA_fork_4_OWNER <= "100";
        elsif (((SEMA_fork_4_philosopher_0_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_0_QUEUED) = ('1'))) and ((SEMA_fork_4_philosopher_0_PRIO) = (SEMA_fork_4_TAIL)) then
          SEMA_fork_4_philosopher_0_GD <= '0';
          SEMA_fork_4_philosopher_0_QUEUED <= '0';
          SEMA_fork_4_OWNER <= "011";
        elsif (((SEMA_fork_4_philosopher_4_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_4_QUEUED) = ('1'))) and ((SEMA_fork_4_philosopher_4_PRIO) = (SEMA_fork_4_TAIL)) then
          SEMA_fork_4_philosopher_4_GD <= '0';
          SEMA_fork_4_philosopher_4_QUEUED <= '0';
          SEMA_fork_4_OWNER <= "010";
        elsif (((SEMA_fork_4_philosopher_3_DOWN) = ('1')) and ((SEMA_fork_4_philosopher_3_QUEUED) = ('1'))) and ((SEMA_fork_4_philosopher_3_PRIO) = (SEMA_fork_4_TAIL)) then
          SEMA_fork_4_philosopher_3_GD <= '0';
          SEMA_fork_4_philosopher_3_QUEUED <= '0';
          SEMA_fork_4_OWNER <= "001";
        elsif ((SEMA_fork_4_philosopher_2_UP) = ('1')) or ((SEMA_fork_4_philosopher_1_UP) = ('1')) or ((SEMA_fork_4_philosopher_0_UP) = ('1')) or ((SEMA_fork_4_philosopher_4_UP) = ('1')) or (SEMA_fork_4_philosopher_3_UP) = ('1') then
          if (SEMA_fork_4_philosopher_2_UP) = ('1') then
            SEMA_fork_4_philosopher_2_GD <= '0';
          elsif (SEMA_fork_4_philosopher_1_UP) = ('1') then
            SEMA_fork_4_philosopher_1_GD <= '0';
          elsif (SEMA_fork_4_philosopher_0_UP) = ('1') then
            SEMA_fork_4_philosopher_0_GD <= '0';
          elsif (SEMA_fork_4_philosopher_4_UP) = ('1') then
            SEMA_fork_4_philosopher_4_GD <= '0';
          elsif (SEMA_fork_4_philosopher_3_UP) = ('1') then
            SEMA_fork_4_philosopher_3_GD <= '0';
          end if;
          if (SEMA_fork_4_HEAD) = (SEMA_fork_4_TAIL) then
            SEMA_fork_4_OWNER <= "000";
            SEMA_fork_4_LEVEL <= (SEMA_fork_4_LEVEL) + (1);
          else
            SEMA_fork_4_TAIL <= (SEMA_fork_4_TAIL) + (1);
          end if;
        end if;
      end if;
    end if;
  end process SEMA_fork_4_SCHED;
  --
  -- End of <Object Semaphore.semaphore.fork_4>
  --
  
  -- Register
  IMPL_REG_eating_0: process(
          REG_eating_0_philosopher_0_WR,
          REG_eating_0_philosopher_0_WE,
          REG_eating_0,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_eating_0 <= '0';
     elsif REG_eating_0_philosopher_0_WE='1' then
      REG_eating_0 <= REG_eating_0_philosopher_0_WR;
     end if;
    end if;
  end process IMPL_REG_eating_0;
  
  -- Register
  IMPL_REG_eating_1: process(
          REG_eating_1_philosopher_1_WR,
          REG_eating_1_philosopher_1_WE,
          REG_eating_1,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_eating_1 <= '0';
     elsif REG_eating_1_philosopher_1_WE='1' then
      REG_eating_1 <= REG_eating_1_philosopher_1_WR;
     end if;
    end if;
  end process IMPL_REG_eating_1;
  
  -- Register
  IMPL_REG_eating_2: process(
          REG_eating_2_philosopher_2_WR,
          REG_eating_2_philosopher_2_WE,
          REG_eating_2,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_eating_2 <= '0';
     elsif REG_eating_2_philosopher_2_WE='1' then
      REG_eating_2 <= REG_eating_2_philosopher_2_WR;
     end if;
    end if;
  end process IMPL_REG_eating_2;
  
  -- Register
  IMPL_REG_eating_3: process(
          REG_eating_3_philosopher_3_WR,
          REG_eating_3_philosopher_3_WE,
          REG_eating_3,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_eating_3 <= '0';
     elsif REG_eating_3_philosopher_3_WE='1' then
      REG_eating_3 <= REG_eating_3_philosopher_3_WR;
     end if;
    end if;
  end process IMPL_REG_eating_3;
  
  -- Register
  IMPL_REG_eating_4: process(
          REG_eating_4_philosopher_4_WR,
          REG_eating_4_philosopher_4_WE,
          REG_eating_4,
          conpro_system_clk,
          conpro_system_reset
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
     if conpro_system_reset='1' then
      REG_eating_4 <= '0';
     elsif REG_eating_4_philosopher_4_WE='1' then
      REG_eating_4 <= REG_eating_4_philosopher_4_WR;
     end if;
    end if;
  end process IMPL_REG_eating_4;
  
  
  -- Process instantiations
  PRO_MAP_init: dining_init port map(
    EVENT_ev_INIT => EVENT_ev_init_INIT,
    EVENT_ev_GD => EVENT_ev_init_GD,
    SEMA_fork_INIT => SEMA_fork_init_INIT,
    SEMA_fork_WR => SEMA_fork_init_WR,
    SEMA_fork_GD => SEMA_fork_init_GD,
    SEMA_fork_SEL => SEMA_fork_init_SEL,
    PRO_init_ENABLE => PRO_init_ENABLE,
    PRO_init_END => PRO_init_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_philosopher_0: dining_philosopher_0 port map(
    EVENT_ev_AWAIT => EVENT_ev_philosopher_0_AWAIT,
    EVENT_ev_GD => EVENT_ev_philosopher_0_GD,
    REG_thinking_0_WR => REG_thinking_0_philosopher_0_WR,
    REG_thinking_0_WE => REG_thinking_0_philosopher_0_WE,
    SEMA_fork_DOWN => SEMA_fork_philosopher_0_DOWN,
    SEMA_fork_UP => SEMA_fork_philosopher_0_UP,
    SEMA_fork_GD => SEMA_fork_philosopher_0_GD,
    SEMA_fork_SEL => SEMA_fork_philosopher_0_SEL,
    REG_eating_0_WR => REG_eating_0_philosopher_0_WR,
    REG_eating_0_WE => REG_eating_0_philosopher_0_WE,
    PRO_philosopher_0_ENABLE => PRO_philosopher_0_ENABLE,
    PRO_philosopher_0_END => PRO_philosopher_0_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_philosopher_1: dining_philosopher_1 port map(
    EVENT_ev_AWAIT => EVENT_ev_philosopher_1_AWAIT,
    EVENT_ev_GD => EVENT_ev_philosopher_1_GD,
    REG_thinking_1_WR => REG_thinking_1_philosopher_1_WR,
    REG_thinking_1_WE => REG_thinking_1_philosopher_1_WE,
    SEMA_fork_DOWN => SEMA_fork_philosopher_1_DOWN,
    SEMA_fork_UP => SEMA_fork_philosopher_1_UP,
    SEMA_fork_GD => SEMA_fork_philosopher_1_GD,
    SEMA_fork_SEL => SEMA_fork_philosopher_1_SEL,
    REG_eating_1_WR => REG_eating_1_philosopher_1_WR,
    REG_eating_1_WE => REG_eating_1_philosopher_1_WE,
    PRO_philosopher_1_ENABLE => PRO_philosopher_1_ENABLE,
    PRO_philosopher_1_END => PRO_philosopher_1_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_philosopher_2: dining_philosopher_2 port map(
    EVENT_ev_AWAIT => EVENT_ev_philosopher_2_AWAIT,
    EVENT_ev_GD => EVENT_ev_philosopher_2_GD,
    REG_thinking_2_WR => REG_thinking_2_philosopher_2_WR,
    REG_thinking_2_WE => REG_thinking_2_philosopher_2_WE,
    SEMA_fork_DOWN => SEMA_fork_philosopher_2_DOWN,
    SEMA_fork_UP => SEMA_fork_philosopher_2_UP,
    SEMA_fork_GD => SEMA_fork_philosopher_2_GD,
    SEMA_fork_SEL => SEMA_fork_philosopher_2_SEL,
    REG_eating_2_WR => REG_eating_2_philosopher_2_WR,
    REG_eating_2_WE => REG_eating_2_philosopher_2_WE,
    PRO_philosopher_2_ENABLE => PRO_philosopher_2_ENABLE,
    PRO_philosopher_2_END => PRO_philosopher_2_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_philosopher_3: dining_philosopher_3 port map(
    EVENT_ev_AWAIT => EVENT_ev_philosopher_3_AWAIT,
    EVENT_ev_GD => EVENT_ev_philosopher_3_GD,
    REG_thinking_3_WR => REG_thinking_3_philosopher_3_WR,
    REG_thinking_3_WE => REG_thinking_3_philosopher_3_WE,
    SEMA_fork_DOWN => SEMA_fork_philosopher_3_DOWN,
    SEMA_fork_UP => SEMA_fork_philosopher_3_UP,
    SEMA_fork_GD => SEMA_fork_philosopher_3_GD,
    SEMA_fork_SEL => SEMA_fork_philosopher_3_SEL,
    REG_eating_3_WR => REG_eating_3_philosopher_3_WR,
    REG_eating_3_WE => REG_eating_3_philosopher_3_WE,
    PRO_philosopher_3_ENABLE => PRO_philosopher_3_ENABLE,
    PRO_philosopher_3_END => PRO_philosopher_3_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_philosopher_4: dining_philosopher_4 port map(
    REG_thinking_4_WR => REG_thinking_4_philosopher_4_WR,
    REG_thinking_4_WE => REG_thinking_4_philosopher_4_WE,
    SEMA_fork_DOWN => SEMA_fork_philosopher_4_DOWN,
    SEMA_fork_UP => SEMA_fork_philosopher_4_UP,
    SEMA_fork_GD => SEMA_fork_philosopher_4_GD,
    SEMA_fork_SEL => SEMA_fork_philosopher_4_SEL,
    REG_eating_4_WR => REG_eating_4_philosopher_4_WR,
    REG_eating_4_WE => REG_eating_4_philosopher_4_WE,
    PRO_philosopher_4_ENABLE => PRO_philosopher_4_ENABLE,
    PRO_philosopher_4_END => PRO_philosopher_4_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  PRO_MAP_main: dining_main port map(
    PRO_init_CALL => PRO_init_main_CALL,
    PRO_init_GD => PRO_init_main_GD,
    PRO_philosopher_START => PRO_philosopher_main_START,
    PRO_philosopher_GD => PRO_philosopher_main_GD,
    PRO_philosopher_SEL => PRO_philosopher_main_SEL,
    REG_stat_WR => REG_stat_main_WR,
    REG_stat_WE => REG_stat_main_WE,
    EVENT_ev_WAKEUP => EVENT_ev_main_WAKEUP,
    EVENT_ev_GD => EVENT_ev_main_GD,
    PRO_main_ENABLE => PRO_main_ENABLE,
    PRO_main_END => PRO_main_END,
    conpro_system_clk => conpro_system_clk,
    conpro_system_reset => conpro_system_reset
  );
  
  -- Toplevel assignments
  -- Monitors
  stat_RD <= REG_stat;
  thinking_0_RD <= REG_thinking_0;
  thinking_1_RD <= REG_thinking_1;
  thinking_2_RD <= REG_thinking_2;
  thinking_3_RD <= REG_thinking_3;
  thinking_4_RD <= REG_thinking_4;
  eating_0_RD <= REG_eating_0;
  eating_1_RD <= REG_eating_1;
  eating_2_RD <= REG_eating_2;
  eating_3_RD <= REG_eating_3;
  eating_4_RD <= REG_eating_4;
  SEMA_fork_0_philosopher_3_DOWN <= SEMA_fork_philosopher_3_DOWN when SEMA_fork_philosopher_3_SEL = 0 else '0';
  SEMA_fork_1_philosopher_3_DOWN <= SEMA_fork_philosopher_3_DOWN when SEMA_fork_philosopher_3_SEL = 1 else '0';
  SEMA_fork_2_philosopher_3_DOWN <= SEMA_fork_philosopher_3_DOWN when SEMA_fork_philosopher_3_SEL = 2 else '0';
  SEMA_fork_3_philosopher_3_DOWN <= SEMA_fork_philosopher_3_DOWN when SEMA_fork_philosopher_3_SEL = 3 else '0';
  SEMA_fork_4_philosopher_3_DOWN <= SEMA_fork_philosopher_3_DOWN when SEMA_fork_philosopher_3_SEL = 4 else '0';
  SEMA_fork_0_philosopher_2_DOWN <= SEMA_fork_philosopher_2_DOWN when SEMA_fork_philosopher_2_SEL = 0 else '0';
  SEMA_fork_1_philosopher_2_DOWN <= SEMA_fork_philosopher_2_DOWN when SEMA_fork_philosopher_2_SEL = 1 else '0';
  SEMA_fork_2_philosopher_2_DOWN <= SEMA_fork_philosopher_2_DOWN when SEMA_fork_philosopher_2_SEL = 2 else '0';
  SEMA_fork_3_philosopher_2_DOWN <= SEMA_fork_philosopher_2_DOWN when SEMA_fork_philosopher_2_SEL = 3 else '0';
  SEMA_fork_4_philosopher_2_DOWN <= SEMA_fork_philosopher_2_DOWN when SEMA_fork_philosopher_2_SEL = 4 else '0';
  SEMA_fork_0_philosopher_1_DOWN <= SEMA_fork_philosopher_1_DOWN when SEMA_fork_philosopher_1_SEL = 0 else '0';
  SEMA_fork_1_philosopher_1_DOWN <= SEMA_fork_philosopher_1_DOWN when SEMA_fork_philosopher_1_SEL = 1 else '0';
  SEMA_fork_2_philosopher_1_DOWN <= SEMA_fork_philosopher_1_DOWN when SEMA_fork_philosopher_1_SEL = 2 else '0';
  SEMA_fork_3_philosopher_1_DOWN <= SEMA_fork_philosopher_1_DOWN when SEMA_fork_philosopher_1_SEL = 3 else '0';
  SEMA_fork_4_philosopher_1_DOWN <= SEMA_fork_philosopher_1_DOWN when SEMA_fork_philosopher_1_SEL = 4 else '0';
  SEMA_fork_0_philosopher_4_DOWN <= SEMA_fork_philosopher_4_DOWN when SEMA_fork_philosopher_4_SEL = 0 else '0';
  SEMA_fork_1_philosopher_4_DOWN <= SEMA_fork_philosopher_4_DOWN when SEMA_fork_philosopher_4_SEL = 1 else '0';
  SEMA_fork_2_philosopher_4_DOWN <= SEMA_fork_philosopher_4_DOWN when SEMA_fork_philosopher_4_SEL = 2 else '0';
  SEMA_fork_3_philosopher_4_DOWN <= SEMA_fork_philosopher_4_DOWN when SEMA_fork_philosopher_4_SEL = 3 else '0';
  SEMA_fork_4_philosopher_4_DOWN <= SEMA_fork_philosopher_4_DOWN when SEMA_fork_philosopher_4_SEL = 4 else '0';
  SEMA_fork_0_philosopher_0_DOWN <= SEMA_fork_philosopher_0_DOWN when SEMA_fork_philosopher_0_SEL = 0 else '0';
  SEMA_fork_1_philosopher_0_DOWN <= SEMA_fork_philosopher_0_DOWN when SEMA_fork_philosopher_0_SEL = 1 else '0';
  SEMA_fork_2_philosopher_0_DOWN <= SEMA_fork_philosopher_0_DOWN when SEMA_fork_philosopher_0_SEL = 2 else '0';
  SEMA_fork_3_philosopher_0_DOWN <= SEMA_fork_philosopher_0_DOWN when SEMA_fork_philosopher_0_SEL = 3 else '0';
  SEMA_fork_4_philosopher_0_DOWN <= SEMA_fork_philosopher_0_DOWN when SEMA_fork_philosopher_0_SEL = 4 else '0';
  SEMA_fork_0_philosopher_3_UP <= SEMA_fork_philosopher_3_UP when SEMA_fork_philosopher_3_SEL = 0 else '0';
  SEMA_fork_1_philosopher_3_UP <= SEMA_fork_philosopher_3_UP when SEMA_fork_philosopher_3_SEL = 1 else '0';
  SEMA_fork_2_philosopher_3_UP <= SEMA_fork_philosopher_3_UP when SEMA_fork_philosopher_3_SEL = 2 else '0';
  SEMA_fork_3_philosopher_3_UP <= SEMA_fork_philosopher_3_UP when SEMA_fork_philosopher_3_SEL = 3 else '0';
  SEMA_fork_4_philosopher_3_UP <= SEMA_fork_philosopher_3_UP when SEMA_fork_philosopher_3_SEL = 4 else '0';
  SEMA_fork_0_philosopher_2_UP <= SEMA_fork_philosopher_2_UP when SEMA_fork_philosopher_2_SEL = 0 else '0';
  SEMA_fork_1_philosopher_2_UP <= SEMA_fork_philosopher_2_UP when SEMA_fork_philosopher_2_SEL = 1 else '0';
  SEMA_fork_2_philosopher_2_UP <= SEMA_fork_philosopher_2_UP when SEMA_fork_philosopher_2_SEL = 2 else '0';
  SEMA_fork_3_philosopher_2_UP <= SEMA_fork_philosopher_2_UP when SEMA_fork_philosopher_2_SEL = 3 else '0';
  SEMA_fork_4_philosopher_2_UP <= SEMA_fork_philosopher_2_UP when SEMA_fork_philosopher_2_SEL = 4 else '0';
  SEMA_fork_0_philosopher_1_UP <= SEMA_fork_philosopher_1_UP when SEMA_fork_philosopher_1_SEL = 0 else '0';
  SEMA_fork_1_philosopher_1_UP <= SEMA_fork_philosopher_1_UP when SEMA_fork_philosopher_1_SEL = 1 else '0';
  SEMA_fork_2_philosopher_1_UP <= SEMA_fork_philosopher_1_UP when SEMA_fork_philosopher_1_SEL = 2 else '0';
  SEMA_fork_3_philosopher_1_UP <= SEMA_fork_philosopher_1_UP when SEMA_fork_philosopher_1_SEL = 3 else '0';
  SEMA_fork_4_philosopher_1_UP <= SEMA_fork_philosopher_1_UP when SEMA_fork_philosopher_1_SEL = 4 else '0';
  SEMA_fork_0_philosopher_4_UP <= SEMA_fork_philosopher_4_UP when SEMA_fork_philosopher_4_SEL = 0 else '0';
  SEMA_fork_1_philosopher_4_UP <= SEMA_fork_philosopher_4_UP when SEMA_fork_philosopher_4_SEL = 1 else '0';
  SEMA_fork_2_philosopher_4_UP <= SEMA_fork_philosopher_4_UP when SEMA_fork_philosopher_4_SEL = 2 else '0';
  SEMA_fork_3_philosopher_4_UP <= SEMA_fork_philosopher_4_UP when SEMA_fork_philosopher_4_SEL = 3 else '0';
  SEMA_fork_4_philosopher_4_UP <= SEMA_fork_philosopher_4_UP when SEMA_fork_philosopher_4_SEL = 4 else '0';
  SEMA_fork_0_philosopher_0_UP <= SEMA_fork_philosopher_0_UP when SEMA_fork_philosopher_0_SEL = 0 else '0';
  SEMA_fork_1_philosopher_0_UP <= SEMA_fork_philosopher_0_UP when SEMA_fork_philosopher_0_SEL = 1 else '0';
  SEMA_fork_2_philosopher_0_UP <= SEMA_fork_philosopher_0_UP when SEMA_fork_philosopher_0_SEL = 2 else '0';
  SEMA_fork_3_philosopher_0_UP <= SEMA_fork_philosopher_0_UP when SEMA_fork_philosopher_0_SEL = 3 else '0';
  SEMA_fork_4_philosopher_0_UP <= SEMA_fork_philosopher_0_UP when SEMA_fork_philosopher_0_SEL = 4 else '0';
  SEMA_fork_0_init_INIT <= SEMA_fork_init_INIT when SEMA_fork_init_SEL = 0 else '0';
  SEMA_fork_1_init_INIT <= SEMA_fork_init_INIT when SEMA_fork_init_SEL = 1 else '0';
  SEMA_fork_2_init_INIT <= SEMA_fork_init_INIT when SEMA_fork_init_SEL = 2 else '0';
  SEMA_fork_3_init_INIT <= SEMA_fork_init_INIT when SEMA_fork_init_SEL = 3 else '0';
  SEMA_fork_4_init_INIT <= SEMA_fork_init_INIT when SEMA_fork_init_SEL = 4 else '0';
  SEMA_fork_0_init_WR <= SEMA_fork_init_WR when SEMA_fork_init_SEL = 0 else "00000000";
  SEMA_fork_1_init_WR <= SEMA_fork_init_WR when SEMA_fork_init_SEL = 1 else "00000000";
  SEMA_fork_2_init_WR <= SEMA_fork_init_WR when SEMA_fork_init_SEL = 2 else "00000000";
  SEMA_fork_3_init_WR <= SEMA_fork_init_WR when SEMA_fork_init_SEL = 3 else "00000000";
  SEMA_fork_4_init_WR <= SEMA_fork_init_WR when SEMA_fork_init_SEL = 4 else "00000000";
  SEMA_fork_init_GD <= 
    SEMA_fork_0_init_GD when SEMA_fork_init_SEL = 0 else
    SEMA_fork_1_init_GD when SEMA_fork_init_SEL = 1 else
    SEMA_fork_2_init_GD when SEMA_fork_init_SEL = 2 else
    SEMA_fork_3_init_GD when SEMA_fork_init_SEL = 3 else
    SEMA_fork_4_init_GD when SEMA_fork_init_SEL = 4 else
    '0';
  SEMA_fork_philosopher_3_GD <= 
    SEMA_fork_0_philosopher_3_GD when SEMA_fork_philosopher_3_SEL = 0 else
    SEMA_fork_1_philosopher_3_GD when SEMA_fork_philosopher_3_SEL = 1 else
    SEMA_fork_2_philosopher_3_GD when SEMA_fork_philosopher_3_SEL = 2 else
    SEMA_fork_3_philosopher_3_GD when SEMA_fork_philosopher_3_SEL = 3 else
    SEMA_fork_4_philosopher_3_GD when SEMA_fork_philosopher_3_SEL = 4 else
    '0';
  SEMA_fork_philosopher_2_GD <= 
    SEMA_fork_0_philosopher_2_GD when SEMA_fork_philosopher_2_SEL = 0 else
    SEMA_fork_1_philosopher_2_GD when SEMA_fork_philosopher_2_SEL = 1 else
    SEMA_fork_2_philosopher_2_GD when SEMA_fork_philosopher_2_SEL = 2 else
    SEMA_fork_3_philosopher_2_GD when SEMA_fork_philosopher_2_SEL = 3 else
    SEMA_fork_4_philosopher_2_GD when SEMA_fork_philosopher_2_SEL = 4 else
    '0';
  SEMA_fork_philosopher_1_GD <= 
    SEMA_fork_0_philosopher_1_GD when SEMA_fork_philosopher_1_SEL = 0 else
    SEMA_fork_1_philosopher_1_GD when SEMA_fork_philosopher_1_SEL = 1 else
    SEMA_fork_2_philosopher_1_GD when SEMA_fork_philosopher_1_SEL = 2 else
    SEMA_fork_3_philosopher_1_GD when SEMA_fork_philosopher_1_SEL = 3 else
    SEMA_fork_4_philosopher_1_GD when SEMA_fork_philosopher_1_SEL = 4 else
    '0';
  SEMA_fork_philosopher_4_GD <= 
    SEMA_fork_0_philosopher_4_GD when SEMA_fork_philosopher_4_SEL = 0 else
    SEMA_fork_1_philosopher_4_GD when SEMA_fork_philosopher_4_SEL = 1 else
    SEMA_fork_2_philosopher_4_GD when SEMA_fork_philosopher_4_SEL = 2 else
    SEMA_fork_3_philosopher_4_GD when SEMA_fork_philosopher_4_SEL = 3 else
    SEMA_fork_4_philosopher_4_GD when SEMA_fork_philosopher_4_SEL = 4 else
    '0';
  SEMA_fork_philosopher_0_GD <= 
    SEMA_fork_0_philosopher_0_GD when SEMA_fork_philosopher_0_SEL = 0 else
    SEMA_fork_1_philosopher_0_GD when SEMA_fork_philosopher_0_SEL = 1 else
    SEMA_fork_2_philosopher_0_GD when SEMA_fork_philosopher_0_SEL = 2 else
    SEMA_fork_3_philosopher_0_GD when SEMA_fork_philosopher_0_SEL = 3 else
    SEMA_fork_4_philosopher_0_GD when SEMA_fork_philosopher_0_SEL = 4 else
    '0';
  conpro_system_clk <= CLK;
  conpro_system_reset <= RESET;
end main;
