--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D90 Genetic size: 2230944
--         Compile date: Fri Jul 17 13:28:54 CEST 2009
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <p1> from module <Exc>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity exc_p1 is
port(
  -- Connections to external objects, components and the outside world
  signal REG_PRO_p1_EXCEPTION_RD: in signed(7 downto 0);
  signal REG_PRO_p1_EXCEPTION_WR: out signed(7 downto 0);
  signal REG_PRO_p1_EXCEPTION_WE: out std_logic;
  signal REG_jg_WR: out signed(7 downto 0);
  signal REG_jg_WE: out std_logic;
  signal REG_jg_GD: in std_logic;
  signal PRO_p1_ENABLE: in std_logic;
  signal PRO_p1_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end exc_p1;
architecture main of exc_p1 is
  -- Local and temporary data objects
  signal j: signed(7 downto 0);
  signal LOOP_i_0: signed(4 downto 0);
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_p1_start, -- PROCESS0[:0]
    S_i6_assign, -- ASSIGN39314[exc.cp:14]
    S_i7_for_loop, -- COUNT_LOOP2877[exc.cp:15]
    S_i7_for_loop_cond, -- COUNT_LOOP2877[exc.cp:15]
    S_i8_assign, -- ASSIGN85449[exc.cp:17]
    S_i9_branch, -- BRANCH23890[exc.cp:18]
    S_i10_raise, -- BRANCH_TRUE7669[:0]
    S_i7_for_loop_incr, -- COUNT_LOOP2877[exc.cp:15]
    S_i12_assign, -- ASSIGN71138[exc.cp:21]
    S_i2_select, -- CASE_LIST16603[exc.cp:25]
    S_i3_assign, -- ASSIGN37171[exc.cp:25]
    S_i4_assign, -- CASE_BODY48484[exc.cp:25]
    S_i5_raise, -- BLOCK88513[exc.cp:25]
    S_p1_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_p1_start;
  signal pro_state_next: pro_states := S_p1_start;
  -- Auxilliary toplevel definitions
  constant CONST_I8_0: signed(7 downto 0) := "00000000";
  constant CONST_I5_1: signed(4 downto 0) := "00001";
  constant CONST_I5_10: signed(4 downto 0) := "01010";
  constant CONST_I8_2: signed(7 downto 0) := "00000010";
  constant CONST_I8_4: signed(7 downto 0) := "00000100";
  constant CONST_I8_1: signed(7 downto 0) := "00000001";
  constant CONST_I8_18: signed(7 downto 0) := "00010010";
  constant CONST_I8_19: signed(7 downto 0) := "00010011";
  -- ConPro VHDL Library
  function cp_mult(A,B: SIGNED) return SIGNED is
    variable BA: SIGNED((A'length+B'length-1) downto 0);
    variable BA_n: SIGNED((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := resize(BA,A'length);
      return (BA_n);
    end;
  function cp_mult(A,B: STD_LOGIC_VECTOR) return STD_LOGIC_VECTOR is
    variable BA: STD_LOGIC_VECTOR((A'length+B'length-1) downto 0);
    variable BA_n: STD_LOGIC_VECTOR((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := BA((A'length-1) downto 0);
      return (BA_n);
    end;
begin
  state_transition: process(
          PRO_p1_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_p1_ENABLE='0' then
        pro_state <= S_p1_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          LOOP_i_0,
          j,
          REG_jg_GD,
          REG_PRO_p1_EXCEPTION_RD,
          pro_state
          )
  begin
    PRO_p1_END <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        pro_state_next <= S_i6_assign;
      when S_i6_assign => -- ASSIGN39314[exc.cp:14]
        pro_state_next <= S_i7_for_loop;
      when S_i7_for_loop => -- COUNT_LOOP2877[exc.cp:15]
        pro_state_next <= S_i7_for_loop_cond;
      when S_i7_for_loop_cond => -- COUNT_LOOP2877[exc.cp:15]
        if CONST_I5_10 >= LOOP_i_0 then
          pro_state_next <= S_i8_assign;
        else
          pro_state_next <= S_i12_assign;
        end if;
      when S_i8_assign => -- ASSIGN85449[exc.cp:17]
        pro_state_next <= S_i9_branch;
      when S_i9_branch => -- BRANCH23890[exc.cp:18]
        if j = CONST_I8_4 then
          pro_state_next <= S_i10_raise;
        else
          pro_state_next <= S_i7_for_loop_incr;
        end if;
      when S_i10_raise => -- BRANCH_TRUE7669[:0]
        pro_state_next <= S_i2_select;
      when S_i7_for_loop_incr => -- COUNT_LOOP2877[exc.cp:15]
        pro_state_next <= S_i7_for_loop_cond;
      when S_i12_assign => -- ASSIGN71138[exc.cp:21]
        if REG_jg_GD = '1' then
          pro_state_next <= S_i12_assign;
        else
          pro_state_next <= S_p1_end;
        end if;
      when S_i2_select => -- CASE_LIST16603[exc.cp:25]
        case REG_PRO_p1_EXCEPTION_RD  is
          when  CONST_I8_1 => pro_state_next <= S_i3_assign;
          when  others => pro_state_next <= S_i5_raise;
        end case;
      when S_i3_assign => -- ASSIGN37171[exc.cp:25]
        if REG_jg_GD = '1' then
          pro_state_next <= S_i3_assign;
        else
          pro_state_next <= S_i4_assign;
        end if;
      when S_i4_assign => -- CASE_BODY48484[exc.cp:25]
        pro_state_next <= S_p1_end;
      when S_i5_raise => -- BLOCK88513[exc.cp:25]
        pro_state_next <= S_p1_end;
      when S_p1_end => -- PROCESS0[:0]
        pro_state_next <= S_p1_end;
        PRO_p1_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          pro_state
          )
  begin
    -- Default values
    REG_PRO_p1_EXCEPTION_WR <= to_signed(0,8);
    REG_PRO_p1_EXCEPTION_WE <= '0';
    REG_jg_WR <= to_signed(0,8);
    REG_jg_WE <= '0';
    case pro_state is
      when S_p1_start => -- PROCESS0[:0]
        null;
      when S_i6_assign => -- ASSIGN39314[exc.cp:14]
        null;
      when S_i7_for_loop => -- COUNT_LOOP2877[exc.cp:15]
        null;
      when S_i7_for_loop_cond => -- COUNT_LOOP2877[exc.cp:15]
        null;
      when S_i8_assign => -- ASSIGN85449[exc.cp:17]
        null;
      when S_i9_branch => -- BRANCH23890[exc.cp:18]
        null;
      when S_i10_raise => -- BRANCH_TRUE7669[:0]
        REG_PRO_p1_EXCEPTION_WR <= CONST_I8_1;
        REG_PRO_p1_EXCEPTION_WE <= '1';
      when S_i7_for_loop_incr => -- COUNT_LOOP2877[exc.cp:15]
        null;
      when S_i12_assign => -- ASSIGN71138[exc.cp:21]
        REG_jg_WR <= CONST_I8_18;
        REG_jg_WE <= '1';
      when S_i2_select => -- CASE_LIST16603[exc.cp:25]
        null;
      when S_i3_assign => -- ASSIGN37171[exc.cp:25]
        REG_jg_WR <= CONST_I8_19;
        REG_jg_WE <= '1';
      when S_i4_assign => -- CASE_BODY48484[exc.cp:25]
        REG_PRO_p1_EXCEPTION_WR <= CONST_I8_0;
        REG_PRO_p1_EXCEPTION_WE <= '1';
      when S_i5_raise => -- BLOCK88513[exc.cp:25]
        null;
      when S_p1_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Instruction Datapath Transitional Unit
  data_trans: process(
          j,
          LOOP_i_0,
          conpro_system_clk,
          conpro_system_reset,
          pro_state
          )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset = '1' then
        j <= to_signed(0,8);
        LOOP_i_0 <= to_signed(0,5);
      else
        case pro_state is
          when S_p1_start => -- PROCESS0[:0]
            null;
          when S_i6_assign => -- ASSIGN39314[exc.cp:14]
            j <= CONST_I8_0;
          when S_i7_for_loop => -- COUNT_LOOP2877[exc.cp:15]
            LOOP_i_0 <= CONST_I5_1;
          when S_i7_for_loop_cond => -- COUNT_LOOP2877[exc.cp:15]
            null;
          when S_i8_assign => -- ASSIGN85449[exc.cp:17]
            j <= j + CONST_I8_2;
          when S_i9_branch => -- BRANCH23890[exc.cp:18]
            null;
          when S_i10_raise => -- BRANCH_TRUE7669[:0]
            null;
          when S_i7_for_loop_incr => -- COUNT_LOOP2877[exc.cp:15]
            LOOP_i_0 <= LOOP_i_0 + CONST_I5_1;
          when S_i12_assign => -- ASSIGN71138[exc.cp:21]
            null;
          when S_i2_select => -- CASE_LIST16603[exc.cp:25]
            null;
          when S_i3_assign => -- ASSIGN37171[exc.cp:25]
            null;
          when S_i4_assign => -- CASE_BODY48484[exc.cp:25]
            null;
          when S_i5_raise => -- BLOCK88513[exc.cp:25]
            null;
          when S_p1_end => -- PROCESS0[:0]
            null;
        end case;
      end if;
    end if;
  end process data_trans;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
