--
-- Automatically generated by
-- CONPRO: Hardware Synthesis with an Imperative High Level Multiprocess Approach
--         (c) 2006-2009 by BSSLAB, Dr. Stefan Bosse
--         Version: 2.1 Revision: D90 Genetic size: 2230944
--         Compile date: Fri Jul 17 13:28:54 CEST 2009
--         Compiled by:  sbosse
--         Compiled on:  SunOS sunsil 5.10 Generic_137137-09 sun4u sparc SUNW,Sun-Blade-2500

-- Process implementation of process <main> from module <Exc>.
--
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;
entity exc_main is
port(
  -- Connections to external objects, components and the outside world
  signal REG_jg_WR: out signed(7 downto 0);
  signal REG_jg_WE: out std_logic;
  signal REG_jg_GD: in std_logic;
  signal REG_PRO_p2_EXCEPTION_RD: in signed(7 downto 0);
  signal PRO_p1_START: out std_logic;
  signal PRO_p1_GD: in std_logic;
  signal PRO_p2_CALL: out std_logic;
  signal PRO_p2_GD: in std_logic;
  signal REG_PRO_main_EXCEPTION_RD: in signed(7 downto 0);
  signal REG_PRO_main_EXCEPTION_WR: out signed(7 downto 0);
  signal REG_PRO_main_EXCEPTION_WE: out std_logic;
  signal PRO_main_ENABLE: in std_logic;
  signal PRO_main_END: out std_logic;
  signal conpro_system_clk: in std_logic;
  signal conpro_system_reset: in std_logic
);
end exc_main;
architecture main of exc_main is
  -- Local and temporary data objects
  -- Auxilliary ALU signals
  -- State Processing
  type pro_states is (
    S_main_start, -- PROCESS0[:0]
    S_i1_assign, -- ASSIGN61374[exc.cp:45]
    S_i2_fun, -- FUN58065[exc.cp:46]
    S_i9_fun, -- FUN70081[exc.cp:49]
    S_i9_fun_1, -- FUN70081[exc.cp:49]
    S_i9_fun_2, -- FUN70081[exc.cp:49]
    S_i4_select, -- SELECT_DEF58270[exc.cp:53]
    S_i5_assign, -- ASSIGN41425[exc.cp:53]
    S_i6_assign, -- CASE_BODY43252[exc.cp:53]
    S_i7_assign, -- ASSIGN99481[exc.cp:54]
    S_i8_assign, -- CASE_BODY43856[exc.cp:54]
    S_main_end -- PROCESS0[:0]
    );
  signal pro_state: pro_states := S_main_start;
  signal pro_state_next: pro_states := S_main_start;
  -- Auxilliary toplevel definitions
  constant CONST_I8_0: signed(7 downto 0) := "00000000";
  constant CONST_I8_1: signed(7 downto 0) := "00000001";
  constant CONST_I8_2: signed(7 downto 0) := "00000010";
  -- ConPro VHDL Library
  function cp_mult(A,B: SIGNED) return SIGNED is
    variable BA: SIGNED((A'length+B'length-1) downto 0);
    variable BA_n: SIGNED((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := resize(BA,A'length);
      return (BA_n);
    end;
  function cp_mult(A,B: STD_LOGIC_VECTOR) return STD_LOGIC_VECTOR is
    variable BA: STD_LOGIC_VECTOR((A'length+B'length-1) downto 0);
    variable BA_n: STD_LOGIC_VECTOR((A'length-1) downto 0);
    begin
      BA := A * B;
      BA_n := BA((A'length-1) downto 0);
      return (BA_n);
    end;
begin
  state_transition: process(
          PRO_main_ENABLE,
          pro_state_next,
          conpro_system_clk,
          conpro_system_reset
  )
  begin
    if conpro_system_clk'event and conpro_system_clk='1' then
      if conpro_system_reset='1' or PRO_main_ENABLE='0' then
        pro_state <= S_main_start;
      else
        pro_state <= pro_state_next;
      end if;
    end if;
  end process state_transition;
  -- Process implementation
  -- Instruction Controlpath Unit - The Leitwerk
  control_path: process(
          REG_jg_GD,
          PRO_p1_GD,
          PRO_p2_GD,
          REG_PRO_main_EXCEPTION_RD,
          pro_state
          )
  begin
    PRO_main_END <= '0';
    case pro_state is
      when S_main_start => -- PROCESS0[:0]
        pro_state_next <= S_i1_assign;
      when S_i1_assign => -- ASSIGN61374[exc.cp:45]
        if REG_jg_GD = '1' then
          pro_state_next <= S_i1_assign;
        else
          pro_state_next <= S_i2_fun;
        end if;
      when S_i2_fun => -- FUN58065[exc.cp:46]
        if PRO_p1_GD = '1' then
          pro_state_next <= S_i2_fun;
        else
          pro_state_next <= S_i9_fun;
        end if;
      when S_i9_fun => -- FUN70081[exc.cp:49]
        if PRO_p2_GD = '1' then
          pro_state_next <= S_i9_fun;
        else
          pro_state_next <= S_i9_fun_1;
        end if;
      when S_i9_fun_1 => -- FUN70081[exc.cp:49]
        pro_state_next <= S_i9_fun_2;
      when S_i9_fun_2 => -- FUN70081[exc.cp:49]
        if REG_PRO_main_EXCEPTION_RD = CONST_I8_0 then
          pro_state_next <= S_main_end;
        else
          pro_state_next <= S_i4_select;
        end if;
      when S_i4_select => -- SELECT_DEF58270[exc.cp:53]
        case REG_PRO_main_EXCEPTION_RD  is
          when  CONST_I8_1 => pro_state_next <= S_i5_assign;
          when  others => pro_state_next <= S_i7_assign;
        end case;
      when S_i5_assign => -- ASSIGN41425[exc.cp:53]
        if REG_jg_GD = '1' then
          pro_state_next <= S_i5_assign;
        else
          pro_state_next <= S_i6_assign;
        end if;
      when S_i6_assign => -- CASE_BODY43252[exc.cp:53]
        pro_state_next <= S_main_end;
      when S_i7_assign => -- ASSIGN99481[exc.cp:54]
        if REG_jg_GD = '1' then
          pro_state_next <= S_i7_assign;
        else
          pro_state_next <= S_i8_assign;
        end if;
      when S_i8_assign => -- CASE_BODY43856[exc.cp:54]
        pro_state_next <= S_main_end;
      when S_main_end => -- PROCESS0[:0]
        pro_state_next <= S_main_end;
        PRO_main_END <= '1';
    end case;
  end process control_path;
  
  -- Instruction Datapath Combinational Unit
  data_path: process(
          REG_PRO_p2_EXCEPTION_RD,
          pro_state
          )
  begin
    -- Default values
    REG_jg_WR <= to_signed(0,8);
    REG_jg_WE <= '0';
    PRO_p1_START <= '0';
    PRO_p2_CALL <= '0';
    REG_PRO_main_EXCEPTION_WR <= to_signed(0,8);
    REG_PRO_main_EXCEPTION_WE <= '0';
    case pro_state is
      when S_main_start => -- PROCESS0[:0]
        null;
      when S_i1_assign => -- ASSIGN61374[exc.cp:45]
        REG_jg_WR <= CONST_I8_0;
        REG_jg_WE <= '1';
      when S_i2_fun => -- FUN58065[exc.cp:46]
        PRO_p1_START <= '1';
      when S_i9_fun => -- FUN70081[exc.cp:49]
        PRO_p2_CALL <= '1';
      when S_i9_fun_1 => -- FUN70081[exc.cp:49]
        REG_PRO_main_EXCEPTION_WR <= REG_PRO_p2_EXCEPTION_RD;
        REG_PRO_main_EXCEPTION_WE <= '1';
      when S_i9_fun_2 => -- FUN70081[exc.cp:49]
        null;
      when S_i4_select => -- SELECT_DEF58270[exc.cp:53]
        null;
      when S_i5_assign => -- ASSIGN41425[exc.cp:53]
        REG_jg_WR <= CONST_I8_1;
        REG_jg_WE <= '1';
      when S_i6_assign => -- CASE_BODY43252[exc.cp:53]
        REG_PRO_main_EXCEPTION_WR <= CONST_I8_0;
        REG_PRO_main_EXCEPTION_WE <= '1';
      when S_i7_assign => -- ASSIGN99481[exc.cp:54]
        REG_jg_WR <= CONST_I8_2;
        REG_jg_WE <= '1';
      when S_i8_assign => -- CASE_BODY43856[exc.cp:54]
        REG_PRO_main_EXCEPTION_WR <= CONST_I8_0;
        REG_PRO_main_EXCEPTION_WE <= '1';
      when S_main_end => -- PROCESS0[:0]
        null;
    end case;
  end process data_path;
  
  -- Object implementation
  
  -- Toplevel assignments
  -- Monitors
end main;
